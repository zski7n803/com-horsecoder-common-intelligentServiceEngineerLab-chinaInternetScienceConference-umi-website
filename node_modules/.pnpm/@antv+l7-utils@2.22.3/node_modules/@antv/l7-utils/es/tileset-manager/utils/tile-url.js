// src/tileset-manager/utils/tile-url.ts
import { getProtocolAction } from "../../ajax";
import { tileToBounds } from "./lonlat-tile";
function isURLTemplate(s) {
  return /(?=.*{box})(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s);
}
function expandUrl(url) {
  const urls = [];
  let match = /\{([a-z])-([a-z])\}/.exec(url);
  if (match) {
    const startCharCode = match[1].charCodeAt(0);
    const stopCharCode = match[2].charCodeAt(0);
    let charCode;
    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
      urls.push(url.replace(match[0], String.fromCharCode(charCode)));
    }
    return urls;
  }
  match = /\{(\d+)-(\d+)\}/.exec(url);
  if (match) {
    const stop = parseInt(match[2], 10);
    for (let i = parseInt(match[1], 10); i <= stop; i++) {
      urls.push(url.replace(match[0], i.toString()));
    }
    return urls;
  }
  urls.push(url);
  return urls;
}
function getURLFromTemplate(template, properties) {
  if (!template || !template.length) {
    throw new Error("url is not allowed to be empty");
  }
  const { x, y, z } = properties;
  const urls = expandUrl(template);
  const index = Math.abs(x + y) % urls.length;
  const url = getProtocolAction(urls[index]) ? `${urls[index]}/{z}/{x}/{y}` : urls[index];
  return url.replace(/\{x\}/g, x.toString()).replace(/\{y\}/g, y.toString()).replace(/\{z\}/g, z.toString()).replace(/\{bbox\}/g, tileToBounds(x, y, z).join(",")).replace(/\{-y\}/g, (Math.pow(2, z) - y - 1).toString());
}
function getWMTSURLFromTemplate(template, properties) {
  const {
    x,
    y,
    z,
    layer,
    version = "1.0.0",
    style = "default",
    format,
    service = "WMTS",
    tileMatrixset
  } = properties;
  const urls = expandUrl(template);
  const index = Math.abs(x + y) % urls.length;
  const url = `${urls[index]}&SERVICE=${service}&REQUEST=GetTile&VERSION=${version}&LAYER=${layer}&STYLE=${style}&TILEMATRIXSET=${tileMatrixset}&FORMAT=${format}&TILECOL=${x}&TILEROW=${y}&TILEMATRIX=${z}`;
  return url;
}
export {
  expandUrl,
  getURLFromTemplate,
  getWMTSURLFromTemplate,
  isURLTemplate
};
