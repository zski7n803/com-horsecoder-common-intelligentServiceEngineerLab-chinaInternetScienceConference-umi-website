// src/tileset-manager/utils/strategies.ts
var TILE_STATE_DEFAULT = 0;
var TILE_STATE_VISITED = 1;
var TILE_STATE_VISIBLE = 2;
function updateTileStateRealtime(tiles) {
  tiles.forEach((tile) => {
    if (tile.isCurrent) {
      tile.isVisible = tile.isLoaded;
    }
  });
}
function updateTileStateOverlap(tiles) {
  tiles.forEach((tile) => {
    tile.properties.state = TILE_STATE_DEFAULT;
  });
  tiles.forEach((tile) => {
    if (tile.isCurrent && !getPlaceholderInAncestors(tile)) {
      getPlaceholderInChildren(tile);
    }
  });
  tiles.forEach((tile) => {
    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);
  });
}
function updateTileStateReplace(tiles) {
  tiles.forEach((tile) => {
    tile.properties.state = TILE_STATE_DEFAULT;
  });
  tiles.forEach((tile) => {
    if (tile.isCurrent) {
      getPlaceholderInAncestors(tile);
    }
  });
  const sortedTiles = tiles.slice().sort((t1, t2) => t1.z - t2.z);
  sortedTiles.forEach((tile) => {
    tile.isVisible = Boolean(tile.properties.state & TILE_STATE_VISIBLE);
    if (tile.children.length && (tile.isVisible || tile.properties.state & TILE_STATE_VISITED)) {
      tile.children.forEach((child) => {
        child.properties.state = TILE_STATE_VISITED;
      });
    } else if (tile.isCurrent) {
      getPlaceholderInChildren(tile);
    }
  });
}
function getPlaceholderInAncestors(tile) {
  while (tile) {
    if (tile.isLoaded) {
      tile.properties.state |= TILE_STATE_VISIBLE;
      return true;
    }
    tile = tile.parent;
  }
  return false;
}
function getPlaceholderInChildren(tile) {
  tile.children.forEach((child) => {
    if (child.isLoaded) {
      child.properties.state |= TILE_STATE_VISIBLE;
    } else {
      getPlaceholderInChildren(child);
    }
  });
}
export {
  updateTileStateOverlap,
  updateTileStateRealtime,
  updateTileStateReplace
};
