var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/tileset-manager/tile.ts
import bboxPolygon from "@turf/bbox-polygon";
import { EventEmitter } from "eventemitter3";
import { LoadTileDataStatus } from "./types";
import { getTileWarpXY, tileToBounds } from "./utils/lonlat-tile";
var SourceTile = class extends EventEmitter {
  constructor(options) {
    super();
    // 瓦片大小
    this.tileSize = 256;
    // 是否可以见
    this.isVisible = false;
    // 是否是当前层级的瓦片
    this.isCurrent = false;
    // 是否可以见发生变化
    this.isVisibleChange = false;
    this.loadedLayers = 0;
    this.isLayerLoaded = false;
    this.isLoad = false;
    this.isChildLoad = false;
    // 瓦片的父级瓦片
    this.parent = null;
    // 瓦片的子级瓦片
    this.children = [];
    // 瓦片数据
    this.data = null;
    // 瓦片属性
    this.properties = {};
    // 瓦片序号
    this.loadDataId = 0;
    const { x, y, z, tileSize, warp = true } = options;
    this.x = x;
    this.y = y;
    this.z = z;
    this.warp = warp || true;
    this.tileSize = tileSize;
  }
  // 是否正在请求瓦片
  get isLoading() {
    return this.loadStatus === LoadTileDataStatus.Loading;
  }
  // 是否瓦片请求成功
  get isLoaded() {
    return this.loadStatus === LoadTileDataStatus.Loaded;
  }
  // 是否瓦片请求失败
  get isFailure() {
    return this.loadStatus === LoadTileDataStatus.Failure;
  }
  setTileLayerLoaded() {
    this.isLayerLoaded = true;
  }
  // 是否瓦片请求被取消
  get isCancelled() {
    return this.loadStatus === LoadTileDataStatus.Cancelled;
  }
  // 是否数据请求结束
  get isDone() {
    return [
      LoadTileDataStatus.Loaded,
      LoadTileDataStatus.Cancelled,
      LoadTileDataStatus.Failure
    ].includes(this.loadStatus);
  }
  // 瓦片的经纬度边界
  get bounds() {
    return tileToBounds(this.x, this.y, this.z);
  }
  // 瓦片边界面
  get bboxPolygon() {
    const [minLng, minLat, maxLng, maxLat] = this.bounds;
    const center = [(maxLng - minLng) / 2, (maxLat - minLat) / 2];
    const polygon = bboxPolygon(this.bounds, {
      properties: {
        key: this.key,
        id: this.key,
        bbox: this.bounds,
        center,
        meta: `
      ${this.key}
      `
        // ${this.bbox.slice(0, 2)}
        // ${this.bbox.slice(2)}
      }
    });
    return polygon;
  }
  // 瓦片的 key
  get key() {
    const key = `${this.x}_${this.y}_${this.z}`;
    return key;
  }
  layerLoad() {
    this.loadedLayers++;
    this.emit("layerLoaded");
  }
  // 请求瓦片数据
  loadData(_0) {
    return __async(this, arguments, function* ({ getData, onLoad, onError }) {
      this.loadDataId++;
      const loadDataId = this.loadDataId;
      if (this.isLoading) {
        this.abortLoad();
      }
      this.abortController = new AbortController();
      this.loadStatus = LoadTileDataStatus.Loading;
      let tileData = null;
      let error;
      try {
        const { x, y, z, bounds, tileSize, warp } = this;
        const { warpX, warpY } = getTileWarpXY(x, y, z, warp);
        const { signal } = this.abortController;
        const params = { x: warpX, y: warpY, z, bounds, tileSize, signal, warp };
        tileData = yield getData(params, this);
      } catch (err) {
        error = err;
      }
      if (loadDataId !== this.loadDataId) {
        return;
      }
      if (this.isCancelled && !tileData) {
        return;
      }
      if (error || !tileData) {
        this.loadStatus = LoadTileDataStatus.Failure;
        onError(error, this);
        return;
      }
      this.loadStatus = LoadTileDataStatus.Loaded;
      this.data = tileData;
      onLoad(this);
    });
  }
  // 重新请求瓦片数据
  reloadData(params) {
    if (this.isLoading) {
      this.abortLoad();
    }
    this.loadData(params);
  }
  // 取消请求瓦片数据
  abortLoad() {
    if (this.isLoaded || this.isCancelled) {
      return;
    }
    this.loadStatus = LoadTileDataStatus.Cancelled;
    this.abortController.abort();
    if (this.xhrCancel) {
      this.xhrCancel();
    }
  }
};
export {
  SourceTile
};
