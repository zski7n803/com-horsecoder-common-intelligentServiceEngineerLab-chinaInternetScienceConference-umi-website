// src/statistics.ts
function max(x) {
  if (x.length === 0) {
    throw new Error("max requires at least one data point");
  }
  let value = x[0];
  for (let i = 1; i < x.length; i++) {
    if (x[i] > value) {
      value = x[i];
    }
  }
  return value * 1;
}
function min(x) {
  if (x.length === 0) {
    throw new Error("min requires at least one data point");
  }
  let value = x[0];
  for (let i = 1; i < x.length; i++) {
    if (x[i] < value) {
      value = x[i];
    }
  }
  return value * 1;
}
function sum(x) {
  if (x.length === 0) {
    return 0;
  }
  let sumNum = x[0] * 1;
  for (let i = 1; i < x.length; i++) {
    sumNum += x[i] * 1;
  }
  return sumNum;
}
function mean(x) {
  if (x.length === 0) {
    throw new Error("mean requires at least one data point");
  }
  return sum(x) / x.length;
}
function mode(x) {
  if (x.length === 0) {
    throw new Error("mean requires at least one data point");
  }
  if (x.length < 3) {
    return x[0];
  }
  x.sort();
  let last = x[0];
  let value = NaN;
  let maxSeen = 0;
  let seenThis = 1;
  for (let i = 1; i < x.length + 1; i++) {
    if (x[i] !== last) {
      if (seenThis > maxSeen) {
        maxSeen = seenThis;
        value = last;
      }
      seenThis = 1;
      last = x[i];
    } else {
      seenThis++;
    }
  }
  return value * 1;
}
var statMap = {
  min,
  max,
  mean,
  sum,
  mode
};
function getColumn(data, columnName) {
  return data.map((item) => {
    return item[columnName];
  });
}
function getSatByColumn(type, column) {
  return statMap[type](column);
}
export {
  getColumn,
  getSatByColumn,
  max,
  mean,
  min,
  mode,
  statMap,
  sum
};
