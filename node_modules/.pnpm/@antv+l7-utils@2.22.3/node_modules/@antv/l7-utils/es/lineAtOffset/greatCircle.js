// src/lineAtOffset/greatCircle.ts
import { degreesToRadians, radiansToDegrees } from "@turf/helpers";
function greatCircleLineAtOffset(source, target, offset, thetaOffset, segmentNumber = 30, autoFit) {
  let pointOffset = offset;
  if (autoFit) {
    pointOffset = Math.round(offset * 29) / 29;
  }
  return interpolate(source, target, pointOffset);
}
function getAngularDist(source, target) {
  const delta = [source[0] - target[0], source[1] - target[1]];
  const sinHalfDelta = [Math.sin(delta[0] / 2), Math.sin(delta[1] / 2)];
  const a = sinHalfDelta[1] * sinHalfDelta[1] + Math.cos(source[1]) * Math.cos(target[1]) * sinHalfDelta[0] * sinHalfDelta[0];
  return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}
function interpolate(s, t, offset) {
  const source = [degreesToRadians(s[0]), degreesToRadians(s[1])];
  const target = [degreesToRadians(t[0]), degreesToRadians(t[1])];
  const angularDist = getAngularDist(source, target);
  if (Math.abs(angularDist - Math.PI) < 1e-3) {
    return [
      (1 - offset) * source[0] + offset * target[0],
      (1 - offset) * source[1] + offset * target[1]
    ];
  }
  const a = Math.sin((1 - offset) * angularDist) / Math.sin(angularDist);
  const b = Math.sin(offset * angularDist) / Math.sin(angularDist);
  const sinSource = [Math.sin(source[0]), Math.sin(source[1])];
  const cosSource = [Math.cos(source[0]), Math.cos(source[1])];
  const sinTarget = [Math.sin(target[0]), Math.sin(target[1])];
  const cosTarget = [Math.cos(target[0]), Math.cos(target[1])];
  const x = a * cosSource[1] * cosSource[0] + b * cosTarget[1] * cosTarget[0];
  const y = a * cosSource[1] * sinSource[0] + b * cosTarget[1] * sinTarget[0];
  const z = a * sinSource[1] + b * sinTarget[1];
  return [
    radiansToDegrees(Math.atan2(y, x)),
    radiansToDegrees(Math.atan2(z, Math.sqrt(x * x + y * y)))
  ];
}
export {
  greatCircleLineAtOffset,
  interpolate
};
