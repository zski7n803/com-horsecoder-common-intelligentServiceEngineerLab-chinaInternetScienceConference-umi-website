var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/lineAtOffset/index.ts
import { arcLineAtOffset } from "./arc";
import { greatCircleLineAtOffset } from "./greatCircle";
import { pathLineAtOffset } from "./line";
function lineAtOffset(source, option) {
  const { featureId } = option;
  let features = source.data.dataArray;
  if (typeof featureId === "number") {
    features = features.filter(({ id }) => id === featureId);
  }
  return features.map((feature) => {
    const position = getLineOffsetPosition(feature, option);
    return __spreadValues(__spreadValues({}, feature), position);
  });
}
function lineAtOffsetAsyc(source, option) {
  return new Promise((resolve) => {
    if (source.inited) {
      resolve(lineAtOffset(source, option));
    } else {
      source.once("update", () => {
        resolve(lineAtOffset(source, option));
      });
    }
  });
}
function getLineOffsetPosition(feature, option) {
  const { offset, shape, thetaOffset, segmentNumber = 30, autoFit = true } = option;
  const { coordinates } = feature;
  if (shape === "line") {
    return pathLineAtOffset(coordinates, offset);
  }
  const source = coordinates[0];
  const target = coordinates[1];
  const linetheatOffset = typeof thetaOffset === "string" ? feature[thetaOffset] || 0 : thetaOffset;
  let calFunc;
  switch (shape) {
    case "arc":
      calFunc = arcLineAtOffset;
      break;
    case "greatcircle":
      calFunc = greatCircleLineAtOffset;
      break;
    default:
      calFunc = arcLineAtOffset;
  }
  const [lng, lat, height] = calFunc(
    source,
    target,
    offset,
    linetheatOffset,
    segmentNumber,
    autoFit
  );
  return {
    lng,
    lat,
    height
  };
}
export {
  lineAtOffset,
  lineAtOffsetAsyc
};
