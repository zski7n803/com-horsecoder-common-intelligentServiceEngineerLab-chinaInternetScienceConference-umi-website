// src/lru_cache.ts
var LRUCache = class {
  constructor(limit = 50, destroy) {
    this.limit = limit;
    this.destroy = destroy || this.defaultDestroy;
    this.order = [];
    this.clear();
  }
  clear() {
    this.order.forEach((key) => {
      this.delete(key);
    });
    this.cache = {};
    this.order = [];
  }
  get(key) {
    const value = this.cache[key];
    if (value) {
      this.deleteOrder(key);
      this.appendOrder(key);
    }
    return value;
  }
  set(key, value) {
    if (!this.cache[key]) {
      if (Object.keys(this.cache).length === this.limit) {
        this.delete(this.order[0]);
      }
      this.cache[key] = value;
      this.appendOrder(key);
    } else {
      this.delete(key);
      this.cache[key] = value;
      this.appendOrder(key);
    }
  }
  delete(key) {
    const value = this.cache[key];
    if (value) {
      this.deleteCache(key);
      this.deleteOrder(key);
      this.destroy(value, key);
    }
  }
  deleteCache(key) {
    delete this.cache[key];
  }
  deleteOrder(key) {
    const index = this.order.findIndex((o) => o === key);
    if (index >= 0) {
      this.order.splice(index, 1);
    }
  }
  appendOrder(key) {
    this.order.push(key);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  defaultDestroy(value, key) {
    return null;
  }
};
export {
  LRUCache
};
