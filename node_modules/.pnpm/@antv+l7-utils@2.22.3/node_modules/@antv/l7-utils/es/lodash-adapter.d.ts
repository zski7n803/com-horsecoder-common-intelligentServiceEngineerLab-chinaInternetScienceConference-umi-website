/// <reference types="lodash" />
/// <reference types="lodash" />
/// <reference types="lodash" />
export type { DebouncedFunc } from 'lodash';
export declare const lodashUtil: {
    isNil: (value: any) => value is null | undefined;
    merge: {
        <TObject, TSource>(object: TObject, source: TSource): TObject & TSource;
        <TObject_1, TSource1, TSource2>(object: TObject_1, source1: TSource1, source2: TSource2): TObject_1 & TSource1 & TSource2;
        <TObject_2, TSource1_1, TSource2_1, TSource3>(object: TObject_2, source1: TSource1_1, source2: TSource2_1, source3: TSource3): TObject_2 & TSource1_1 & TSource2_1 & TSource3;
        <TObject_3, TSource1_2, TSource2_2, TSource3_1, TSource4>(object: TObject_3, source1: TSource1_2, source2: TSource2_2, source3: TSource3_1, source4: TSource4): TObject_3 & TSource1_2 & TSource2_2 & TSource3_1 & TSource4;
        (object: any, ...otherArgs: any[]): any;
    };
    throttle: {
        <T extends (...args: any) => any>(func: T, wait?: number | undefined, options?: import("lodash").ThrottleSettingsLeading | undefined): import("lodash").DebouncedFuncLeading<T>;
        <T_1 extends (...args: any) => any>(func: T_1, wait?: number | undefined, options?: import("lodash").ThrottleSettings | undefined): import("lodash").DebouncedFunc<T_1>;
    };
    isString: (value?: any) => value is string;
    debounce: {
        <T_2 extends (...args: any) => any>(func: T_2, wait: number | undefined, options: import("lodash").DebounceSettingsLeading): import("lodash").DebouncedFuncLeading<T_2>;
        <T_3 extends (...args: any) => any>(func: T_3, wait?: number | undefined, options?: import("lodash").DebounceSettings | undefined): import("lodash").DebouncedFunc<T_3>;
    };
    pull: {
        <T_4>(array: T_4[], ...values: T_4[]): T_4[];
        <T_5>(array: import("lodash").List<T_5>, ...values: T_5[]): import("lodash").List<T_5>;
    };
    isTypedArray: (value: any) => boolean;
    isPlainObject: (value?: any) => boolean;
    isNumber: (value?: any) => value is number;
    isBoolean: (value?: any) => value is boolean;
    isEqual: (value: any, other: any) => boolean;
    cloneDeep: <T_6>(value: T_6) => T_6;
    uniq: <T_7>(array: import("lodash").List<T_7> | null | undefined) => T_7[];
    clamp: {
        (number: number, lower: number, upper: number): number;
        (number: number, upper: number): number;
    };
    upperFirst: <T_8 extends string = string>(string?: T_8 | undefined) => Capitalize<T_8>;
    get: {
        <TObject_4 extends object, TKey extends keyof TObject_4>(object: TObject_4, path: TKey | [TKey]): TObject_4[TKey];
        <TObject_5 extends object, TKey_1 extends keyof TObject_5>(object: TObject_5 | null | undefined, path: TKey_1 | [TKey_1]): TObject_5[TKey_1] | undefined;
        <TObject_6 extends object, TKey_2 extends keyof TObject_6, TDefault>(object: TObject_6 | null | undefined, path: TKey_2 | [TKey_2], defaultValue: TDefault): TDefault | Exclude<TObject_6[TKey_2], undefined>;
        <TObject_7 extends object, TKey1 extends keyof TObject_7, TKey2 extends keyof TObject_7[TKey1]>(object: TObject_7, path: [TKey1, TKey2]): TObject_7[TKey1][TKey2];
        <TObject_8 extends object, TKey1_1 extends keyof TObject_8, TKey2_1 extends keyof NonNullable<TObject_8[TKey1_1]>>(object: TObject_8 | null | undefined, path: [TKey1_1, TKey2_1]): NonNullable<TObject_8[TKey1_1]>[TKey2_1] | undefined;
        <TObject_9 extends object, TKey1_2 extends keyof TObject_9, TKey2_2 extends keyof NonNullable<TObject_9[TKey1_2]>, TDefault_1>(object: TObject_9 | null | undefined, path: [TKey1_2, TKey2_2], defaultValue: TDefault_1): TDefault_1 | Exclude<NonNullable<TObject_9[TKey1_2]>[TKey2_2], undefined>;
        <TObject_10 extends object, TKey1_3 extends keyof TObject_10, TKey2_3 extends keyof TObject_10[TKey1_3], TKey3 extends keyof TObject_10[TKey1_3][TKey2_3]>(object: TObject_10, path: [TKey1_3, TKey2_3, TKey3]): TObject_10[TKey1_3][TKey2_3][TKey3];
        <TObject_11 extends object, TKey1_4 extends keyof TObject_11, TKey2_4 extends keyof NonNullable<TObject_11[TKey1_4]>, TKey3_1 extends keyof NonNullable<NonNullable<TObject_11[TKey1_4]>[TKey2_4]>>(object: TObject_11 | null | undefined, path: [TKey1_4, TKey2_4, TKey3_1]): NonNullable<NonNullable<TObject_11[TKey1_4]>[TKey2_4]>[TKey3_1] | undefined;
        <TObject_12 extends object, TKey1_5 extends keyof TObject_12, TKey2_5 extends keyof NonNullable<TObject_12[TKey1_5]>, TKey3_2 extends keyof NonNullable<NonNullable<TObject_12[TKey1_5]>[TKey2_5]>, TDefault_2>(object: TObject_12 | null | undefined, path: [TKey1_5, TKey2_5, TKey3_2], defaultValue: TDefault_2): TDefault_2 | Exclude<NonNullable<NonNullable<TObject_12[TKey1_5]>[TKey2_5]>[TKey3_2], undefined>;
        <TObject_13 extends object, TKey1_6 extends keyof TObject_13, TKey2_6 extends keyof TObject_13[TKey1_6], TKey3_3 extends keyof TObject_13[TKey1_6][TKey2_6], TKey4 extends keyof TObject_13[TKey1_6][TKey2_6][TKey3_3]>(object: TObject_13, path: [TKey1_6, TKey2_6, TKey3_3, TKey4]): TObject_13[TKey1_6][TKey2_6][TKey3_3][TKey4];
        <TObject_14 extends object, TKey1_7 extends keyof TObject_14, TKey2_7 extends keyof NonNullable<TObject_14[TKey1_7]>, TKey3_4 extends keyof NonNullable<NonNullable<TObject_14[TKey1_7]>[TKey2_7]>, TKey4_1 extends keyof NonNullable<NonNullable<NonNullable<TObject_14[TKey1_7]>[TKey2_7]>[TKey3_4]>>(object: TObject_14 | null | undefined, path: [TKey1_7, TKey2_7, TKey3_4, TKey4_1]): NonNullable<NonNullable<NonNullable<TObject_14[TKey1_7]>[TKey2_7]>[TKey3_4]>[TKey4_1] | undefined;
        <TObject_15 extends object, TKey1_8 extends keyof TObject_15, TKey2_8 extends keyof NonNullable<TObject_15[TKey1_8]>, TKey3_5 extends keyof NonNullable<NonNullable<TObject_15[TKey1_8]>[TKey2_8]>, TKey4_2 extends keyof NonNullable<NonNullable<NonNullable<TObject_15[TKey1_8]>[TKey2_8]>[TKey3_5]>, TDefault_3>(object: TObject_15 | null | undefined, path: [TKey1_8, TKey2_8, TKey3_5, TKey4_2], defaultValue: TDefault_3): TDefault_3 | Exclude<NonNullable<NonNullable<NonNullable<TObject_15[TKey1_8]>[TKey2_8]>[TKey3_5]>[TKey4_2], undefined>;
        <T_9>(object: import("lodash").NumericDictionary<T_9>, path: number): T_9;
        <T_10>(object: import("lodash").NumericDictionary<T_10> | null | undefined, path: number): T_10 | undefined;
        <T_11, TDefault_4>(object: import("lodash").NumericDictionary<T_11> | null | undefined, path: number, defaultValue: TDefault_4): T_11 | TDefault_4;
        <TDefault_5>(object: null | undefined, path: import("lodash").PropertyPath, defaultValue: TDefault_5): TDefault_5;
        (object: null | undefined, path: import("lodash").PropertyPath): undefined;
        <TObject_16, TPath extends string>(data: TObject_16, path: TPath): string extends TPath ? any : import("lodash").GetFieldType<TObject_16, TPath, "Path">;
        <TObject_17, TPath_1 extends string, TDefault_6 = import("lodash").GetFieldType<TObject_17, TPath_1, "Path">>(data: TObject_17, path: TPath_1, defaultValue: TDefault_6): TDefault_6 | Exclude<import("lodash").GetFieldType<TObject_17, TPath_1, "Path">, null | undefined>;
        (object: any, path: import("lodash").PropertyPath, defaultValue?: any): any;
    };
    mergeWith: {
        <TObject_18, TSource_1>(object: TObject_18, source: TSource_1, customizer: (value: any, srcValue: any, key: string, object: any, source: any) => any): TObject_18 & TSource_1;
        <TObject_19, TSource1_3, TSource2_3>(object: TObject_19, source1: TSource1_3, source2: TSource2_3, customizer: (value: any, srcValue: any, key: string, object: any, source: any) => any): TObject_19 & TSource1_3 & TSource2_3;
        <TObject_20, TSource1_4, TSource2_4, TSource3_2>(object: TObject_20, source1: TSource1_4, source2: TSource2_4, source3: TSource3_2, customizer: (value: any, srcValue: any, key: string, object: any, source: any) => any): TObject_20 & TSource1_4 & TSource2_4 & TSource3_2;
        <TObject_21, TSource1_5, TSource2_5, TSource3_3, TSource4_1>(object: TObject_21, source1: TSource1_5, source2: TSource2_5, source3: TSource3_3, source4: TSource4_1, customizer: (value: any, srcValue: any, key: string, object: any, source: any) => any): TObject_21 & TSource1_5 & TSource2_5 & TSource3_3 & TSource4_1;
        (object: any, ...otherArgs: any[]): any;
    };
    isFunction: (value: any) => value is (...args: any[]) => any;
    isObject: (value?: any) => value is object;
    isUndefined: (value: any) => value is undefined;
    camelCase: (string?: string | undefined) => string;
    uniqueId: (prefix?: string | undefined) => string;
};
