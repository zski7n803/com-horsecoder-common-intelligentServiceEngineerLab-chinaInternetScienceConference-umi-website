import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { CoordinateSystem } from '@antv/l7-core';
import { EventEmitter } from 'eventemitter3';
import { SimpleMapCoord } from "../utils/simpleMapCoord";
const LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
export default class BaseMap {
  constructor(container) {
    /**
     * 地图实例
     */
    _defineProperty(this, "map", void 0);
    /**
     * @deprecated
     * TODO: 基类型不需要实现，只是自定义 Map 使用非地理坐标系才会用到
     */
    _defineProperty(this, "simpleMapCoord", new SimpleMapCoord());
    /**
     * 背景色
     */
    _defineProperty(this, "bgColor", 'rgba(0.0, 0.0, 0.0, 0.0)');
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "configService", void 0);
    _defineProperty(this, "coordinateSystemService", void 0);
    _defineProperty(this, "eventEmitter", void 0);
    _defineProperty(this, "markerContainer", void 0);
    _defineProperty(this, "mapContainer", void 0);
    _defineProperty(this, "cameraChangedCallback", void 0);
    this.config = container.mapConfig;
    this.configService = container.globalConfigService;
    this.coordinateSystemService = container.coordinateSystemService;
    this.eventEmitter = new EventEmitter();
  }
  onCameraChanged(callback) {
    this.cameraChangedCallback = callback;
  }
  updateView(viewOption) {
    var _this$cameraChangedCa;
    this.emit('mapchange');
    this.viewport.syncWithMapCamera({
      bearing: viewOption.bearing,
      center: viewOption.center,
      viewportHeight: viewOption.viewportHeight,
      pitch: viewOption.pitch,
      viewportWidth: viewOption.viewportWidth,
      zoom: viewOption.zoom
    });
    this.updateCoordinateSystemService();
    (_this$cameraChangedCa = this.cameraChangedCallback) === null || _this$cameraChangedCa === void 0 || _this$cameraChangedCa.call(this, this.viewport);
  }
  updateCoordinateSystemService() {
    const {
      offsetCoordinate = true
    } = this.config;
    // set coordinate system
    if (this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {
      this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT_OFFSET);
    } else {
      this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT);
    }
  }
  creatMapContainer(id) {
    let $wrapper;
    if (typeof id === 'string') {
      $wrapper = document.getElementById(id);
    } else {
      $wrapper = id;
    }
    return $wrapper;
  }
  getMapStyleValue(name) {
    var _this$getMapStyleConf;
    return (_this$getMapStyleConf = this.getMapStyleConfig()[name]) !== null && _this$getMapStyleConf !== void 0 ? _this$getMapStyleConf : name;
  }
  setBgColor(color) {
    this.bgColor = color;
  }
  getMapContainer() {
    return this.mapContainer;
  }
  getMarkerContainer() {
    return this.markerContainer;
  }
  getOverlayContainer() {
    return undefined;
  }
  getCanvasOverlays() {
    return undefined;
  }
  emit(name, ...args) {
    this.eventEmitter.emit(name, ...args);
  }
  once(name, handler) {
    this.eventEmitter.once(name, handler);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  meterToCoord(center, outer) {
    return 1.0;
  }
  destroy() {
    this.eventEmitter.removeAllListeners();
  }
}