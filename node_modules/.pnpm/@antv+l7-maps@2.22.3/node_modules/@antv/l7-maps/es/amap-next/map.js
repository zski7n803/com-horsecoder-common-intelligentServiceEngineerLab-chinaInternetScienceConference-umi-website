import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
const _excluded = ["id", "style", "minZoom", "maxZoom", "token", "mapInstance", "plugin"];
import AMapLoader from '@amap/amap-jsapi-loader';
import { MapServiceEvent } from '@antv/l7-core';
import { DOM, amap2Project, lodashUtil } from '@antv/l7-utils';
import { mat4, vec3 } from 'gl-matrix';
import BaseMap from "../lib/base-map";
import Viewport from "../lib/web-mercator-viewport";
import { MapType } from "../types";
import { toPaddingOptions } from "../utils/utils";
function loadStyles(css, doc) {
  var isMiniAli = typeof my !== 'undefined' && !!my && typeof my.showToast === 'function' && my.isFRM !== true;
  var isWeChatMiniProgram = typeof wx !== 'undefined' && wx !== null && (typeof wx.request !== 'undefined' || typeof wx.miniProgram !== 'undefined');
  if (isMiniAli || isWeChatMiniProgram) {
    return;
  }
  if (!doc) doc = document;
  if (!doc) {
    return;
  }
  var head = doc.head || doc.getElementsByTagName('head')[0];
  if (!head) {
    head = doc.createElement('head');
    var body = doc.body || doc.getElementsByTagName('body')[0];
    if (body) {
      body.parentNode.insertBefore(head, body);
    } else {
      doc.documentElement.appendChild(head);
    }
  }
  var style = doc.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(doc.createTextNode(css));
  }
  head.appendChild(style);
  return style;
}
loadStyles(`.amap-logo {
  display: none !important;
}
.amap-copyright {
  display: none !important;
}
.amap-overlays {
  z-index: 3 !important;
}
`);
import { MapTheme } from "./theme";
const AMAP_VERSION = '2.0';
const AMAP_API_KEY = 'f59bcf249433f8b05caaee19f349b3d7';
const ZOOM_OFFSET = 1;
const AMapEventMapV2 = {
  contextmenu: 'rightclick',
  camerachange: 'viewchange'
};
export default class BMapService extends BaseMap {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "viewport", new Viewport());
    _defineProperty(this, "version", MapType.GAODE);
    _defineProperty(this, "handleCameraChanged", () => {
      const option = this.getViewState();
      this.updateView(option);
    });
  }
  getType() {
    return 'amap';
  }
  init() {
    var _this = this;
    return _asyncToGenerator(function* () {
      const _this$config = _this.config,
        {
          id,
          style = 'light',
          minZoom = 0,
          maxZoom = 24,
          token = AMAP_API_KEY,
          mapInstance,
          plugin = []
        } = _this$config,
        rest = _objectWithoutProperties(_this$config, _excluded);
      if (!(window.AMap || mapInstance)) {
        plugin.push('Map3D');
        yield AMapLoader.load({
          key: token,
          // 申请好的Web端开发者Key，首次调用 load 时必填
          version: AMAP_VERSION,
          // 指定要加载的 JSAPI 的版本
          plugins: plugin // 需要使用的的插件列表，如比例尺'AMap.Scale'等
        });
      }
      if (mapInstance) {
        _this.map = mapInstance;
        _this.mapContainer = _this.map.getContainer();
        _this.map.on('viewchange', _this.handleCameraChanged);
      } else {
        const mapConstructorOptions = _objectSpread({
          mapStyle: _this.getMapStyleValue(style),
          // 默认取值范围 [2, 20]
          zooms: [minZoom, maxZoom],
          viewMode: '3D'
        }, rest);
        if (mapConstructorOptions.zoom) {
          // 高德地图在相同大小下需要比 MapBox 多一个 zoom 层级
          mapConstructorOptions.zoom += ZOOM_OFFSET;
        }
        if (token === AMAP_API_KEY) {
          window._AMapSecurityConfig = {
            securityJsCode: '2653011adeb04230b3a26cc9a780a800'
          };
          console.warn(`%c${_this.configService.getSceneWarninfo('MapToken')}!`, 'color: #873bf4;font-weigh:900;font-size: 16px;');
        }
        if (!id) {
          throw Error('No container id specified');
        }

        // https://lbs.amap.com/faq/other-product/1000080679/1000080682/1060894069
        window.forceWebGL = true;
        _this.mapContainer = _this.creatMapContainer(id);
        const map = new AMap.Map(_this.mapContainer, mapConstructorOptions);
        _this.map = map;

        // 监听地图相机事件
        map.on('viewchange', _this.handleCameraChanged);
      }
      _this.syncInitViewPort();
    })();
  }
  syncInitViewPort() {
    const option = this.getViewState();
    this.updateView(option);
  }
  getViewState() {
    const {
      center,
      zoom
    } = getMapHighPrecisionState(this.map);
    const option = {
      center: center,
      viewportWidth: this.map.getContainer().clientWidth,
      viewportHeight: this.map.getContainer().clientHeight,
      bearing: -this.map.getRotation(),
      pitch: this.map.getPitch(),
      zoom: zoom - ZOOM_OFFSET
    };
    return option;
  }
  creatMapContainer(id) {
    const wrapper = super.creatMapContainer(id);
    const amapdiv = document.createElement('div');
    amapdiv.style.cssText += `
       position: absolute;
       top: 0;
       height: 100%;
       width: 100%;
     `;
    amapdiv.id = lodashUtil.uniqueId('l7_amap_div');
    wrapper.appendChild(amapdiv);
    return amapdiv;
  }
  getContainer() {
    return this.map.getContainer();
  }
  addMarkerContainer() {
    if (!this.map) return;
    const mapContainer = this.map.getContainer();
    if (mapContainer !== null) {
      const amap = mapContainer.getElementsByClassName('amap-maps')[0];
      // amap2 的 amap-maps 新增 z-index=0; 样式，让 marker 中 zIndex 失效
      amap.style.zIndex = 'auto';
      this.markerContainer = DOM.create('div', 'l7-marker-container2', amap);
    }
  }
  getMarkerContainer() {
    return this.markerContainer;
  }
  getCanvasOverlays() {
    var _this$mapContainer;
    return (_this$mapContainer = this.mapContainer) === null || _this$mapContainer === void 0 ? void 0 : _this$mapContainer.querySelector('.amap-overlays');
  }

  // MapEvent // 定义事件类型
  on(type, handler) {
    if (MapServiceEvent.indexOf(type) !== -1) {
      this.eventEmitter.on(type, handler);
    } else {
      this.map.on(AMapEventMapV2[type] || type, handler);
    }
  }
  off(type, handler) {
    if (MapServiceEvent.indexOf(type) !== -1) {
      this.eventEmitter.off(type, handler);
    } else {
      this.map.off(AMapEventMapV2[type] || type, handler);
    }
  }
  getSize() {
    const size = this.map.getSize();
    return [size.getWidth(), size.getHeight()];
  }
  getMinZoom() {
    // @ts-ignore
    const zooms = this.map.getZooms();
    return zooms[0] - ZOOM_OFFSET;
  }
  getMaxZoom() {
    // @ts-ignore
    const zooms = this.map.getZooms();
    return zooms[1] - ZOOM_OFFSET;
  }
  getZoom() {
    // 统一返回 Mapbox 缩放等级
    return this.map.getZoom() - ZOOM_OFFSET;
  }
  getCenter(options) {
    if (options !== null && options !== void 0 && options.padding) {
      const originCenter = this.getCenter();
      const padding = toPaddingOptions(options.padding);
      const px = this.lngLatToPixel([originCenter.lng, originCenter.lat]);
      const offsetPx = [(padding.right - padding.left) / 2, (padding.bottom - padding.top) / 2];
      const newCenter = this.pixelToLngLat([px.x - offsetPx[0], px.y - offsetPx[1]]);
      return newCenter;
    }
    const center = this.map.getCenter();
    return {
      lng: center.getLng(),
      lat: center.getLat()
    };
  }
  getPitch() {
    return this.map.getPitch();
  }
  getRotation() {
    // 统一返回逆时针旋转角度
    return 360 - this.map.getRotation();
  }
  getBounds() {
    const bounds = this.map.getBounds();
    const NE = bounds.getNorthEast();
    const SW = bounds.getSouthWest();
    const center = this.getCenter();
    const maxlng = center.lng > NE.getLng() || center.lng < SW.getLng() ? 180 - NE.getLng() : NE.getLng();
    const minlng = center.lng < SW.getLng() ? SW.getLng() - 180 : SW.getLng();
    // 兼容 Mapbox，统一返回西南、东北
    return [[minlng, SW.getLat()], [maxlng, NE.getLat()]];
  }
  getMapContainer() {
    return this.mapContainer;
  }
  getMapCanvasContainer() {
    var _this$map$getContaine;
    return (_this$map$getContaine = this.map.getContainer()) === null || _this$map$getContaine === void 0 ? void 0 : _this$map$getContaine.getElementsByClassName('amap-maps')[0];
  }
  getMapStyleConfig() {
    return MapTheme;
  }
  getMapStyleValue(name) {
    return this.getMapStyleConfig()[name] || name;
  }
  getMapStyle() {
    return this.map.getMapStyle();
  }
  setMapStyle(style) {
    this.map.setMapStyle(this.getMapStyleValue(style));
  }
  setRotation(rotation) {
    return this.map.setRotation(rotation);
  }
  zoomIn() {
    this.map.zoomIn();
  }
  zoomOut() {
    this.map.zoomOut();
  }
  panTo(p) {
    this.map.panTo(p);
  }
  panBy(x = 0, y = 0) {
    this.map.panBy(x, y);
  }
  fitBounds(extent) {
    this.map.setBounds(new AMap.Bounds([extent[0][0], extent[0][1], extent[1][0], extent[1][1]]),
    // @ts-expect-error 立即缩放到指定位置
    true);
  }
  setZoomAndCenter(zoom, center) {
    this.map.setZoomAndCenter(zoom + ZOOM_OFFSET, center);
  }
  setCenter(lnglat, options) {
    if (options !== null && options !== void 0 && options.padding) {
      const padding = toPaddingOptions(options.padding);
      const px = this.lngLatToPixel(lnglat);
      const offsetPx = [(padding.right - padding.left) / 2, (padding.bottom - padding.top) / 2];
      const newCenter = this.pixelToLngLat([px.x + offsetPx[0], px.y + offsetPx[1]]);
      this.map.setCenter([newCenter.lng, newCenter.lat]);
    } else {
      this.map.setCenter(lnglat);
    }
  }
  setPitch(pitch) {
    return this.map.setPitch(pitch);
  }
  setZoom(zoom) {
    // 统一设置 Mapbox 缩放等级
    return this.map.setZoom(zoom + ZOOM_OFFSET);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setMaxZoom(max) {
    throw new Error('Method not implemented.');
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setMinZoom(min) {
    throw new Error('Method not implemented.');
  }
  setMapStatus(option) {
    this.map.setStatus(option);
  }
  meterToCoord(center, outer) {
    // Tip: 实际米距离 unit meter
    const meterDis = AMap.GeometryUtil.distance(new AMap.LngLat(...center), new AMap.LngLat(...outer));

    // Tip: 三维世界坐标距离
    const [x1, y1] = amap2Project(...center);
    const [x2, y2] = amap2Project(...outer);
    const coordDis = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    return coordDis / meterDis;
  }
  pixelToLngLat(pixel) {
    const lngLat = this.map.pixelToLngLat(new AMap.Pixel(pixel[0], pixel[1]));
    return {
      lng: lngLat.getLng(),
      lat: lngLat.getLat()
    };
  }
  lngLatToPixel(lnglat) {
    const p = this.map.lnglatToPixel(lnglat);
    return {
      x: p.getX(),
      y: p.getY()
    };
  }
  containerToLngLat(pixel) {
    const ll = new AMap.Pixel(pixel[0], pixel[1]);
    const lngLat = this.map.containerToLngLat(ll);
    return {
      lng: lngLat === null || lngLat === void 0 ? void 0 : lngLat.getLng(),
      lat: lngLat === null || lngLat === void 0 ? void 0 : lngLat.getLat()
    };
  }
  lngLatToContainer(lnglat) {
    const pixel = this.map.lngLatToContainer(lnglat);
    return {
      x: pixel.getX(),
      y: pixel.getY()
    };
  }

  /**
   * 将经纬度转成墨卡托坐标
   */
  lngLatToMercator([lng, lat], altitude) {
    const [x, y] = amap2Project(lng, lat);
    return {
      x: x,
      y: y,
      z: altitude
    };
  }
  getModelMatrix(lnglat, altitude, rotate, scale = [1, 1, 1]) {
    const flat = this.viewport.projectFlat(lnglat);
    const modelMatrix = mat4.create();
    mat4.translate(modelMatrix, modelMatrix, vec3.fromValues(flat[0], flat[1], altitude));
    mat4.scale(modelMatrix, modelMatrix, vec3.fromValues(scale[0], scale[1], scale[2]));
    mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
    mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
    mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
    return modelMatrix;
  }
  exportMap(type) {
    var _this$getContainer;
    const renderCanvas = (_this$getContainer = this.getContainer()) === null || _this$getContainer === void 0 ? void 0 : _this$getContainer.getElementsByClassName('amap-layer')[0];
    const layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
    return layersPng;
  }
  destroy() {
    var _this$mapContainer2;
    super.destroy();
    // 销毁地图可视化层的容器
    (_this$mapContainer2 = this.mapContainer) === null || _this$mapContainer2 === void 0 || (_this$mapContainer2 = _this$mapContainer2.parentNode) === null || _this$mapContainer2 === void 0 || _this$mapContainer2.removeChild(this.mapContainer);

    // @ts-ignore
    delete window.initAMap;
    const $jsapi = document.getElementById('amap-script');
    if ($jsapi) {
      document.head.removeChild($jsapi);
    }
    this.map.destroy();
  }
}

/**
 * 访问高精度的地图状态（临时解决方案）
 * - 解决 map.getCenter() 方法只返回小数点五位有效数据
 * - 解决 map.getZoom() 方法只返回小数点两位有效数据
 */
function getMapHighPrecisionState(map) {
  // @ts-expect-error 访问未暴露的内部属性
  const viewStatus = map._view.getOptions();
  const center = viewStatus.center;
  const zoom = viewStatus.zoom;
  return {
    center,
    zoom
  };
}