/// <reference types="@types/amap-js-api" />
import type { Bounds, ICameraOptions, ILngLat, IMercator, IPoint, IStatusOptions, MapStyleConfig, MapStyleName } from '@antv/l7-core';
import BaseMap from '../lib/base-map';
import Viewport from '../lib/web-mercator-viewport';
import { MapType } from '../types';
import './logo.css';
export default class BMapService extends BaseMap<AMap.Map> {
    protected viewport: Viewport;
    version: MapType;
    getType(): string;
    init(): Promise<void>;
    private syncInitViewPort;
    protected handleCameraChanged: () => void;
    private getViewState;
    protected creatMapContainer(id: string | HTMLDivElement): HTMLDivElement;
    getContainer(): HTMLElement | null;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    getCanvasOverlays(): HTMLElement;
    on(type: string, handler: (...args: any[]) => void): void;
    off(type: string, handler: (...args: any[]) => void): void;
    getSize(): [number, number];
    getMinZoom(): number;
    getMaxZoom(): number;
    getZoom(): number;
    getCenter(options?: ICameraOptions): ILngLat;
    getPitch(): number;
    getRotation(): number;
    getBounds(): Bounds;
    getMapContainer(): HTMLElement | null;
    getMapCanvasContainer(): HTMLElement;
    getMapStyleConfig(): MapStyleConfig;
    getMapStyleValue(name: string): any;
    getMapStyle(): string;
    setMapStyle(style: MapStyleName): void;
    setRotation(rotation: number): void;
    zoomIn(): void;
    zoomOut(): void;
    panTo(p: [number, number]): void;
    panBy(x?: number, y?: number): void;
    fitBounds(extent: Bounds): void;
    setZoomAndCenter(zoom: number, center: [number, number]): void;
    setCenter(lnglat: [number, number], options?: ICameraOptions): void;
    setPitch(pitch: number): void;
    setZoom(zoom: number): void;
    setMaxZoom(max: number): void;
    setMinZoom(min: number): void;
    setMapStatus(option: Partial<IStatusOptions>): void;
    meterToCoord(center: [number, number], outer: [number, number]): number;
    pixelToLngLat(pixel: [number, number]): ILngLat;
    lngLatToPixel(lnglat: [number, number]): IPoint;
    containerToLngLat(pixel: [number, number]): ILngLat;
    lngLatToContainer(lnglat: [number, number]): IPoint;
    /**
     * 将经纬度转成墨卡托坐标
     */
    lngLatToMercator([lng, lat]: [number, number], altitude: number): IMercator;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number]): number[];
    exportMap(type: 'jpg' | 'png'): string;
    destroy(): void;
}
