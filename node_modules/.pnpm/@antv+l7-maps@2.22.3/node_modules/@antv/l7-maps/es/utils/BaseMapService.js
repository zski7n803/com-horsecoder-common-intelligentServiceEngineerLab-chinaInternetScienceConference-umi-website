import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
/**
 * MapboxService
 */

import { CoordinateSystem, MapServiceEvent } from '@antv/l7-core';
import { DOM } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
import { SimpleMapCoord } from "./simpleMapCoord";
import { MapTheme } from "./theme";
const EventMap = {
  mapmove: 'move',
  camerachange: 'move',
  zoomchange: 'zoom',
  dragging: 'drag'
};
const LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
export default class BaseMapService {
  constructor(container) {
    _defineProperty(this, "version", 'DEFAUlTMAP');
    _defineProperty(this, "map", void 0);
    _defineProperty(this, "simpleMapCoord", new SimpleMapCoord());
    // 背景色
    _defineProperty(this, "bgColor", 'rgba(0.0, 0.0, 0.0, 0.0)');
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "configService", void 0);
    _defineProperty(this, "coordinateSystemService", void 0);
    _defineProperty(this, "eventEmitter", void 0);
    _defineProperty(this, "markerContainer", void 0);
    _defineProperty(this, "cameraChangedCallback", void 0);
    _defineProperty(this, "$mapContainer", void 0);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _defineProperty(this, "handleCameraChanged", e => {
      const {
        lat,
        lng
      } = this.map.getCenter();
      // Tip: 统一触发地图变化事件
      this.emit('mapchange');
      // resync
      this.viewport.syncWithMapCamera({
        bearing: this.map.getBearing(),
        center: [lng, lat],
        viewportHeight: this.map.transform.height,
        pitch: this.map.getPitch(),
        viewportWidth: this.map.transform.width,
        zoom: this.map.getZoom(),
        // mapbox 中固定相机高度为 viewport 高度的 1.5 倍
        cameraHeight: 0
      });
      this.updateCoordinateSystemService();
      this.cameraChangedCallback(this.viewport);
    });
    this.config = container.mapConfig;
    this.configService = container.globalConfigService;
    this.coordinateSystemService = container.coordinateSystemService;
    this.eventEmitter = new EventEmitter();
  }
  setBgColor(color) {
    this.bgColor = color;
  }

  // init
  addMarkerContainer() {
    const container = this.map.getCanvasContainer();
    this.markerContainer = DOM.create('div', 'l7-marker-container', container);
    this.markerContainer.setAttribute('tabindex', '-1');
  }
  getMarkerContainer() {
    return this.markerContainer;
  }
  getOverlayContainer() {
    return undefined;
  }
  getCanvasOverlays() {
    return undefined;
  }

  //  map event
  on(type, handle) {
    if (MapServiceEvent.indexOf(type) !== -1) {
      this.eventEmitter.on(type, handle);
    } else {
      // 统一事件名称
      this.map.on(EventMap[type] || type, handle);
    }
  }
  off(type, handle) {
    this.map.off(EventMap[type] || type, handle);
    this.eventEmitter.off(type, handle);
  }
  getContainer() {
    return this.map.getContainer();
  }
  getMapCanvasContainer() {
    return this.map.getCanvasContainer();
  }
  getSize() {
    if (this.version === 'SIMPLE') {
      return this.simpleMapCoord.getSize();
    }
    const size = this.map.transform;
    return [size.width, size.height];
  }
  // get mapStatus method

  getType() {
    return 'default';
  }
  getZoom() {
    return this.map.getZoom();
  }
  setZoom(zoom) {
    return this.map.setZoom(zoom);
  }
  getCenter() {
    return this.map.getCenter();
  }
  setCenter(lnglat) {
    this.map.setCenter(lnglat);
  }
  getPitch() {
    return this.map.getPitch();
  }
  getRotation() {
    return this.map.getBearing();
  }
  getBounds() {
    return this.map.getBounds().toArray();
  }
  getMinZoom() {
    return this.map.getMinZoom();
  }
  getMaxZoom() {
    return this.map.getMaxZoom();
  }
  setRotation(rotation) {
    this.map.setBearing(rotation);
  }
  zoomIn(option, eventData) {
    this.map.zoomIn(option, eventData);
  }
  zoomOut(option, eventData) {
    this.map.zoomOut(option, eventData);
  }
  setPitch(pitch) {
    return this.map.setPitch(pitch);
  }
  panTo(p) {
    this.map.panTo(p);
  }
  panBy(x = 0, y = 0) {
    this.map.panBy([x, y]);
  }
  fitBounds(bound, fitBoundsOptions) {
    this.map.fitBounds(bound, fitBoundsOptions);
  }
  setMaxZoom(max) {
    this.map.setMaxZoom(max);
  }
  setMinZoom(min) {
    this.map.setMinZoom(min);
  }
  setMapStatus(option) {
    if (option.doubleClickZoom === true) {
      this.map.doubleClickZoom.enable();
    }
    if (option.doubleClickZoom === false) {
      this.map.doubleClickZoom.disable();
    }
    if (option.dragEnable === false) {
      this.map.dragPan.disable();
    }
    if (option.dragEnable === true) {
      this.map.dragPan.enable();
    }
    if (option.rotateEnable === false) {
      this.map.dragRotate.disable();
    }
    if (option.dragEnable === true) {
      this.map.dragRotate.enable();
    }
    if (option.keyboardEnable === false) {
      this.map.keyboard.disable();
    }
    if (option.keyboardEnable === true) {
      this.map.keyboard.enable();
    }
    if (option.zoomEnable === false) {
      this.map.scrollZoom.disable();
    }
    if (option.zoomEnable === true) {
      this.map.scrollZoom.enable();
    }
  }
  setZoomAndCenter(zoom, center) {
    this.map.flyTo({
      zoom,
      center
    });
  }
  setMapStyle(style) {
    var _this$map;
    // @ts-ignore
    (_this$map = this.map) === null || _this$map === void 0 || _this$map.setStyle(this.getMapStyleValue(style));
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  meterToCoord(center, outer) {
    return 1.0;
  }

  // TODO: 计算像素坐标
  pixelToLngLat(pixel) {
    return this.map.unproject(pixel);
  }
  lngLatToPixel(lnglat) {
    return this.map.project(lnglat);
  }
  containerToLngLat(pixel) {
    return this.map.unproject(pixel);
  }
  lngLatToContainer(lnglat) {
    return this.map.project(lnglat);
  }
  getMapStyle() {
    try {
      var _this$map$getStyle$sp;
      // @ts-ignore
      const styleUrl = (_this$map$getStyle$sp = this.map.getStyle().sprite) !== null && _this$map$getStyle$sp !== void 0 ? _this$map$getStyle$sp : '';
      // 将 Mapbox 返回的样式字符串转成传入 style 保持一致
      if (/^mapbox:\/\/sprites\/zcxduo\/\w+\/\w+$/.test(styleUrl)) {
        return styleUrl === null || styleUrl === void 0 ? void 0 : styleUrl.replace(/\/\w+$/, '').replace(/sprites/, 'styles');
      }
      return styleUrl;
    } catch (e) {
      return '';
    }
  }
  getMapStyleConfig() {
    return MapTheme;
  }
  getMapStyleValue(name) {
    var _this$getMapStyleConf;
    return (_this$getMapStyleConf = this.getMapStyleConfig()[name]) !== null && _this$getMapStyleConf !== void 0 ? _this$getMapStyleConf : name;
  }
  destroy() {
    this.eventEmitter.removeAllListeners();
    if (this.map) {
      this.map.remove();
      this.$mapContainer = null;
    }
  }
  emit(name, ...args) {
    this.eventEmitter.emit(name, ...args);
  }
  once(name, ...args) {
    this.eventEmitter.once(name, ...args);
  }
  getMapContainer() {
    return this.$mapContainer;
  }
  exportMap(type) {
    var _this$map2;
    // @ts-ignore
    const renderCanvas = (_this$map2 = this.map) === null || _this$map2 === void 0 ? void 0 : _this$map2.getCanvas();
    const layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
    return layersPng;
  }
  onCameraChanged(callback) {
    this.cameraChangedCallback = callback;
  }
  creatMapContainer(id) {
    let $wrapper = id;
    if (typeof id === 'string') {
      $wrapper = document.getElementById(id);
    }
    return $wrapper;
  }
  updateView(viewOption) {
    // Tip: 统一触发地图变化事件
    this.emit('mapchange');
    // resync
    this.viewport.syncWithMapCamera({
      bearing: viewOption.bearing,
      center: viewOption.center,
      viewportHeight: viewOption.viewportHeight,
      pitch: viewOption.pitch,
      viewportWidth: viewOption.viewportWidth,
      zoom: viewOption.zoom,
      // mapbox 中固定相机高度为 viewport 高度的 1.5 倍
      cameraHeight: 0
    });
    this.updateCoordinateSystemService();
    this.cameraChangedCallback(this.viewport);
  }
  updateCoordinateSystemService() {
    const {
      offsetCoordinate = true
    } = this.config;
    // set coordinate system
    if (this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {
      this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT_OFFSET);
    } else {
      this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT);
    }
  }
}