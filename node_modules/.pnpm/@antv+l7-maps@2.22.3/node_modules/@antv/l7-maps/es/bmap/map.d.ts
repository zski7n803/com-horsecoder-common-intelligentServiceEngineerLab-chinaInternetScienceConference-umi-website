/// <reference types="@types/bmapgl" />
import type { Bounds, ICameraOptions, ILngLat, IMercator, IPoint, IStatusOptions, IViewport, MapStyleConfig, Point } from '@antv/l7-core';
import BaseMapService from '../utils/BaseMapService';
import './logo.css';
export default class BMapService extends BaseMapService<BMapGL.Map> {
    protected viewport: IViewport;
    protected styleConfig: Record<string, any>;
    protected currentStyle: any;
    protected evtCbProxyMap: Map<string, Map<(...args: any) => any, (...args: any) => any>>;
    getMap(): BMapGL.Map & {
        destroy: () => void;
        getTilt: () => number;
        enableRotate: () => void;
        enableRotateGestures: () => void;
        disableRotate: () => void;
        disableRotateGestures: () => void;
        lnglatToMercator: (lng: number, lat: number) => [number, number];
        _webglPainter: {
            _canvas: HTMLCanvasElement;
        };
        getHeading: () => number;
        setDisplayOptions: (options: {
            indoor?: boolean;
        }) => void;
    };
    handleCameraChanged: () => void;
    setBgColor(color: string): void;
    init(): Promise<void>;
    destroy(): void;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    getCanvasOverlays(): HTMLElement;
    on(type: string, handle: (...args: any[]) => void): void;
    off(type: string, handle: (...args: any[]) => void): void;
    once(type: string, handler: (...args: any[]) => void): void;
    getContainer(): HTMLElement | null;
    getSize(): [number, number];
    getMinZoom(): number;
    getMaxZoom(): number;
    getType(): string;
    getZoom(): number;
    getCenter(options?: ICameraOptions): ILngLat;
    getPitch(): number;
    getRotation(): number;
    getBounds(): Bounds;
    getMapContainer(): HTMLElement;
    getMapCanvasContainer(): HTMLElement;
    getMapStyleConfig(): MapStyleConfig;
    getMapStyleValue(name: string): any;
    setMapStyle(style: any): void;
    setRotation(rotation: number): void;
    zoomIn(): void;
    zoomOut(): void;
    panTo(p: Point): void;
    panBy(x: number, y: number): void;
    fitBounds(bound: Bounds, fitBoundsOptions?: unknown): void;
    setZoomAndCenter(zoom: number, [lng, lat]: Point): void;
    setCenter([lng, lat]: [number, number], options?: ICameraOptions): void;
    setPitch(pitch: number): any;
    setZoom(zoom: number): any;
    setMapStatus(option: Partial<IStatusOptions>): void;
    meterToCoord(center: [number, number], outer: [number, number]): number;
    pixelToLngLat([x, y]: Point): ILngLat;
    lngLatToPixel([lng, lat]: Point): IPoint;
    containerToLngLat([x, y]: [number, number]): ILngLat;
    lngLatToContainer([lng, lat]: [number, number]): IPoint;
    lngLatToCoord([lng, lat]: [number, number]): [number, number];
    lngLatToCoords(list: number[][] | number[][][]): any;
    lngLatToMercator([lng, lat]: [number, number], altitude: number): IMercator;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number]): number[];
    getCustomCoordCenter?(): [number, number];
    exportMap(type: 'jpg' | 'png'): string;
    private hideLogo;
    private initMapByConfig;
}
