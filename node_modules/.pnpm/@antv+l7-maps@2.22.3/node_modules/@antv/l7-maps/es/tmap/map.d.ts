/// <reference types="@map-component/tmap-types" />
import type { Bounds, ILngLat, IMercator, IPoint, IStatusOptions, IViewport, MapStyleConfig, Point } from '@antv/l7-core';
import BaseMapService from '../utils/BaseMapService';
import './logo.css';
export default class TMapService extends BaseMapService<TMap.Map> {
    protected viewport: IViewport;
    protected evtCbProxyMap: Map<string, Map<(...args: any) => any, (...args: any) => any>>;
    handleCameraChanged: () => void;
    init(): Promise<void>;
    destroy(): void;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    on(type: string, handle: (...args: any[]) => void): void;
    off(type: string, handle: (...args: any[]) => void): void;
    once(): void;
    getContainer(): HTMLElement | null;
    getSize(): [number, number];
    getMinZoom(): number;
    getMaxZoom(): number;
    getType(): string;
    getZoom(): number;
    getCenter(): ILngLat;
    getPitch(): number;
    getRotation(): number;
    getBounds(): Bounds;
    getMapContainer(): HTMLElement;
    getMapCanvasContainer(): HTMLElement;
    getCanvasOverlays(): HTMLElement;
    getMapStyleConfig(): MapStyleConfig;
    setBgColor(color: string): void;
    setMapStyle(styleId: any): void;
    setRotation(rotation: number): void;
    zoomIn(): void;
    zoomOut(): void;
    panTo([lng, lat]: Point): void;
    panBy(x: number, y: number): void;
    fitBounds(bound: Bounds, fitBoundsOptions?: unknown): void;
    setZoomAndCenter(zoom: number, [lng, lat]: Point): void;
    setCenter([lng, lat]: [number, number]): void;
    setPitch(pitch: number): any;
    setZoom(zoom: number): any;
    setMapStatus(option: Partial<IStatusOptions>): void;
    meterToCoord([centerLon, centerLat]: [number, number], [outerLon, outerLat]: [number, number]): number;
    pixelToLngLat([x, y]: Point): ILngLat;
    lngLatToPixel([lng, lat]: Point): IPoint;
    containerToLngLat([x, y]: [number, number]): ILngLat;
    lngLatToContainer([lng, lat]: [number, number]): IPoint;
    lngLatToCoord?([lng, lat]: [number, number]): [number, number];
    lngLatToCoords?(list: number[][] | number[][][]): any;
    lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;
    getModelMatrix(lnglat: [number, number], altitude: number, rotate: [number, number, number], scale?: [number, number, number]): number[];
    getCustomCoordCenter?(): [number, number];
    exportMap(type: 'jpg' | 'png'): string;
    rotateY?(): void;
    private hideLogo;
}
