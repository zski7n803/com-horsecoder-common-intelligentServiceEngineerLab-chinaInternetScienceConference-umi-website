"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Map = require("@antv/l7-map");
var _BaseMapService = _interopRequireDefault(require("../utils/BaseMapService"));
var _Viewport = _interopRequireDefault(require("./Viewport"));
const _excluded = ["id", "style", "rotation"];
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * MapboxService
 */
const EventMap = {
  mapmove: 'move',
  camerachange: 'move',
  zoomchange: 'zoom',
  dragging: 'drag'
};
const LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
/**
 * EarthService
 */
class L7EarthService extends _BaseMapService.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "version", 'GLOBEL');
    // TODO: 判断地图是否正在拖拽
    (0, _defineProperty2.default)(this, "dragging", false);
    (0, _defineProperty2.default)(this, "viewport", void 0);
    // T: 用于记录鼠标对相机的控制
    (0, _defineProperty2.default)(this, "handleCameraChanging", void 0);
    (0, _defineProperty2.default)(this, "handleCameraTimer", void 0);
    (0, _defineProperty2.default)(this, "handleCameraChanged", e => {
      // Tip: 统一触发地图变化事件
      this.emit('mapchange');
      const DELAY_TIME = 2000;
      this.handleCameraChanging = true;
      if (this.handleCameraTimer) {
        clearTimeout(this.handleCameraTimer);
      }
      this.handleCameraTimer = setTimeout(() => {
        this.handleCameraChanging = false;
      }, DELAY_TIME);
      // 定义鼠标相机控制
      const rotateStep = 0.02;
      if (e.type && e.originalEvent) {
        if (e.originalEvent.type === 'wheel') {
          this.viewport.scaleZoom(0.01 * Math.sign(e.originalEvent.wheelDelta) * -1);
        }
        if (Math.abs(e.originalEvent.movementX) > Math.abs(e.originalEvent.movementY)) {
          if (e.originalEvent.movementX > 0) {
            this.viewport.rotateY(rotateStep);
          } else if (e.originalEvent.movementX < 0) {
            this.viewport.rotateY(-rotateStep);
          }
        } else {
          if (e.originalEvent.movementY > 0) {
            this.viewport.rotateX(rotateStep);
          } else if (e.originalEvent.movementY < 0) {
            this.viewport.rotateX(-rotateStep);
          }
        }
      }
      const {
        offsetCoordinate = true
      } = this.config;

      // resync
      this.viewport.syncWithMapCamera({
        viewportHeight: this.map.transform.height,
        viewportWidth: this.map.transform.width
      });
      // set coordinate system
      if (this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {
        this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT_OFFSET);
      } else {
        this.coordinateSystemService.setCoordinateSystem(_l7Core.CoordinateSystem.LNGLAT);
      }
      this.cameraChangedCallback(this.viewport);
    });
  }
  lngLatToMercator(lnglat, altitude) {
    throw new Error('Method not implemented.');
  }
  getModelMatrix(lnglat, altitude, rotate, scale, origin) {
    throw new Error('Method not implemented.');
  }
  //  map event
  on(type, handle) {
    if (_l7Core.MapServiceEvent.indexOf(type) !== -1) {
      this.eventEmitter.on(type, handle);
    } else {
      // 统一事件名称
      this.map.on(EventMap[type] || type, handle);
    }
  }
  off(type, handle) {
    this.map.off(EventMap[type] || type, handle);
    this.eventEmitter.off(type, handle);
  }
  getMapCanvasContainer() {
    return this.map.getCanvasContainer();
  }
  getSize() {
    const size = this.map.transform;
    return [size.width, size.height];
  }
  // get mapStatus method

  getType() {
    return 'earth';
  }
  init() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const _this$config = _this.config,
        {
          id = 'map',
          style = 'light',
          rotation = 0
        } = _this$config,
        rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
      _this.viewport = new _Viewport.default();
      _this.$mapContainer = _this.creatMapContainer(id);
      _this.map = new _l7Map.Map((0, _objectSpread2.default)({
        container: _this.$mapContainer,
        bearing: rotation
      }, rest));
      _this.map.on('load', _this.handleCameraChanged);
      _this.map.on('move', _this.handleCameraChanged);

      // 不同于高德地图，需要手动触发首次渲染
      _this.handleCameraChanged({});
    })();
  }
  destroy() {
    var _this$$mapContainer;
    // 销毁地图可视化层的容器
    (_this$$mapContainer = this.$mapContainer) === null || _this$$mapContainer === void 0 || (_this$$mapContainer = _this$$mapContainer.parentNode) === null || _this$$mapContainer === void 0 || _this$$mapContainer.removeChild(this.$mapContainer);
    this.eventEmitter.removeAllListeners();
    if (this.map) {
      this.map.remove();
      this.$mapContainer = null;
    }
  }
  emit(name, ...args) {
    this.eventEmitter.emit(name, ...args);
  }
  once(name, ...args) {
    this.eventEmitter.once(name, ...args);
  }
  getMapContainer() {
    return this.$mapContainer;
  }
  getCanvasOverlays() {
    return undefined;
  }
  onCameraChanged(callback) {
    this.cameraChangedCallback = callback;
  }

  /**
   * 地球模式向外暴露的 Y 轴旋转方法
   * @returns
   */
  rotateY(option) {
    const {
      force = false,
      reg = 0.01
    } = option || {};
    // TODO: 让旋转方法与
    if (this.handleCameraChanging && !force) {
      return;
    }
    if (this.viewport) {
      this.viewport.rotateY(reg);
      this.viewport.syncWithMapCamera({
        viewportHeight: this.map.transform.height,
        viewportWidth: this.map.transform.width
      });
      this.cameraChangedCallback(this.viewport);
    }
  }
}
exports.default = L7EarthService;