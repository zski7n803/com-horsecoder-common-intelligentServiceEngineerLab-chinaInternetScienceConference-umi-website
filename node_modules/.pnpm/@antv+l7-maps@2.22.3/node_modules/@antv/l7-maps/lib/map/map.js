"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Map = require("@antv/l7-map");
var _glMatrix = require("gl-matrix");
var _webMercatorViewport = _interopRequireDefault(require("../lib/web-mercator-viewport"));
var _types = require("../types");
var _BaseMapService = _interopRequireDefault(require("../utils/BaseMapService"));
const _excluded = ["id", "style", "rotation", "mapInstance", "version", "mapSize", "interactive"];
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * MapboxService
 */
// TODO: 基于抽象类 BaseMap 实现
class DefaultMapService extends _BaseMapService.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "version", _types.MapType.DEFAULT);
    (0, _defineProperty2.default)(this, "viewport", void 0);
  }
  /**
   * 将经纬度转成墨卡托坐标
   * @param lnglat
   * @returns
   */
  lngLatToCoord(lnglat, origin = {
    x: 0,
    y: 0,
    z: 0
  }) {
    // @ts-ignore
    const {
      x,
      y
    } = this.lngLatToMercator(lnglat, 0);
    return [x - origin.x, y - origin.y];
  }
  lngLatToMercator(lnglat, altitude) {
    const {
      x = 0,
      y = 0,
      z = 0
    } = _l7Map.MercatorCoordinate.fromLngLat(lnglat, altitude);
    return {
      x,
      y,
      z
    };
  }
  getModelMatrix(lnglat, altitude, rotate, scale = [1, 1, 1], origin = {
    x: 0,
    y: 0,
    z: 0
  }) {
    const modelAsMercatorCoordinate = _l7Map.MercatorCoordinate.fromLngLat(lnglat, altitude);
    // @ts-ignore
    const meters = modelAsMercatorCoordinate.meterInMercatorCoordinateUnits();
    const modelMatrix = _glMatrix.mat4.create();
    _glMatrix.mat4.translate(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(modelAsMercatorCoordinate.x - origin.x, modelAsMercatorCoordinate.y - origin.y, modelAsMercatorCoordinate.z || 0 - origin.z));
    _glMatrix.mat4.scale(modelMatrix, modelMatrix, _glMatrix.vec3.fromValues(meters * scale[0], -meters * scale[1], meters * scale[2]));
    _glMatrix.mat4.rotateX(modelMatrix, modelMatrix, rotate[0]);
    _glMatrix.mat4.rotateY(modelMatrix, modelMatrix, rotate[1]);
    _glMatrix.mat4.rotateZ(modelMatrix, modelMatrix, rotate[2]);
    return modelMatrix;
  }
  init() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const _this$config = _this.config,
        {
          id = 'map',
          style = 'light',
          rotation = 0,
          mapInstance,
          version = 'DEFAULTMAP',
          mapSize = 10000,
          interactive = true
        } = _this$config,
        rest = (0, _objectWithoutProperties2.default)(_this$config, _excluded);
      _this.viewport = new _webMercatorViewport.default();
      _this.version = version;
      _this.simpleMapCoord.setSize(mapSize);
      if (version === 'SIMPLE' && rest.center) {
        rest.center = _this.simpleMapCoord.unproject(rest.center);
      }
      if (mapInstance) {
        // @ts-ignore
        _this.map = mapInstance;
        _this.$mapContainer = _this.map.getContainer();
      } else {
        _this.$mapContainer = _this.creatMapContainer(id);
        _this.map = new _l7Map.Map((0, _objectSpread2.default)({
          container: _this.$mapContainer,
          bearing: rotation
        }, rest));
      }
      _this.map.on('load', () => {
        _this.handleCameraChanged();
      });
      if (interactive) {
        // L7 作为第三方地图插件时关闭重绘
        _this.map.on('move', _this.handleCameraChanged);
      }

      // 不同于高德地图，需要手动触发首次渲染
      setTimeout(() => {
        _this.handleCameraChanged();
      }, 100);
      _this.handleCameraChanged();
    })();
  }
  creatMapContainer(id) {
    let wrapper = id;
    if (typeof id === 'string') {
      wrapper = document.getElementById(id);
    }
    const container = document.createElement('div');
    container.style.cssText += `
      position: absolute;
      top: 0;
      height: 100%;
      width: 100%;
    `;
    wrapper.appendChild(container);
    return container;
  }
  exportMap(type) {
    return '';
  }
  setMapStyle(style) {}
  getCanvasOverlays() {
    return this.getContainer();
  }
}
exports.default = DefaultMapService;