import BaseMapService from '../utils/BaseMapService';
import type { Bounds, ILngLat, IMercator, IPoint, IStatusOptions, IViewport, Point } from '@antv/l7-core';
export default class TdtMapService extends BaseMapService<any> {
    protected viewport: IViewport | null;
    protected evtCbProxyMap: Map<string, Map<(...args: any) => any, (...args: any) => any>>;
    private sceneContainer;
    addMarkerContainer(): void;
    getMarkerContainer(): HTMLElement;
    onCameraChanged(callback: (viewport: IViewport) => void): void;
    private resize;
    private update;
    private getZoomScale;
    private zoomStartUpdate;
    getOverlayContainer(): HTMLElement | undefined;
    protected handleCameraChanged: () => void;
    init(): Promise<void>;
    destroy(): void;
    on(type: string, handle: (...args: any[]) => void): void;
    off(type: string, handle: (...args: any[]) => void): void;
    once(type: string, handler: (...args: any[]) => void): void;
    getMapContainer(): HTMLElement;
    getType(): string;
    getMapCanvasContainer(): HTMLElement;
    getSize(): [number, number];
    getZoom(): number;
    setZoom(zoom: number): any;
    getCenter(): ILngLat;
    setCenter(lnglat: [number, number]): void;
    setZoomAndCenter(zoom: number, center: [number, number]): void;
    getPitch(): number;
    getRotation(): number;
    setRotation(rotation: number): void;
    zoomIn(option?: any, eventData?: any): void;
    zoomOut(option?: any, eventData?: any): void;
    panTo(p: [number, number]): void;
    panBy(x?: number, y?: number): void;
    fitBounds(bound: Bounds): void;
    setMaxZoom(max: number): void;
    setMinZoom(min: number): void;
    setMapStatus(option: Partial<IStatusOptions>): void;
    getModelMatrix(): number[];
    pixelToLngLat([x, y]: Point): ILngLat;
    lngLatToPixel([lng, lat]: Point): IPoint;
    containerToLngLat([x, y]: [number, number]): ILngLat;
    lngLatToContainer([lng, lat]: [number, number]): IPoint;
    lngLatToCoord([lng, lat]: [number, number]): [number, number];
    lngLatToCoords(list: number[][] | number[][][]): any;
    getBounds(): Bounds;
    lngLatToMercator(lnglat: [number, number], altitude: number): IMercator;
    getCustomCoordCenter?(): [number, number];
    protected creatMapContainer(id: string | HTMLDivElement): HTMLDivElement;
}
