"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _BaseModel = _interopRequireDefault(require("../../core/BaseModel"));
var _triangulation = require("../../core/triangulation");
/* babel-plugin-inline-import '../shaders/terrain/terrain_rgb_frag.glsl' */
const Raster_terrainFrag = "uniform sampler2D u_texture;\nuniform sampler2D u_colorTexture;\n\nlayout(std140) uniform commonUniforms {\n vec4 u_unpack;\n vec2 u_domain;\n float u_opacity;\n float u_noDataValue;\n float u_clampLow;\n float u_clampHigh;\n};\n\nin vec2 v_texCoord;\nout vec4 outputColor;\n\n\nfloat getElevation(vec2 coord, float bias) {\n    // Convert encoded elevation value to meters\n    vec4 data =  texture(SAMPLER_2D(u_texture), coord,bias) * 255.0;\n    data.a = -1.0;\n    return dot(data, u_unpack);\n}\n\nvec4 getColor(float value) {\n   float normalisedValue =(value- u_domain[0]) / (u_domain[1] - u_domain[0]);\n    vec2 coord = vec2(normalisedValue, 0);\n    return  texture(SAMPLER_2D(u_colorTexture), coord);\n}\n\nvoid main() {\n  float value = getElevation(v_texCoord,0.0);\n  if (value == u_noDataValue) {\n    outputColor = vec4(0.0, 0, 0, 0.0);\n  } else if ((u_clampLow < 0.5 && value < u_domain[0]) || (u_clampHigh < 0.5 && value > u_domain[1])) {\n     outputColor = vec4(0.0, 0, 0, 0.0);\n  } else {\n   \n    outputColor = getColor(value);\n    outputColor.a =  outputColor.a * u_opacity ;\n      if(outputColor.a < 0.01)\n      discard;\n  }\n}\n";
/* babel-plugin-inline-import '../shaders/terrain/terrain_rgb_vert.glsl' */
const Raster_terrainVert = "layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_Uv;\n\nlayout(std140) uniform commonUniforms {\n  vec4 u_unpack;\n  vec2 u_domain;\n  float u_opacity;\n  float u_noDataValue;\n  float u_clampLow;\n  float u_clampHigh;\n};\nout vec2 v_texCoord;\n#pragma include \"projection\"\n\nvoid main() {\n  v_texCoord = a_Uv;\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy, 0.0, 1.0));\n}\n";
class RasterTerrainRGB extends _BaseModel.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "texture", void 0);
  }
  get attributeLocation() {
    return Object.assign(super.attributeLocation, {
      MAX: super.attributeLocation.MAX,
      UV: 9
    });
  }
  getCommonUniformsInfo() {
    const {
      opacity,
      clampLow = true,
      clampHigh = true,
      noDataValue = -9999999,
      domain,
      rampColors,
      colorTexture,
      rScaler = 6553.6,
      gScaler = 25.6,
      bScaler = 0.1,
      offset = 10000
    } = this.layer.getLayerConfig();
    const newdomain = domain || (0, _l7Utils.getDefaultDomain)(rampColors);
    let texture = colorTexture;
    if (!colorTexture) {
      texture = this.layer.textureService.getColorTexture(rampColors, newdomain);
    } else {
      this.layer.textureService.setColorTexture(colorTexture, rampColors, newdomain);
    }
    const commonOptions = {
      u_unpack: [rScaler, gScaler, bScaler, offset],
      u_domain: newdomain,
      u_opacity: opacity || 1,
      u_noDataValue: noDataValue,
      u_clampLow: clampLow,
      u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,
      u_texture: this.texture,
      u_colorTexture: texture
    };
    this.textures = [this.texture, texture];
    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
    return commonBufferInfo;
  }
  initModels() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      _this.initUniformsBuffer();
      const source = _this.layer.getSource();
      const {
        createTexture2D
      } = _this.rendererService;
      const imageData = yield source.data.images;
      _this.texture = createTexture2D({
        data: imageData[0],
        width: imageData[0].width,
        height: imageData[0].height,
        min: _l7Core.gl.LINEAR,
        mag: _l7Core.gl.LINEAR
      });
      const model = yield _this.layer.buildLayerModel({
        moduleName: 'RasterTileDataImage',
        vertexShader: Raster_terrainVert,
        fragmentShader: Raster_terrainFrag,
        defines: _this.getDefines(),
        triangulation: _triangulation.RasterImageTriangulation,
        primitive: _l7Core.gl.TRIANGLES,
        depth: {
          enable: false
        }
      });
      return [model];
    })();
  }
  clearModels() {
    var _this$texture;
    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();
  }
  buildModels() {
    var _this2 = this;
    return (0, _asyncToGenerator2.default)(function* () {
      return _this2.initModels();
    })();
  }
  registerBuiltinAttributes() {
    // 注册 Position 属性 64 位地位部分，经纬度数据开启双精度，避免大于 22 层级以上出现数据偏移
    this.registerPosition64LowAttribute();
    this.styleAttributeService.registerStyleAttribute({
      name: 'uv',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Uv',
        shaderLocation: this.attributeLocation.UV,
        buffer: {
          usage: _l7Core.gl.DYNAMIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 2,
        update: (feature, featureIdx, vertex) => {
          return [vertex[3], vertex[4]];
        }
      }
    });
  }
}
exports.default = RasterTerrainRGB;