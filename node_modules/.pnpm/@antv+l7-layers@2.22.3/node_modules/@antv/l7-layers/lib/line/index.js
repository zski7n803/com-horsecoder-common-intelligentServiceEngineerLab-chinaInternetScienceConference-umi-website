"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _BaseLayer = _interopRequireDefault(require("../core/BaseLayer"));
var _models = _interopRequireDefault(require("./models"));
class LineLayer extends _BaseLayer.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "type", 'LineLayer');
    (0, _defineProperty2.default)(this, "enableShaderEncodeStyles", ['stroke', 'offsets', 'opacity', 'thetaOffset']);
    //注意顺序 4+2+1+1
    (0, _defineProperty2.default)(this, "arrowInsertCount", 0);
    (0, _defineProperty2.default)(this, "defaultSourceConfig", {
      data: [{
        lng1: 100,
        lat1: 30.0,
        lng2: 130,
        lat2: 30
      }],
      options: {
        parser: {
          type: 'json',
          x: 'lng1',
          y: 'lat1',
          x1: 'lng2',
          y1: 'lat2'
        }
      }
    });
  }
  buildModels() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const shape = _this.getModelType();
      _this.layerModel = new _models.default[shape](_this);
      yield _this.initLayerModels();
    })();
  }
  getDefaultConfig() {
    const type = this.getModelType();
    const defaultConfig = {
      line: {},
      linearline: {},
      simple: {},
      wall: {},
      arc3d: {
        blend: 'additive'
      },
      arc: {
        blend: 'additive'
      },
      greatcircle: {
        blend: 'additive'
      },
      tileLine: {},
      earthArc3d: {},
      flowline: {},
      arrow: {}
    };
    return defaultConfig[type];
  }
  getModelType() {
    var _shapeAttribute$scale;
    if (this.layerType) {
      return this.layerType;
    }
    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
    const shape = shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;
    return shape || 'line';
  }
  processData(filterData) {
    // simple line 在接受 multiPolygon 的数据进行绘制的时候需要对数据进行拆解
    if (this.getModelType() !== 'simple') {
      return filterData;
    }
    const dataArray = [];
    filterData.map(data => {
      if (Array.isArray(data.coordinates) && Array.isArray(data.coordinates[0]) && Array.isArray(data.coordinates[0][0])) {
        const object = (0, _objectSpread2.default)({}, data);
        data.coordinates.map(d => {
          dataArray.push((0, _objectSpread2.default)((0, _objectSpread2.default)({}, object), {}, {
            coordinates: d
          }));
        });
      } else {
        dataArray.push(data);
      }
    });
    return dataArray;
  }
}
exports.default = LineLayer;