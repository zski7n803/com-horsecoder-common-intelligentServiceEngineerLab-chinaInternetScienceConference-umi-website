"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.direction = direction;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _glMatrix = require("gl-matrix");
const lineA = _glMatrix.vec2.create();
function direction(out, a, b) {
  _glMatrix.vec2.sub(out, a, b);
  _glMatrix.vec2.normalize(out, out);
  return out;
}
class ExtrudePolyline {
  constructor() {
    (0, _defineProperty2.default)(this, "complex", void 0);
    (0, _defineProperty2.default)(this, "started", false);
    (0, _defineProperty2.default)(this, "totalDistance", 0);
    (0, _defineProperty2.default)(this, "currentIndex", 0);
    this.complex = {
      positions: [],
      indices: [],
      startIndex: 0,
      indexes: []
    };
  }
  simpleExtrude(points) {
    const complex = this.complex;
    if (points.length <= 1) {
      return complex;
    }
    this.started = false;
    this.totalDistance = 0;
    const total = points.length;
    let count = complex.startIndex;
    for (let i = 1; i < total; i++) {
      const last = points[i - 1];
      const cur = points[i];
      const amt = this.simpleSegment(complex, count, last, cur);
      count += amt;
    }
    for (let i = 0; i < complex.positions.length / 6; i++) {
      complex.positions[i * 6 + 5] = this.totalDistance;
    }
    return complex;
  }
  simpleSegment(complex, index, last, cur) {
    let count = 0;
    const indices = complex.indices;
    const positions = complex.positions;
    const flatCur = (0, _l7Utils.aProjectFlat)([cur[0], cur[1]]);
    const flatLast = (0, _l7Utils.aProjectFlat)([last[0], last[1]]);
    direction(lineA, flatCur, flatLast);
    const segmentDistance = this.lineSegmentDistance(flatCur, flatLast);
    this.totalDistance += segmentDistance;
    if (!this.started) {
      this.started = true;
      this.extrusions(positions, last, this.totalDistance - segmentDistance);
    }
    this.extrusions(positions, cur, this.totalDistance);
    indices.push(index + 0, index + 1, index + 2);
    indices.push(index + 2, index + 1, index + 3);
    count += 2;
    return count;
  }
  extrusions(positions, point,
  // 顶点
  distanceRadio) {
    positions.push(point[0], point[1], point[2] | 0, distanceRadio, 0, point[2] | 0);
    this.complex.indexes.push(this.currentIndex);
    positions.push(point[0], point[1], point[2] | 0, distanceRadio, 0, point[2] | 0);
    this.complex.indexes.push(this.currentIndex);
    this.currentIndex++;
  }
  lineSegmentDistance(b1, a1) {
    const dx = a1[0] - b1[0];
    const dy = a1[1] - b1[1];
    return Math.sqrt(dx * dx + dy * dy);
  }
}
exports.default = ExtrudePolyline;