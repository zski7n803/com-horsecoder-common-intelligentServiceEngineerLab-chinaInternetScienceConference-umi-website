"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeMiter = computeMiter;
exports.computeNormal = computeNormal;
exports.default = void 0;
exports.direction = direction;
exports.getArrayUnique = getArrayUnique;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _glMatrix = require("gl-matrix");
const tmp = _glMatrix.vec2.create();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const capEnd = _glMatrix.vec2.create();
const lineA = _glMatrix.vec2.create();
const lineB = _glMatrix.vec2.create();
const tangent = _glMatrix.vec2.create();
function computeMiter(lineTangent, miter, start, end, halfThick) {
  _glMatrix.vec2.add(lineTangent, start, end);
  _glMatrix.vec2.normalize(lineTangent, lineTangent);
  miter = _glMatrix.vec2.fromValues(-lineTangent[1], lineTangent[0]);
  const tmpvec = _glMatrix.vec2.fromValues(-start[1], start[0]);
  return [halfThick / _glMatrix.vec2.dot(miter, tmpvec), miter];
}
function computeNormal(out, dir) {
  return _glMatrix.vec2.set(out, -dir[1], dir[0]);
}
function direction(out, a, b) {
  _glMatrix.vec2.sub(out, a, b);
  _glMatrix.vec2.normalize(out, out);
  return out;
}
function isPointEqual(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
function getArrayUnique(matrix) {
  const map = new Map();
  for (let i = 0; i < matrix.length; i++) {
    const key = matrix[0].toString() + '-' + matrix[1].toString();
    if (map.get(key)) {
      matrix.splice(i, 1);
      i++;
    } else {
      map.set(key, key);
    }
  }
  return matrix;
}
class ExtrudePolyline {
  constructor(opts = {}) {
    (0, _defineProperty2.default)(this, "complex", void 0);
    (0, _defineProperty2.default)(this, "join", void 0);
    (0, _defineProperty2.default)(this, "cap", void 0);
    (0, _defineProperty2.default)(this, "miterLimit", void 0);
    (0, _defineProperty2.default)(this, "thickness", void 0);
    (0, _defineProperty2.default)(this, "normal", void 0);
    (0, _defineProperty2.default)(this, "lastFlip", -1);
    (0, _defineProperty2.default)(this, "miter", _glMatrix.vec2.fromValues(0, 0));
    (0, _defineProperty2.default)(this, "started", false);
    (0, _defineProperty2.default)(this, "dash", false);
    (0, _defineProperty2.default)(this, "totalDistance", 0);
    (0, _defineProperty2.default)(this, "currentIndex", 0);
    this.join = opts.join || 'miter';
    this.cap = opts.cap || 'butt';
    this.miterLimit = opts.miterLimit || 10;
    this.thickness = opts.thickness || 1;
    this.dash = opts.dash || false;
    this.complex = {
      positions: [],
      indices: [],
      normals: [],
      startIndex: 0,
      indexes: []
    };
  }
  simpleExtrude(points) {
    const complex = this.complex;
    if (points.length <= 1) {
      return complex;
    }
    this.lastFlip = -1;
    this.started = false;
    this.normal = null;
    this.totalDistance = 0;
    const total = points.length;
    let count = complex.startIndex;
    for (let i = 1; i < total; i++) {
      const last = points[i - 1];
      const cur = points[i];
      const next = i < points.length - 1 ? points[i + 1] : null;
      const amt = this.simpleSegment(complex, count, last, cur, next);
      count += amt;
    }
    if (this.dash) {
      for (let i = 0; i < complex.positions.length / 6; i++) {
        complex.positions[i * 6 + 5] = this.totalDistance;
      }
    }
    complex.startIndex = complex.positions.length / 6;
    return complex;
  }
  extrude(points) {
    const complex = this.complex;
    if (points.length <= 1) {
      return complex;
    }
    this.lastFlip = -1;
    this.started = false;
    this.normal = null;
    this.totalDistance = 0;
    // 去除数组里重复的点
    // points = getArrayUnique(points);
    const total = points.length;
    let count = complex.startIndex;
    for (let i = 1; i < total; i++) {
      const last = points[i - 1];
      const cur = points[i];
      const next = i < points.length - 1 ? points[i + 1] : null;
      const amt = this.segment(complex, count, last, cur, next);
      count += amt;
    }
    if (this.dash) {
      for (let i = 0; i < complex.positions.length / 6; i++) {
        complex.positions[i * 6 + 5] = this.totalDistance;
      }
    }
    complex.startIndex = complex.positions.length / 6;
    return complex;
  }
  simpleSegment(complex, index, last, cur, next) {
    let count = 0;
    const indices = complex.indices;
    const positions = complex.positions;
    const normals = complex.normals;
    const flatCur = (0, _l7Utils.aProjectFlat)([cur[0], cur[1]]);
    const flatLast = (0, _l7Utils.aProjectFlat)([last[0], last[1]]);
    // @ts-ignore
    direction(lineA, flatCur, flatLast);
    let segmentDistance = 0;
    if (this.dash) {
      // @ts-ignore
      segmentDistance = this.lineSegmentDistance(flatCur, flatLast);
      this.totalDistance += segmentDistance;
    }
    if (!this.normal) {
      this.normal = _glMatrix.vec2.create();
      computeNormal(this.normal, lineA);
    }
    if (!this.started) {
      this.started = true;
      this.extrusions(positions, normals, last, this.normal, this.thickness, this.totalDistance - segmentDistance);
    }
    indices.push(index + 0, index + 1, index + 2);
    if (!next) {
      computeNormal(this.normal, lineA);
      this.extrusions(positions, normals, cur, this.normal, this.thickness, this.totalDistance);
      indices.push(...(this.lastFlip === 1 ? [index, index + 2, index + 3] : [index + 2, index + 1, index + 3]));
      count += 2;
    } else {
      const flatNext = (0, _l7Utils.aProjectFlat)([next[0], next[1]]);
      if (isPointEqual(flatCur, flatNext)) {
        _glMatrix.vec2.add(flatNext, flatCur, _glMatrix.vec2.normalize(flatNext, _glMatrix.vec2.subtract(flatNext, flatCur, flatLast)));
      }
      direction(lineB, flatNext, flatCur);

      // stores tangent & miter

      const [miterLen, miter] = computeMiter(tangent, _glMatrix.vec2.create(), lineA, lineB, this.thickness);
      // normal(tmp, lineA)

      // get orientation
      let flip = _glMatrix.vec2.dot(tangent, this.normal) < 0 ? -1 : 1;
      this.extrusions(positions, normals, cur, miter, miterLen, this.totalDistance);
      indices.push(...(this.lastFlip === 1 ? [index, index + 2, index + 3] : [index + 2, index + 1, index + 3]));
      flip = -1;

      // the miter is now the normal for our next join
      _glMatrix.vec2.copy(this.normal, miter);
      count += 2;
      this.lastFlip = flip;
    }
    return count;
  }
  segment(complex, index, last, cur, next) {
    let count = 0;
    const indices = complex.indices;
    const positions = complex.positions;
    const normals = complex.normals;
    const capSquare = this.cap === 'square';
    const joinBevel = this.join === 'bevel';
    const flatCur = (0, _l7Utils.aProjectFlat)([cur[0], cur[1]]);
    const flatLast = (0, _l7Utils.aProjectFlat)([last[0], last[1]]);
    // @ts-ignore
    direction(lineA, flatCur, flatLast);
    let segmentDistance = 0;
    if (this.dash) {
      // @ts-ignore
      segmentDistance = this.lineSegmentDistance(flatCur, flatLast);
      this.totalDistance += segmentDistance;
    }
    if (!this.normal) {
      this.normal = _glMatrix.vec2.create();
      computeNormal(this.normal, lineA);
    }
    if (!this.started) {
      this.started = true;

      // if the end cap is type square, we can just push the verts out a bit
      if (capSquare) {
        // vec2.scaleAndAdd(capEnd, last, lineA, -this.thickness);
        const out1 = _glMatrix.vec2.create();
        const out2 = _glMatrix.vec2.create();
        _glMatrix.vec2.add(out1, this.normal, lineA);
        _glMatrix.vec2.add(out2, this.normal, lineA);
        normals.push(out2[0], out2[1], 0);
        normals.push(out1[0], out1[1], 0);
        positions.push(last[0], last[1], last[2] | 0, this.totalDistance - segmentDistance, -this.thickness, last[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        positions.push(last[0], last[1], last[2] | 0, this.totalDistance - segmentDistance, this.thickness, last[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        this.currentIndex++;
        // this.extrusions(positions, normals, last, out, this.thickness);
        // last = capEnd;
      } else {
        this.extrusions(positions, normals, last, this.normal, this.thickness, this.totalDistance - segmentDistance);
      }
    }
    indices.push(index + 0, index + 1, index + 2);
    if (!next) {
      computeNormal(this.normal, lineA);
      if (capSquare) {
        // vec2.scaleAndAdd(capEnd, cur, lineA, this.thickness);
        // cur = capEnd;
        const out1 = _glMatrix.vec2.create();
        const out2 = _glMatrix.vec2.create();
        _glMatrix.vec2.sub(out2, lineA, this.normal);
        _glMatrix.vec2.add(out1, lineA, this.normal);
        // this.extrusions(positions, normals, cur, out, this.thickness);
        normals.push(out2[0], out2[1], 0);
        normals.push(out1[0], out1[1], 0);
        positions.push(cur[0], cur[1], cur[2] | 0, this.totalDistance, this.thickness, cur[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        positions.push(cur[0], cur[1], cur[2] | 0, this.totalDistance, this.thickness, cur[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        this.currentIndex++;
      } else {
        this.extrusions(positions, normals, cur, this.normal, this.thickness, this.totalDistance);
      }

      // this.extrusions(positions, normals, cur, this.normal, this.thickness);
      indices.push(...(this.lastFlip === 1 ? [index, index + 2, index + 3] : [index + 2, index + 1, index + 3]));
      count += 2;
    } else {
      const flatNext = (0, _l7Utils.aProjectFlat)([next[0], next[1]]);
      if (isPointEqual(flatCur, flatNext)) {
        _glMatrix.vec2.add(flatNext, flatCur, _glMatrix.vec2.normalize(flatNext, _glMatrix.vec2.subtract(flatNext, flatCur, flatLast)));
      }
      direction(lineB, flatNext, flatCur);

      // stores tangent & miter

      const [miterLen, miter] = computeMiter(tangent, _glMatrix.vec2.create(), lineA, lineB, this.thickness);
      // normal(tmp, lineA)

      // get orientation
      let flip = _glMatrix.vec2.dot(tangent, this.normal) < 0 ? -1 : 1;
      let bevel = joinBevel;
      if (!bevel && this.join === 'miter') {
        const limit = miterLen;
        if (limit > this.miterLimit) {
          bevel = true;
        }
      }
      if (bevel) {
        normals.push(this.normal[0], this.normal[1], 0);
        normals.push(miter[0], miter[1], 0);
        positions.push(cur[0], cur[1], cur[2] | 0, this.totalDistance, -this.thickness * flip, cur[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        positions.push(cur[0], cur[1], cur[2] | 0, this.totalDistance, this.thickness * flip, cur[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        this.currentIndex++;
        indices.push(...(this.lastFlip !== -flip ? [index, index + 2, index + 3] : [index + 2, index + 1, index + 3]));

        // now add the bevel triangle
        indices.push(index + 2, index + 3, index + 4);
        computeNormal(tmp, lineB);
        _glMatrix.vec2.copy(this.normal, tmp); // store normal for next round
        normals.push(this.normal[0], this.normal[1], 0);
        positions.push(cur[0], cur[1], cur[2] | 0, this.totalDistance, -this.thickness * flip, cur[2] | 0);
        this.complex.indexes.push(this.currentIndex);
        this.currentIndex++;
        count += 3;
      } else {
        this.extrusions(positions, normals, cur, miter, miterLen, this.totalDistance);
        indices.push(...(this.lastFlip === 1 ? [index, index + 2, index + 3] : [index + 2, index + 1, index + 3]));
        flip = -1;

        // the miter is now the normal for our next join
        _glMatrix.vec2.copy(this.normal, miter);
        count += 2;
      }
      this.lastFlip = flip;
    }
    return count;
  }
  extrusions(positions, normals, point,
  // 顶点
  normal,
  // 法向量
  thickness,
  // 高度
  distanceRadio) {
    normals.push(normal[0], normal[1], 0);
    normals.push(normal[0], normal[1], 0);
    positions.push(point[0], point[1], point[2] | 0, distanceRadio, -thickness, point[2] | 0);
    this.complex.indexes.push(this.currentIndex);
    positions.push(point[0], point[1], point[2] | 0, distanceRadio, thickness, point[2] | 0);
    this.complex.indexes.push(this.currentIndex);
    this.currentIndex++;
  }
  lineSegmentDistance(b1, a1) {
    const dx = a1[0] - b1[0];
    const dy = a1[1] - b1[1];
    return Math.sqrt(dx * dx + dy * dy);
  }
}
exports.default = ExtrudePolyline;