"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultipleOfFourNumber = MultipleOfFourNumber;
exports.getPolygonSurfaceIndices = getPolygonSurfaceIndices;
var _l7Utils = require("@antv/l7-utils");
var _earcut = _interopRequireDefault(require("earcut"));
function MultipleOfFourNumber(num) {
  return Math.max(Math.ceil(num / 4) * 4, 4);
}

/**
 * Get vertex indices for drawing polygon mesh (triangulation)
 */
function getPolygonSurfaceIndices(positions, holeIndices, positionSize, preproject = true) {
  const is3d = positionSize === 3;
  if (preproject) {
    positions = positions.slice();
    const p = [];
    for (let i = 0; i < positions.length; i += positionSize) {
      p[0] = positions[i];
      p[1] = positions[i + 1];
      if (is3d) {
        p[2] = positions[i + 2];
      }

      // earcut is a 2D triangulation algorithm, and handles 3D data as if it was projected onto the XY plane
      const xy = (0, _l7Utils.lngLatToMeters)(p, true, {
        enable: false,
        decimal: 1
      });
      positions[i] = xy[0];
      positions[i + 1] = xy[1];
      if (is3d) {
        positions[i + 2] = xy[2];
      }
    }
  }
  const indices = (0, _earcut.default)(positions, holeIndices, positionSize);
  return indices;
}