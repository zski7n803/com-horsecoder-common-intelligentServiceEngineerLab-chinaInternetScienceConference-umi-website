"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.COMMON_ATTRIBUTE_LOCATION = void 0;
exports.getCommonStyleAttributeOptions = getCommonStyleAttributeOptions;
var _l7Core = require("@antv/l7-core");
/**
 * Attribute Layout Location in Shader
 */
const COMMON_ATTRIBUTE_LOCATION = exports.COMMON_ATTRIBUTE_LOCATION = {
  // common attribute in RegisterStyleAttributePlugin
  POSITION: 0,
  // low part for double precision POSITION attribute
  POSITION_64LOW: 1,
  COLOR: 2,
  PICKING_COLOR: 3,
  // common style attribute
  STROKE: 4,
  OPACITY: 5,
  OFFSETS: 6,
  ROTATION: 7,
  // last index
  MAX: 8
};
function getCommonStyleAttributeOptions(name) {
  switch (name) {
    // // roate
    case 'rotation':
      return {
        name: 'Rotation',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Rotation',
          shaderLocation: COMMON_ATTRIBUTE_LOCATION.ROTATION,
          buffer: {
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: feature => {
            const {
              rotation = 0
            } = feature;
            return Array.isArray(rotation) ? [rotation[0]] : [rotation];
          }
        }
      };
    case 'stroke':
      return {
        name: 'stroke',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Stroke',
          shaderLocation: COMMON_ATTRIBUTE_LOCATION.STROKE,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.DYNAMIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 4,
          update: feature => {
            const {
              stroke = [1, 1, 1, 1]
            } = feature;
            return stroke;
          }
        }
      };
    case 'opacity':
      return {
        name: 'opacity',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Opacity',
          shaderLocation: COMMON_ATTRIBUTE_LOCATION.OPACITY,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 1,
          update: feature => {
            const {
              opacity: op = 1
            } = feature;
            return [op];
          }
        }
      };
    case 'offsets':
      return {
        name: 'offsets',
        type: _l7Core.AttributeType.Attribute,
        descriptor: {
          name: 'a_Offsets',
          shaderLocation: COMMON_ATTRIBUTE_LOCATION.OFFSETS,
          buffer: {
            // give the WebGL driver a hint that this buffer may change
            usage: _l7Core.gl.STATIC_DRAW,
            data: [],
            type: _l7Core.gl.FLOAT
          },
          size: 2,
          update: feature => {
            const {
              offsets: epo
            } = feature;
            return epo;
          }
        }
      };
    default:
      return undefined;
  }
}