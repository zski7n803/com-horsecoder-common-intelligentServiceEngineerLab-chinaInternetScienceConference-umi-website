"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _blend = require("../utils/blend");
var _stencil = require("../utils/stencil");
var _CommonStyleAttribute = require("./CommonStyleAttribute");
var _constant = require("./constant");
var _utils = require("./utils");
// 属性索引宏定义前缀，使用命名空间避免 define 名称重复情况
const DEFINE_ATTRIBUTE_LOCATION_PREFIX = 'ATTRIBUTE_LOCATION_';

// eslint-disable-next-line @typescript-eslint/no-unused-vars
class BaseModel {
  /**
   * Attribute Layout Location in Shader
   */
  get attributeLocation() {
    return (0, _objectSpread2.default)({}, _CommonStyleAttribute.COMMON_ATTRIBUTE_LOCATION);
  }

  // style texture data mapping

  // 不支持数据映射的buffer

  // style texture data mapping

  constructor(layer) {
    (0, _defineProperty2.default)(this, "triangulation", void 0);
    (0, _defineProperty2.default)(this, "uniformBuffers", []);
    (0, _defineProperty2.default)(this, "textures", []);
    (0, _defineProperty2.default)(this, "createTexture2D", void 0);
    (0, _defineProperty2.default)(this, "preStyleAttribute", {});
    (0, _defineProperty2.default)(this, "encodeStyleAttribute", {});
    (0, _defineProperty2.default)(this, "layer", void 0);
    (0, _defineProperty2.default)(this, "dataTexture", void 0);
    // 用于数据传递的数据纹理
    (0, _defineProperty2.default)(this, "DATA_TEXTURE_WIDTH", void 0);
    // 默认有多少列（宽度）
    (0, _defineProperty2.default)(this, "dataTextureTest", void 0);
    (0, _defineProperty2.default)(this, "configService", void 0);
    (0, _defineProperty2.default)(this, "shaderModuleService", void 0);
    (0, _defineProperty2.default)(this, "rendererService", void 0);
    (0, _defineProperty2.default)(this, "iconService", void 0);
    (0, _defineProperty2.default)(this, "fontService", void 0);
    (0, _defineProperty2.default)(this, "styleAttributeService", void 0);
    (0, _defineProperty2.default)(this, "mapService", void 0);
    (0, _defineProperty2.default)(this, "cameraService", void 0);
    (0, _defineProperty2.default)(this, "layerService", void 0);
    (0, _defineProperty2.default)(this, "pickingService", void 0);
    (0, _defineProperty2.default)(this, "attributeUnifoms", void 0);
    // 支持数据映射的buffer
    (0, _defineProperty2.default)(this, "commonUnifoms", void 0);
    this.layer = layer;
    this.configService = layer.getContainer().globalConfigService;
    this.rendererService = layer.getContainer().rendererService;
    this.pickingService = layer.getContainer().pickingService;
    this.shaderModuleService = layer.getContainer().shaderModuleService;
    this.styleAttributeService = layer.getContainer().styleAttributeService;
    this.mapService = layer.getContainer().mapService;
    this.iconService = layer.getContainer().iconService;
    this.fontService = layer.getContainer().fontService;
    this.cameraService = layer.getContainer().cameraService;
    this.layerService = layer.getContainer().layerService;
    // 初始化支持数据映射的 Style 属性

    this.registerStyleAttribute();
    // 注册 Attribute
    this.registerBuiltinAttributes();
    // 开启动画
    this.startModelAnimate();
    const {
      createTexture2D
    } = this.rendererService;
    this.createTexture2D = createTexture2D;
  }

  // style datatexture mapping

  getBlend() {
    const {
      blend = 'normal'
    } = this.layer.getLayerConfig();
    return _blend.BlendTypes[_l7Core.BlendType[blend]];
  }
  getStencil(option) {
    const {
      mask = false,
      maskInside = true,
      enableMask,
      maskOperation = _l7Core.MaskOperation.AND
    } = this.layer.getLayerConfig();
    // TODO 临时处理，后期移除MaskLayer
    if (this.layer.type === 'MaskLayer') {
      return (0, _stencil.getStencilMask)({
        isStencil: true,
        stencilType: _l7Core.StencilType.SINGLE
      }); // 用于遮罩的stencil 参数
    }
    if (option.isStencil) {
      return (0, _stencil.getStencilMask)((0, _objectSpread2.default)((0, _objectSpread2.default)({}, option), {}, {
        maskOperation
      })); // 用于遮罩的stencil 参数
    }
    const maskflag = mask ||
    //  mask 兼容历史写法
    enableMask && this.layer.masks.length !== 0 ||
    // 外部图层的mask
    this.layer.tileMask !== undefined; // 瓦片图层
    // !!(mask || enableMask || this.layer.tileMask);
    return (0, _stencil.getStencil)(maskflag, maskInside);
  }
  getDefaultStyle() {
    return {};
  }
  // public getUninforms(): IModelUniform {
  //   throw new Error('Method not implemented.');
  // }
  getUninforms() {
    const commoninfo = this.getCommonUniformsInfo();
    const attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());
    this.updateStyleUnifoms();
    const result = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, attributeInfo.uniformsOption), commoninfo.uniformsOption);
    // 兼容 Regl Boolean 类型
    Object.keys(result).forEach(key => {
      if (typeof result[key] === 'boolean') {
        result[key] = result[key] ? 1 : 0;
      }
    });
    //如果是regl渲染 需要在uniform中带上u_texture 暂时用this.rendererService.device判断
    if (!this.rendererService.hasOwnProperty('device') && this.textures && this.textures.length === 1) {
      result['u_texture'] = this.textures[0];
    }
    return result;
  }
  getAnimateUniforms() {
    return {};
  }
  needUpdate() {
    return (0, _asyncToGenerator2.default)(function* () {
      return false;
    })();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  buildModels() {
    return (0, _asyncToGenerator2.default)(function* () {
      throw new Error('Method not implemented.');
    })();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  initModels() {
    return (0, _asyncToGenerator2.default)(function* () {
      throw new Error('Method not implemented.');
    })();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  clearModels(refresh = true) {
    return;
  }
  getAttribute() {
    throw new Error('Method not implemented.');
  }
  prerender() {}
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(renderOptions) {
    throw new Error('Method not implemented.');
  }
  registerBuiltinAttributes() {
    throw new Error('Method not implemented.');
  }
  animateOption2Array(option) {
    return [option.enable ? 0 : 1.0, option.duration || 4.0, option.interval || 0.2, option.trailLength || 0.1];
  }
  startModelAnimate() {
    const {
      animateOption
    } = this.layer.getLayerConfig();
    if (animateOption.enable) {
      this.layer.setAnimateStartTime();
    }
  }
  getInject() {
    const shaderInject = getDynamicStyleInject(this.layer.enableShaderEncodeStyles, this.layer.encodeStyleAttribute);
    return shaderInject;
  }
  getDefines() {
    // define atribute Layout Location
    const atributeLocationDefines = Object.keys(this.attributeLocation).reduce((result, key) => {
      const normalizedKey = DEFINE_ATTRIBUTE_LOCATION_PREFIX + key;
      result[normalizedKey] = this.attributeLocation[key];
      return result;
    }, {});
    return (0, _objectSpread2.default)({}, atributeLocationDefines);
  }

  // 获取数据映射样式
  getStyleAttribute() {
    const options = {};
    // TODO: 优化
    this.layer.enableShaderEncodeStyles.forEach(key => {
      if (!this.layer.encodeStyleAttribute[key]) {
        // 没有设置样式映射
        // @ts-ignore
        const keyValue = this.layer.getLayerConfig()[key];
        let value = typeof keyValue === 'undefined' ? _constant.DefaultUniformStyleValue[key] : keyValue;
        if (key === 'stroke') {
          value = (0, _l7Utils.rgb2arr)(value);
        }
        options['u_' + key] = value;
      }
    });
    return options;
  }

  // 注册数据映射样式
  registerStyleAttribute() {
    Object.keys(this.layer.encodeStyleAttribute).forEach(key => {
      const options = (0, _CommonStyleAttribute.getCommonStyleAttributeOptions)(key);
      if (options) {
        this.styleAttributeService.registerStyleAttribute(options);
      }
    });
  }

  /**
   * 注册 Position 属性 64 位地位部分，当经纬度数据开启双精度浮点数使用，
   * 避免大于 20层级以上出现数据偏移
   */
  registerPosition64LowAttribute(enable64bitPosition = true) {
    // save low part for enabled double precision POSITION attribute
    this.styleAttributeService.registerStyleAttribute({
      name: 'position64Low',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Position64Low',
        shaderLocation: this.attributeLocation.POSITION_64LOW,
        buffer: {
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 2,
        update: (feature, featureIdx, vertex) => {
          return enable64bitPosition ? [(0, _l7Utils.fp64LowPart)(vertex[0]), (0, _l7Utils.fp64LowPart)(vertex[1])] : [0, 0];
        }
      }
    });
  }
  updateEncodeAttribute(type, flag) {
    this.encodeStyleAttribute[type] = flag;
  }
  initUniformsBuffer() {
    const attrUniforms = this.getUniformsBufferInfo(this.getStyleAttribute());
    const commonUniforms = this.getCommonUniformsInfo();
    if (attrUniforms.uniformsLength !== 0) {
      this.attributeUnifoms = this.rendererService.createBuffer({
        data: new Float32Array((0, _utils.MultipleOfFourNumber)(attrUniforms.uniformsLength)).fill(0),
        // 长度需要大于等于 4
        isUBO: true,
        label: 'layerModelAttributeUnifoms'
      });
      this.uniformBuffers.push(this.attributeUnifoms);
    }
    if (commonUniforms.uniformsLength !== 0) {
      this.commonUnifoms = this.rendererService.createBuffer({
        data: new Float32Array((0, _utils.MultipleOfFourNumber)(commonUniforms.uniformsLength)).fill(0),
        isUBO: true,
        label: 'layerModelCommonUnifoms'
      });
      this.uniformBuffers.push(this.commonUnifoms);
    }
  }
  // 获取数据映射 uniform 信息
  getUniformsBufferInfo(uniformsOption) {
    let uniformsLength = 0;
    const uniformsArray = [];
    Object.values(uniformsOption).forEach(value => {
      if (Array.isArray(value)) {
        uniformsArray.push(...value);
        uniformsLength += value.length;
      } else if (typeof value === 'number') {
        // 排除纹理
        uniformsArray.push(value);
        uniformsLength += 1;
      } else if (typeof value === 'boolean') {
        uniformsArray.push(Number(value));
        uniformsLength += 1;
      }
    });
    return {
      uniformsOption,
      uniformsLength,
      uniformsArray
    };
  }
  getCommonUniformsInfo() {
    return {
      uniformsLength: 0,
      uniformsArray: [],
      uniformsOption: {}
    };
  }

  // 更新支持数据映射的uniform
  updateStyleUnifoms() {
    var _this$attributeUnifom, _this$commonUnifoms;
    const {
      uniformsArray
    } = this.getUniformsBufferInfo(this.getStyleAttribute());
    const {
      uniformsArray: commonUniformsArray
    } = this.getCommonUniformsInfo();
    (_this$attributeUnifom = this.attributeUnifoms) === null || _this$attributeUnifom === void 0 || _this$attributeUnifom.subData({
      offset: 0,
      data: new Uint8Array(new Float32Array(uniformsArray).buffer)
    });
    (_this$commonUnifoms = this.commonUnifoms) === null || _this$commonUnifoms === void 0 || _this$commonUnifoms.subData({
      offset: 0,
      data: new Uint8Array(new Float32Array(commonUniformsArray).buffer)
    });
  }
}

/**
 * 获取动态注入参与数据映射 uniform/attribute
 */
exports.default = BaseModel;
function getDynamicStyleInject(shaderEncodeStyles, styleAttribute) {
  const uniforms = [];
  let vsDeclInjection = '';

  // 支持数据映射的类型
  shaderEncodeStyles.forEach(key => {
    const upperCaseKey = key.replace(/([a-z])([A-Z])/g, '$1_$2').toUpperCase();
    const shaderDefineName = DEFINE_ATTRIBUTE_LOCATION_PREFIX + upperCaseKey;
    if (styleAttribute[key]) {
      // 配置了数据映射的类型
      vsDeclInjection += `#define USE_ATTRIBUTE_${upperCaseKey} 0.0 \n`;
    } else {
      uniforms.push(`  ${_constant.DefaultUniformStyleType[key]} u_${key};`);
    }
    vsDeclInjection += `
#ifdef USE_ATTRIBUTE_${upperCaseKey}
layout(location = ${shaderDefineName}) in ${_constant.DefaultUniformStyleType[key]} a_${key.charAt(0).toUpperCase() + key.slice(1)};
#endif \n`;
  });
  const fsDeclInjection = uniforms.length ? `
layout(std140) uniform AttributeUniforms {
  ${uniforms.join('\n')}
};\n` : '';
  vsDeclInjection += fsDeclInjection;
  let vsMainInjection = '';
  shaderEncodeStyles.forEach(key => {
    const upperCaseKey = key.replace(/([a-z])([A-Z])/g, '$1_$2').toUpperCase();
    vsMainInjection += `
  #ifdef USE_ATTRIBUTE_${upperCaseKey}
    ${_constant.DefaultUniformStyleType[key]} ${key} = a_${key.charAt(0).toUpperCase() + key.slice(1)};
  #else
    ${_constant.DefaultUniformStyleType[key]} ${key} = u_${key};
  #endif
  `;
  });
  return {
    'vs:#decl': vsDeclInjection,
    'fs:#decl': fsDeclInjection,
    'vs:#main-start': vsMainInjection
  };
}