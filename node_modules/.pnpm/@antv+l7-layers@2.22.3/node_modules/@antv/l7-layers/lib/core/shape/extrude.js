"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extrudePolygon;
exports.extrude_PolygonNormal = extrude_PolygonNormal;
exports.fillPolygon = fillPolygon;
var _l7Utils = require("@antv/l7-utils");
var _earcut = _interopRequireDefault(require("earcut"));
var _glMatrix = require("gl-matrix");
var _utils = require("../utils");
/**
 * 拉伸多边形顶点，返回拉伸后的顶点信息
 * @param paths 路径数据组
 * @param extrude 是否拉伸
 */
function extrudePolygon(path) {
  const p1 = path[0][0];
  const p2 = path[0][path[0].length - 1];
  if (p1[0] === p2[0] && p1[1] === p2[1]) {
    path[0] = path[0].slice(0, path[0].length - 1);
  }
  const n = path[0].length;
  const flattengeo = _earcut.default.flatten(path);
  const {
    vertices,
    dimensions
  } = flattengeo;
  const positions = [];
  const indexArray = [];
  // 设置顶部z值
  for (let j = 0; j < vertices.length / dimensions; j++) {
    if (dimensions === 2) {
      positions.push(vertices[j * 2], vertices[j * 2 + 1], 1);
    } else {
      positions.push(vertices[j * 3], vertices[j * 3 + 1], 1);
    }
  }
  const triangles = (0, _earcut.default)(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  indexArray.push(...triangles);
  for (let i = 0; i < n; i++) {
    const prePoint = flattengeo.vertices.slice(i * dimensions, (i + 1) * dimensions);
    let nextPoint = flattengeo.vertices.slice((i + 1) * dimensions, (i + 2) * dimensions);
    if (nextPoint.length === 0) {
      nextPoint = flattengeo.vertices.slice(0, dimensions);
    }
    const indexOffset = positions.length / 3;
    positions.push(prePoint[0], prePoint[1], 1, nextPoint[0], nextPoint[1], 1, prePoint[0], prePoint[1], 0, nextPoint[0], nextPoint[1], 0);
    indexArray.push(...[0, 2, 1, 2, 3, 1].map(v => v + indexOffset));
  }
  return {
    positions,
    index: indexArray
  };
}
function fillPolygon(points) {
  const flattengeo = _earcut.default.flatten(points);
  const triangles = (0, _earcut.default)(flattengeo.vertices, flattengeo.holes, flattengeo.dimensions);
  return {
    positions: flattengeo.vertices,
    index: triangles
  };
}
function extrude_PolygonNormal(path, needFlat = false // 是否需要转成平面坐标
) {
  const p1 = path[0][0];
  const p2 = path[0][path[0].length - 1];
  if (p1[0] === p2[0] && p1[1] === p2[1]) {
    path[0] = path[0].slice(0, path[0].length - 1);
  }
  const n = path[0].length;
  const flattengeo = _earcut.default.flatten(path);
  const {
    vertices,
    dimensions,
    holes
  } = flattengeo;
  const positions = [];
  const indexArray = [];
  const normals = [];
  // 设置顶部z值 position uv
  for (let j = 0; j < vertices.length / dimensions; j++) {
    positions.push(vertices[j * dimensions],
    // x
    vertices[j * dimensions + 1],
    // y
    1,
    // z
    -1,
    // 顶部uv
    -1 // 顶部uv
    );
    normals.push(0, 0, 1);
  }
  const indices = (0, _utils.getPolygonSurfaceIndices)(vertices, holes, dimensions, needFlat);
  indexArray.push(...indices);

  // 设置侧面
  for (let i = 0; i < n; i++) {
    const prePoint = flattengeo.vertices.slice(i * dimensions, (i + 1) * dimensions);
    let nextPoint = flattengeo.vertices.slice((i + 1) * dimensions, (i + 2) * dimensions);
    if (nextPoint.length === 0) {
      nextPoint = flattengeo.vertices.slice(0, dimensions);
    }
    const indexOffset = positions.length / 5;
    // 侧面四顶点
    positions.push(prePoint[0], prePoint[1], 1, 0, 0, nextPoint[0], nextPoint[1], 1, 0.1,
    // 侧面 低uv
    0,
    // 侧面低 uv
    prePoint[0], prePoint[1], 0, 0, 0.8, nextPoint[0], nextPoint[1], 0, 0.1, 0.8);
    const normal = computeVertexNormals([nextPoint[0], nextPoint[1], 1], [prePoint[0], prePoint[1], 0], [prePoint[0], prePoint[1], 1], needFlat);
    normals.push(...normal, ...normal, ...normal, ...normal);
    indexArray.push(...[1, 2, 0, 3, 2, 1].map(v => v + indexOffset));
  }
  return {
    positions,
    index: indexArray,
    normals
  };
}
function computeVertexNormals(p1, p2, p3, needFlat = false) {
  const cb = _glMatrix.vec3.create();
  const ab = _glMatrix.vec3.create();
  const normal = _glMatrix.vec3.create();
  if (needFlat) {
    p1 = (0, _l7Utils.lngLatToMeters)(p1);
    p2 = (0, _l7Utils.lngLatToMeters)(p2);
    p3 = (0, _l7Utils.lngLatToMeters)(p3);
  }
  const pA = _glMatrix.vec3.fromValues(...p1);
  const pB = _glMatrix.vec3.fromValues(...p2);
  const pC = _glMatrix.vec3.fromValues(...p3);
  _glMatrix.vec3.sub(cb, pC, pB);
  _glMatrix.vec3.sub(ab, pA, pB);
  _glMatrix.vec3.cross(normal, cb, ab);
  const newNormal = _glMatrix.vec3.create();
  _glMatrix.vec3.normalize(newNormal, normal);
  return newNormal;
}