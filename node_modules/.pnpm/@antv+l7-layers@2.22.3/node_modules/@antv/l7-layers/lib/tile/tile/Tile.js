"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _eventemitter = require("eventemitter3");
var _polygon = _interopRequireDefault(require("../../polygon"));
var _util = require("./util");
class Tile extends _eventemitter.EventEmitter {
  constructor(sourceTile, parent) {
    super();
    (0, _defineProperty2.default)(this, "x", void 0);
    (0, _defineProperty2.default)(this, "y", void 0);
    (0, _defineProperty2.default)(this, "z", void 0);
    (0, _defineProperty2.default)(this, "key", void 0);
    (0, _defineProperty2.default)(this, "parent", void 0);
    (0, _defineProperty2.default)(this, "sourceTile", void 0);
    (0, _defineProperty2.default)(this, "visible", true);
    (0, _defineProperty2.default)(this, "layers", []);
    (0, _defineProperty2.default)(this, "isLoaded", false);
    (0, _defineProperty2.default)(this, "tileMaskLayers", []);
    (0, _defineProperty2.default)(this, "tileMask", void 0);
    this.parent = parent;
    this.sourceTile = sourceTile;
    this.x = sourceTile.x;
    this.y = sourceTile.y;
    this.z = sourceTile.z;
    this.key = `${this.x}_${this.y}_${this.z}`;
  }
  getLayers() {
    return this.layers;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  styleUpdate(...arg) {
    return;
  }
  lnglatInBounds(lnglat) {
    const [minLng, minLat, maxLng, maxLat] = this.sourceTile.bounds;
    const {
      lng,
      lat
    } = lnglat;
    return lng >= minLng && lng <= maxLng && lat >= minLat && lat <= maxLat;
  }
  getLayerOptions() {
    var _options$maskLayers;
    const options = this.parent.getLayerConfig();
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, options), {}, {
      textAllowOverlap: true,
      // 文本允许重叠
      autoFit: false,
      maskLayers: this.getMaskLayer(),
      tileMask: (0, _util.isNeedMask)(this.parent.type),
      mask: options.mask || ((_options$maskLayers = options.maskLayers) === null || _options$maskLayers === void 0 ? void 0 : _options$maskLayers.length) !== 0 && options.enableMask
    });
  }
  // 获取Mask 图层
  getMaskLayer() {
    const {
      maskLayers
    } = this.parent.getLayerConfig();
    const layers = [];
    maskLayers === null || maskLayers === void 0 || maskLayers.forEach(layer => {
      if (!layer.tileLayer) {
        // 非瓦片图层返回图层本身，瓦片图层返回对应的行列号图层
        layers.push(layer);
        return layer;
      }
      const tileLayer = layer.tileLayer;
      const tile = tileLayer.getTile(this.sourceTile.key);
      const l = tile === null || tile === void 0 ? void 0 : tile.getLayers()[0];
      if (l) {
        layers.push(l);
      }
    });
    return layers;
  }
  addTileMask() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const mask = new _polygon.default({
        name: 'mask',
        visible: true,
        enablePicking: false
      }).source({
        type: 'FeatureCollection',
        features: [_this.sourceTile.bboxPolygon]
      }, {
        parser: {
          type: 'geojson',
          featureId: 'id'
        }
      }).shape('fill').color('#0f0').style({
        opacity: 0.5
      });
      const container = (0, _l7Core.createLayerContainer)(_this.parent.container);
      mask.setContainer(container);
      yield mask.init();
      _this.tileMask = mask;
      const mainLayer = _this.getMainLayer();
      if (mainLayer !== undefined) {
        mainLayer.tileMask = mask;
      }
      return mask;
    })();
  }
  // 全局 Mask
  addMask(layer, mask) {
    var _this2 = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const container = (0, _l7Core.createLayerContainer)(_this2.parent.container);
      mask.setContainer(container);
      yield mask.init();
      layer.addMask(mask);
      _this2.tileMaskLayers.push(mask);
    })();
  }
  addLayer(layer) {
    var _this3 = this;
    return (0, _asyncToGenerator2.default)(function* () {
      // set flag
      layer.isTileLayer = true;
      const container = (0, _l7Core.createLayerContainer)(_this3.parent.container);
      layer.setContainer(container);
      _this3.layers.push(layer);
      yield layer.init();
    })();
  }
  updateVisible(value) {
    this.visible = value;
    this.updateOptions('visible', value);
  }
  updateOptions(key, value) {
    this.layers.forEach(l => {
      l.updateLayerConfig({
        [key]: value
      });
    });
  }

  /**
   * 一个 Tile 可能有多个 layer，但是在发生拾取、点击事件的时候只有一个生效
   */
  getMainLayer() {
    return this.layers[0];
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getFeatures(sourceLayer) {
    return [];
  }

  /**
   * 在一个 Tile 中可能存在一个相同 ID 的 feature
   * @param id
   * @returns
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getFeatureById(id) {
    return [];
  }
  destroy() {
    var _this$tileMask;
    (_this$tileMask = this.tileMask) === null || _this$tileMask === void 0 || _this$tileMask.destroy();
    this.layers.forEach(layer => layer.destroy());
  }
}
exports.default = Tile;