"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TilePickService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _TileSourceService = require("./TileSourceService");
const SELECT = 'select';
const ACTIVE = 'active';
class TilePickService {
  constructor({
    layerService,
    tileLayerService,
    parent
  }) {
    (0, _defineProperty2.default)(this, "layerService", void 0);
    (0, _defineProperty2.default)(this, "tileLayerService", void 0);
    (0, _defineProperty2.default)(this, "tileSourceService", void 0);
    (0, _defineProperty2.default)(this, "parent", void 0);
    (0, _defineProperty2.default)(this, "tilePickID", new Map());
    this.layerService = layerService;
    this.tileLayerService = tileLayerService;
    this.parent = parent;
    this.tileSourceService = new _TileSourceService.TileSourceService();
  }
  pickRender(target) {
    // 一个 TileLayer 有多个 Tile，但是会同时触发事件的只有一个 Tile
    const tile = this.tileLayerService.getVisibleTileBylngLat(target.lngLat);
    if (tile) {
      // TODO 多图层拾取
      const pickLayer = tile.getMainLayer();
      pickLayer === null || pickLayer === void 0 || pickLayer.layerPickService.pickRender(target);
    }
  }
  pick(layer, target) {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const container = _this.parent.getContainer();
      const pickingService = container.pickingService;
      if (layer.type === 'RasterLayer') {
        const tile = _this.tileLayerService.getVisibleTileBylngLat(target.lngLat);
        if (tile && tile.getMainLayer() !== undefined) {
          const pickLayer = tile.getMainLayer();
          return pickLayer.layerPickService.pickRasterLayer(pickLayer, target, _this.parent);
        }
        return false;
      }
      _this.pickRender(target);
      return pickingService.pickFromPickingFBO(layer, target);
    })();
  }
  selectFeature(pickedColors) {
    // @ts-ignore
    const [r, g, b] = pickedColors;
    const id = this.color2PickId(r, g, b);
    this.tilePickID.set(SELECT, id);
    this.updateHighLight(r, g, b, SELECT);
  }
  highlightPickedFeature(pickedColors) {
    // @ts-ignore
    const [r, g, b] = pickedColors;
    const id = this.color2PickId(r, g, b);
    this.tilePickID.set(ACTIVE, id);
    this.updateHighLight(r, g, b, ACTIVE);
  }
  updateHighLight(r, g, b, type) {
    this.tileLayerService.tiles.map(tile => {
      const layer = tile.getMainLayer();
      switch (type) {
        case SELECT:
          layer === null || layer === void 0 || layer.hooks.beforeSelect.call([r, g, b]);
          break;
        case ACTIVE:
          layer === null || layer === void 0 || layer.hooks.beforeHighlight.call([r, g, b]);
          break;
      }
    });
  }
  setPickState() {
    const selectColor = this.tilePickID.get(SELECT);
    const activeColor = this.tilePickID.get(ACTIVE);
    if (selectColor) {
      const [r, g, b] = this.pickId2Color(selectColor);
      this.updateHighLight(r, g, b, SELECT);
      return;
    }
    if (activeColor) {
      const [r, g, b] = this.pickId2Color(activeColor);
      this.updateHighLight(r, g, b, ACTIVE);
      return;
    }
  }
  color2PickId(r, g, b) {
    return (0, _l7Utils.decodePickingColor)(new Uint8Array([r, g, b]));
  }
  pickId2Color(str) {
    return (0, _l7Utils.encodePickingColor)(str);
  }

  /** 从瓦片中根据数据 */
  getFeatureById(pickedFeatureIdx) {
    // 提取当前可见瓦片
    const tiles = this.tileLayerService.getTiles().filter(tile => tile.visible);
    // 提取当前可见瓦片中匹配 ID 的 feature 列表
    const features = [];
    tiles.forEach(tile => {
      features.push(...tile.getFeatureById(pickedFeatureIdx));
    });

    // 将 feature 列表合并后返回
    // 统一返回成 polygon 的格式 点、线、面可以通用

    // const data = this.tileSourceService.getCombineFeature(features);

    return features;
  }

  // Tip: for interface define
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  pickRasterLayer() {
    return false;
  }
}
exports.TilePickService = TilePickService;