"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TileLayerService = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
class TileLayerService {
  constructor({
    rendererService,
    layerService,
    parent
  }) {
    /**
     * tileResource 用于存储瓦片的全局资源
     */
    (0, _defineProperty2.default)(this, "tileResource", new Map());
    (0, _defineProperty2.default)(this, "rendererService", void 0);
    (0, _defineProperty2.default)(this, "layerService", void 0);
    (0, _defineProperty2.default)(this, "parent", void 0);
    (0, _defineProperty2.default)(this, "layerTiles", []);
    this.rendererService = rendererService;
    this.layerService = layerService;
    this.parent = parent;
  }
  get tiles() {
    return this.layerTiles;
  }
  hasTile(tileKey) {
    return this.layerTiles.some(tile => tile.key === tileKey);
  }
  addTile(tile) {
    this.layerTiles.push(tile);
  }
  getTile(tileKey) {
    return this.layerTiles.find(tile => tile.key === tileKey);
  }
  getVisibleTileBylngLat(lngLat) {
    // 加载完成 & 可见 & 鼠标选中
    return this.layerTiles.find(tile => tile.isLoaded && tile.visible && tile.lnglatInBounds(lngLat));
  }
  removeTile(tileKey) {
    const index = this.layerTiles.findIndex(t => t.key === tileKey);
    const tile = this.layerTiles.splice(index, 1);
    if (tile[0]) {
      tile[0].destroy();
    }
  }
  updateTileVisible(sourceTile) {
    const tile = this.getTile(sourceTile.key);
    if (sourceTile.isVisible) {
      // 不可见 => 可见 兄弟节点加载完成
      if (sourceTile.parent) {
        const flag = this.isChildrenLoaded(sourceTile.parent);
        tile === null || tile === void 0 || tile.updateVisible(flag);
      } else {
        tile === null || tile === void 0 || tile.updateVisible(true);
      }
    } else {
      // 可见 => 不可见 兄弟节点加载完成
      if (sourceTile.parent) {
        const flag = this.isChildrenLoaded(sourceTile.parent);
        tile === null || tile === void 0 || tile.updateVisible(!flag);
      } else {
        tile === null || tile === void 0 || tile.updateVisible(false);
      }
    }
  }
  isParentLoaded(sourceTile) {
    const parentTile = sourceTile.parent;
    if (!parentTile) {
      return true;
    }
    const tile = this.getTile(parentTile === null || parentTile === void 0 ? void 0 : parentTile.key);
    if (tile !== null && tile !== void 0 && tile.isLoaded) {
      // 递归父级
      return true;
    }
    return false;
  }
  isChildrenLoaded(sourceTile) {
    const childrenTile = sourceTile === null || sourceTile === void 0 ? void 0 : sourceTile.children;
    if (childrenTile.length === 0) {
      return true;
    }
    return childrenTile.every(tile => {
      const tileLayer = this.getTile(tile === null || tile === void 0 ? void 0 : tile.key);
      if (!tileLayer) {
        return true;
      }
      return (tileLayer === null || tileLayer === void 0 ? void 0 : tileLayer.isLoaded) === true;
    });
  }
  render() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const layers = _this.getRenderLayers();
      const renders = layers.map( /*#__PURE__*/function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (layer) {
          yield _this.layerService.renderTileLayer(layer);
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
      yield Promise.all(renders);
    })();
  }
  getRenderLayers() {
    const tileList = this.layerTiles.filter(t => t.visible && t.isLoaded);
    const layers = [];
    tileList.map(tile => layers.push(...tile.getLayers()));
    return layers;
  }
  getLayers() {
    const tileList = this.layerTiles.filter(t => t.isLoaded);
    const layers = [];
    tileList.map(tile => layers.push(...tile.getLayers()));
    return layers;
  }
  getTiles() {
    return this.layerTiles;
  }
  destroy() {
    this.layerTiles.forEach(t => t.destroy());
    this.tileResource.clear();
  }
}
exports.TileLayerService = TileLayerService;