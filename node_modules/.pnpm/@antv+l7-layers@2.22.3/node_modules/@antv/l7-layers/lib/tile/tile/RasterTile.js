"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _raster = _interopRequireDefault(require("../../raster"));
var _Tile = _interopRequireDefault(require("./Tile"));
const _excluded = ["rasterData"];
const DEFAULT_COLOR_TEXTURE_OPTION = {
  positions: [0, 1],
  colors: ['#000', '#fff']
};
class RasterTile extends _Tile.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "colorTexture", void 0);
  }
  initTileLayer() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const attributes = _this.parent.getLayerAttributeConfig();
      const layerOptions = _this.getLayerOptions();
      const sourceOptions = _this.getSourceOption();
      const {
        rampColors,
        domain
      } = _this.getLayerOptions();
      _this.colorTexture = _this.parent.textureService.getColorTexture(rampColors, domain);
      const layer = new _raster.default((0, _objectSpread2.default)((0, _objectSpread2.default)({}, layerOptions), {}, {
        colorTexture: _this.colorTexture
      })).source(sourceOptions.data, sourceOptions.options);

      // 初始化数据映射
      // tslint:disable-next-line: no-unused-expression
      attributes && Object.keys(attributes).forEach(type => {
        var _attributes$attr, _attributes$attr2;
        const attr = type;
        // @ts-ignore
        layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);
      });
      yield _this.addLayer(layer);
      _this.isLoaded = true;
    })();
  }
  getSourceOption() {
    const rawSource = this.parent.getSource();
    const _this$sourceTile$data = this.sourceTile.data.data,
      {
        rasterData
      } = _this$sourceTile$data,
      res = (0, _objectWithoutProperties2.default)(_this$sourceTile$data, _excluded);
    return {
      data: rasterData,
      options: {
        parser: (0, _objectSpread2.default)({
          type: 'raster',
          extent: this.sourceTile.bounds
        }, res),
        transforms: rawSource.transforms
      }
    };
  }

  /**
   * 用于 style 更新 colorTexture 的优化
   * @param arg
   */
  styleUpdate(...arg) {
    const {
      rampColors = DEFAULT_COLOR_TEXTURE_OPTION,
      domain
    } = arg;
    this.colorTexture = this.parent.textureService.getColorTexture(rampColors, domain || (0, _l7Utils.getDefaultDomain)(rampColors));
    this.layers.forEach(layer => layer.style({
      colorTexture: this.colorTexture
    }));
  }
  destroy() {
    this.layers.forEach(layer => layer.destroy());
  }
}
exports.default = RasterTile;