"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _BaseModel = _interopRequireDefault(require("../../core/BaseModel"));
var _triangulation = require("../../core/triangulation");
var _utils = require("../../earth/utils");
/* babel-plugin-inline-import '../shaders/earthExtrude/earthExtrude_frag.glsl' */
const pointExtrudeFrag = "precision highp float;\nin vec4 v_color;\n\n#pragma include \"picking\"\n\nlayout(std140) uniform commonUniform {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor: 0;\n  float u_heightfixed: 0.0; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_globel;\n  float u_r;\n  float u_pickLight: 0.0;\n  float u_opacitylinear: 0.0;\n  float u_opacitylinear_dir: 1.0;\n  float u_lightEnable: 1.0;\n};\nin float v_lightWeight;\nin float v_barLinearZ;\nout vec4 outputColor;\nvoid main() {\n\n   outputColor = v_color;\n\n  // \u5F00\u542F\u900F\u660E\u5EA6\u6E10\u53D8\n  if(u_opacitylinear > 0.0) {\n    outputColor.a *= u_opacitylinear_dir > 0.0 ? (1.0 - v_barLinearZ): v_barLinearZ;\n  }\n\n  // picking\n  if(u_pickLight > 0.0) {\n    outputColor = filterColorAlpha(outputColor, v_lightWeight);\n  } else {\n    outputColor = filterColor(outputColor);\n  }\n}\n";
/* babel-plugin-inline-import '../shaders/earthExtrude/earthExtrude_vert.glsl' */
const pointExtrudeVert = "precision highp float;\n\n#define pi 3.1415926535\n#define ambientRatio 0.5\n#define diffuseRatio 0.3\n#define specularRatio 0.2\n\nlayout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in vec3 a_Size;\nlayout(location = ATTRIBUTE_LOCATION_POS) in vec3 a_Pos;\nlayout(location = ATTRIBUTE_LOCATION_NORMAL) in vec3 a_Normal;\n\nlayout(std140) uniform commonUniform {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor: 0;\n  float u_heightfixed: 0.0; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_globel;\n  float u_r;\n  float u_pickLight: 0.0;\n  float u_opacitylinear: 0.0;\n  float u_opacitylinear_dir: 1.0;\n  float u_lightEnable: 1.0;\n};\n\nout vec4 v_color;\nout float v_lightWeight;\nout float v_barLinearZ;\n// \u7528\u4E8E\u5C06\u5728\u9876\u70B9\u7740\u8272\u5668\u4E2D\u8BA1\u7B97\u597D\u7684\u6837\u5F0F\u503C\u4F20\u9012\u7ED9\u7247\u5143\n\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nfloat getYRadian(float x, float z) {\n  if(x > 0.0 && z > 0.0) {\n    return atan(x/z);\n  } else if(x > 0.0 && z <= 0.0){\n    return atan(-z/x) + pi/2.0;\n  } else if(x <= 0.0 && z <= 0.0) {\n    return  pi + atan(x/z); //atan(x/z) +\n  } else {\n    return atan(z/-x) + pi*3.0/2.0;\n  }\n}\n\nfloat getXRadian(float y, float r) {\n  return atan(y/r);\n}\n\nvoid main() {\n\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n  vec3 size = a_Size * a_Position;\n\n  // a_Position.z \u662F\u5728\u6784\u5EFA\u7F51\u683C\u7684\u65F6\u5019\u4F20\u5165\u7684\u6807\u51C6\u503C 0 - 1\uFF0C\u5728\u63D2\u503C\u5668\u63D2\u503C\u53EF\u4EE5\u83B7\u53D6 0\uFF5E1 \u7EBF\u6027\u6E10\u53D8\u7684\u503C\n  v_barLinearZ =  a_Position.z;\n\n  vec3 offset = size; // \u63A7\u5236\u5706\u67F1\u4F53\u7684\u5927\u5C0F - \u4ECE\u6807\u51C6\u5355\u4F4D\u5706\u67F1\u4F53\u8FDB\u884C\u504F\u79FB\n  if(u_heightfixed < 1.0) { // \u5706\u67F1\u4F53\u4E0D\u56FA\u5B9A\u9AD8\u5EA6\n    //\n  } else {// \u5706\u67F1\u4F53\u56FA\u5B9A\u9AD8\u5EA6 \uFF08 \u5904\u7406 mapbox \uFF09\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\n      offset *= 4.0/pow(2.0, 21.0 - u_Zoom);\n    }\n  }\n\n\n  vec4 project_pos = project_position(vec4(a_Pos.xy, 0., 1.0));\n\n  // u_r \u63A7\u5236\u5706\u67F1\u7684\u751F\u957F\n  vec4 pos = vec4(project_pos.xy + offset.xy, offset.z * u_r, 1.0);\n\n  // \u5706\u67F1\u5149\u7167\u6548\u679C\n  float lightWeight = 1.0;\n  if(u_lightEnable > 0.0) { // \u53D6\u6D88\u4E09\u5143\u8868\u8FBE\u5F0F\uFF0C\u589E\u5F3A\u5065\u58EE\u6027\n    lightWeight = calc_lighting(pos);\n  }\n  v_lightWeight = lightWeight;\n  // \u8BBE\u7F6E\u5706\u67F1\u7684\u5E95\u8272\n  if(u_linearColor == 1.0) { // \u4F7F\u7528\u6E10\u53D8\u989C\u8272\n    v_color = mix(u_sourceColor, u_targetColor, v_barLinearZ);\n    v_color.rgb *= lightWeight;\n  } else { // \u4F7F\u7528 color \u65B9\u6CD5\u4F20\u5165\u7684\u989C\u8272\n     v_color = a_Color;\n  }\n  v_color.a *= u_opacity;\n\n\n  // \u5728\u5730\u7403\u6A21\u5F0F\u4E0B\uFF0C\u5C06\u539F\u672C\u5782\u76F4\u4E8E xy \u5E73\u9762\u7684\u5706\u67F1\u8C03\u6574\u59FF\u6001\u5230\u9002\u5E94\u5706\u7684\u89D2\u5EA6\n  //\u65CB\u8F6C\u77E9\u9635mx\uFF0C\u521B\u5EFA\u7ED5x\u8F74\u65CB\u8F6C\u77E9\u9635\n  float r = sqrt(a_Pos.z*a_Pos.z + a_Pos.x*a_Pos.x);\n  float xRadian = getXRadian(a_Pos.y, r);\n  float xcos = cos(xRadian);//\u6C42\u89E3\u65CB\u8F6C\u89D2\u5EA6\u4F59\u5F26\u503C\n  float xsin = sin(xRadian);//\u6C42\u89E3\u65CB\u8F6C\u89D2\u5EA6\u6B63\u5F26\u503C\n  mat4 mx = mat4(\n    1,0,0,0,\n    0,xcos,-xsin,0,\n    0,xsin,xcos,0,\n    0,0,0,1);\n\n  //\u65CB\u8F6C\u77E9\u9635my\uFF0C\u521B\u5EFA\u7ED5y\u8F74\u65CB\u8F6C\u77E9\u9635\n  float yRadian = getYRadian(a_Pos.x, a_Pos.z);\n  float ycos = cos(yRadian);//\u6C42\u89E3\u65CB\u8F6C\u89D2\u5EA6\u4F59\u5F26\u503C\n  float ysin = sin(yRadian);//\u6C42\u89E3\u65CB\u8F6C\u89D2\u5EA6\u6B63\u5F26\u503C\n  mat4 my = mat4(\n    ycos,0,-ysin,0,\n    0,1,0,0,\n    ysin,0,ycos,0,\n    0,0,0,1);\n\n  gl_Position = u_ViewProjectionMatrix * vec4(( my * mx *  vec4(a_Position * a_Size, 1.0)).xyz + a_Pos, 1.0);\n\n\n  setPickingColor(a_PickingColor);\n}\n";
const {
  isNumber
} = _l7Utils.lodashUtil;
class ExtrudeModel extends _BaseModel.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "raiseCount", 0);
    (0, _defineProperty2.default)(this, "raiseRepeat", 0);
  }
  get attributeLocation() {
    return Object.assign(super.attributeLocation, {
      MAX: super.attributeLocation.MAX,
      SIZE: 9,
      POS: 10,
      NORMAL: 11
    });
  }
  getCommonUniformsInfo() {
    const {
      animateOption = {
        enable: false,
        speed: 0.01,
        repeat: false
      },
      opacity = 1,
      sourceColor,
      targetColor,
      pickLight = false,
      heightfixed = true,
      opacityLinear = {
        enable: false,
        dir: 'up'
      },
      lightEnable = true
    } = this.layer.getLayerConfig();

    // 转化渐变色
    let useLinearColor = 0; // 默认不生效
    let sourceColorArr = [0, 0, 0, 0];
    let targetColorArr = [0, 0, 0, 0];
    if (sourceColor && targetColor) {
      sourceColorArr = (0, _l7Utils.rgb2arr)(sourceColor);
      targetColorArr = (0, _l7Utils.rgb2arr)(targetColor);
      useLinearColor = 1;
    }
    if (this.raiseCount < 1 && this.raiseRepeat > 0) {
      if (animateOption.enable) {
        const {
          speed = 0.01
        } = animateOption;
        this.raiseCount += speed;
        if (this.raiseCount >= 1) {
          if (this.raiseRepeat > 1) {
            this.raiseCount = 0;
            this.raiseRepeat--;
          } else {
            this.raiseCount = 1;
          }
        }
      }
    }
    const commonOptions = {
      u_sourceColor: sourceColorArr,
      u_targetColor: targetColorArr,
      // 渐变色支持参数
      u_linearColor: useLinearColor,
      // 圆柱体的拾取高亮是否要计算光照
      u_pickLight: Number(pickLight),
      // 圆柱体是否固定高度
      u_heightfixed: Number(heightfixed),
      u_r: animateOption.enable && this.raiseRepeat > 0 ? this.raiseCount : 1.0,
      u_opacity: isNumber(opacity) ? opacity : 1.0,
      // 透明度渐变
      u_opacitylinear: Number(opacityLinear.enable),
      u_opacitylinear_dir: opacityLinear.dir === 'up' ? 1.0 : 0.0,
      // 光照计算开关
      u_lightEnable: Number(lightEnable)
    };
    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
    return commonBufferInfo;
  }
  initModels() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      _this.initUniformsBuffer();
      return _this.buildModels();
    })();
  }
  buildModels() {
    var _this2 = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const {
        animateOption: {
          repeat = 1
        }
      } = _this2.layer.getLayerConfig();
      _this2.raiseRepeat = repeat;
      const model = yield _this2.layer.buildLayerModel({
        moduleName: 'pointEarthExtrude',
        vertexShader: pointExtrudeVert,
        fragmentShader: pointExtrudeFrag,
        triangulation: _triangulation.PointExtrudeTriangulation,
        depth: {
          enable: true
        },
        defines: _this2.getDefines(),
        inject: _this2.getInject(),
        cull: {
          enable: true,
          face: _l7Core.gl.FRONT
        },
        blend: _this2.getBlend()
      });
      return [model];
    })();
  }
  registerBuiltinAttributes() {
    this.styleAttributeService.registerStyleAttribute({
      name: 'size',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Size',
        shaderLocation: this.attributeLocation.SIZE,
        buffer: {
          usage: _l7Core.gl.DYNAMIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 3,
        update: feature => {
          const {
            size
          } = feature;
          if (size) {
            let buffersize = [];
            if (Array.isArray(size)) {
              buffersize = size.length === 2 ? [size[0], size[0], size[1]] : size;
            }
            if (!Array.isArray(size)) {
              buffersize = [size, size, size];
            }
            return buffersize;
          } else {
            return [2, 2, 2];
          }
        }
      }
    });

    // point layer size;
    this.styleAttributeService.registerStyleAttribute({
      name: 'normal',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Normal',
        shaderLocation: this.attributeLocation.NORMAL,
        buffer: {
          // give the WebGL driver a hint that this buffer may change
          usage: _l7Core.gl.STATIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 3,
        update: (feature, featureIdx, vertex, attributeIdx, normal) => {
          return normal;
        }
      }
    });
    this.styleAttributeService.registerStyleAttribute({
      name: 'pos',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Pos',
        shaderLocation: this.attributeLocation.POS,
        buffer: {
          usage: _l7Core.gl.DYNAMIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 3,
        update: feature => {
          const coordinates = (0, _l7Utils.calculateCentroid)(feature.coordinates);
          return (0, _utils.lglt2xyz)([coordinates[0], coordinates[1]]);
        }
      }
    });
  }
}
exports.default = ExtrudeModel;