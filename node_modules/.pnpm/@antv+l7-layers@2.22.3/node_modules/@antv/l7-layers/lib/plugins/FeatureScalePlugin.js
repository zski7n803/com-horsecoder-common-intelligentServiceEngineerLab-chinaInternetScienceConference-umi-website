"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _d3Array = require("d3-array");
var d3interpolate = _interopRequireWildcard(require("d3-interpolate"));
var d3 = _interopRequireWildcard(require("d3-scale"));
var _identityScale = _interopRequireDefault(require("../utils/identityScale"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const {
  isNil,
  isString,
  uniq
} = _l7Utils.lodashUtil;
const dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
const scaleMap = {
  [_l7Core.ScaleTypes.LINEAR]: d3.scaleLinear,
  [_l7Core.ScaleTypes.POWER]: d3.scalePow,
  [_l7Core.ScaleTypes.LOG]: d3.scaleLog,
  [_l7Core.ScaleTypes.IDENTITY]: _identityScale.default,
  [_l7Core.ScaleTypes.SEQUENTIAL]: d3.scaleSequential,
  [_l7Core.ScaleTypes.TIME]: d3.scaleTime,
  [_l7Core.ScaleTypes.QUANTILE]: d3.scaleQuantile,
  [_l7Core.ScaleTypes.QUANTIZE]: d3.scaleQuantize,
  [_l7Core.ScaleTypes.THRESHOLD]: d3.scaleThreshold,
  [_l7Core.ScaleTypes.CAT]: d3.scaleOrdinal,
  [_l7Core.ScaleTypes.DIVERGING]: d3.scaleDiverging
};
/**
 * 根据 Source 原始数据为指定字段创建 Scale，保存在 StyleAttribute 上，供下游插件使用
 */
class FeatureScalePlugin {
  constructor() {
    (0, _defineProperty2.default)(this, "scaleOptions", {});
  }
  apply(layer, {
    styleAttributeService
  }) {
    var _this = this;
    layer.hooks.init.tapPromise('FeatureScalePlugin', /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      var _layer$getSource;
      layer.log(_l7Core.IDebugLog.ScaleInitStart, _l7Core.ILayerStage.INIT);
      _this.scaleOptions = layer.getScaleOptions();
      const attributes = styleAttributeService.getLayerStyleAttributes();
      const dataArray = (_layer$getSource = layer.getSource()) === null || _layer$getSource === void 0 ? void 0 : _layer$getSource.data.dataArray;
      if (Array.isArray(dataArray) && dataArray.length === 0) {
        return;
      } else {
        _this.caculateScalesForAttributes(attributes || [], dataArray);
      }
      layer.log(_l7Core.IDebugLog.ScaleInitEnd, _l7Core.ILayerStage.INIT);
    }));

    // 检测数据是否需要更新
    layer.hooks.beforeRenderData.tapPromise('FeatureScalePlugin', /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (flag) {
        if (!flag) {
          return flag;
        }
        layer.log(_l7Core.IDebugLog.ScaleInitStart, _l7Core.ILayerStage.UPDATE);
        _this.scaleOptions = layer.getScaleOptions();
        const attributes = styleAttributeService.getLayerStyleAttributes();
        const dataArray = layer.getSource().data.dataArray;
        if (Array.isArray(dataArray) && dataArray.length === 0) {
          return true;
        }
        _this.caculateScalesForAttributes(attributes || [], dataArray);
        layer.log(_l7Core.IDebugLog.ScaleInitEnd, _l7Core.ILayerStage.UPDATE);
        layer.layerModelNeedUpdate = true;
        return true;
      });
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
    layer.hooks.beforeRender.tap('FeatureScalePlugin', () => {
      if (layer.layerModelNeedUpdate) {
        return;
      }
      this.scaleOptions = layer.getScaleOptions();
      const attributes = styleAttributeService.getLayerStyleAttributes();
      const dataArray = layer.getSource().data.dataArray;
      if (Array.isArray(dataArray) && dataArray.length === 0) {
        return;
      }
      if (attributes) {
        const attributesToRescale = attributes.filter(attribute => attribute.needRescale);
        if (attributesToRescale.length) {
          this.caculateScalesForAttributes(attributesToRescale, dataArray);
        }
      }
    });
  }
  isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }
  caculateScalesForAttributes(attributes, dataArray) {
    attributes.forEach(attribute => {
      if (attribute.scale) {
        // 创建Scale
        const attributeScale = attribute.scale;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const fieldValue = attribute.scale.field;
        attributeScale.names = this.parseFields(isNil(fieldValue) ? [] : fieldValue);
        const scales = [];
        // 为每个字段创建 Scale
        attributeScale.names.forEach(field => {
          var _attribute$scale;
          scales.push(this.createScale(field, attribute.name, (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.values, dataArray));
        });

        // 为scales 设置值区间 Range
        if (scales.some(scale => scale.type === _l7Core.StyleScaleType.VARIABLE)) {
          attributeScale.type = _l7Core.StyleScaleType.VARIABLE;
          scales.forEach(scale => {
            // 如果设置了回调, 这不需要设置range
            if (!attributeScale.callback && attributeScale.values !== 'text') {
              var _scale$option;
              switch ((_scale$option = scale.option) === null || _scale$option === void 0 ? void 0 : _scale$option.type) {
                case _l7Core.ScaleTypes.LOG:
                case _l7Core.ScaleTypes.LINEAR:
                case _l7Core.ScaleTypes.POWER:
                  if (attributeScale.values && attributeScale.values.length > 2) {
                    const tick = scale.scale.ticks(attributeScale.values.length);
                    scale.scale.domain(tick);
                  }
                  attributeScale.values ? scale.scale.range(attributeScale.values) : scale.scale.range(scale.option.domain);
                  break;
                case _l7Core.ScaleTypes.QUANTILE:
                case _l7Core.ScaleTypes.QUANTIZE:
                case _l7Core.ScaleTypes.THRESHOLD:
                  scale.scale.range(attributeScale.values); //
                  break;
                case _l7Core.ScaleTypes.IDENTITY:
                  // 不做处理xe
                  break;
                case _l7Core.ScaleTypes.CAT:
                  attributeScale.values ? scale.scale.range(attributeScale.values) : scale.scale.range(scale.option.domain);
                  break;
                case _l7Core.ScaleTypes.DIVERGING:
                case _l7Core.ScaleTypes.SEQUENTIAL:
                  scale.scale.interpolator(
                  // @ts-ignore
                  d3interpolate.interpolateRgbBasis(attributeScale.values));
                  break;
              }
            }
            if (attributeScale.values === 'text') {
              var _scale$option2;
              scale.scale.range((_scale$option2 = scale.option) === null || _scale$option2 === void 0 ? void 0 : _scale$option2.domain);
            }
          });
        } else {
          // 设置attribute 常量值 常量直接在value取值
          attributeScale.type = _l7Core.StyleScaleType.CONSTANT;
          attributeScale.defaultValues = scales.map((scale, index) => {
            return scale.scale(attributeScale.names[index]);
          });
        }
        attributeScale.scalers = scales.map(scale => {
          return {
            field: scale.field,
            func: scale.scale,
            option: scale.option
          };
        });
        attribute.needRescale = false;
      }
    });
  }

  /**
   * @example
   * 'w*h' => ['w', 'h']
   * 'w' => ['w']
   */
  parseFields(field) {
    if (Array.isArray(field)) {
      return field;
    }
    if (isString(field)) {
      return field.split('*');
    }
    return [field];
  }
  createScale(field, name, values, data) {
    var _this$scaleOptions$na, _find;
    // scale 支持根据视觉通道和字段
    const scaleOption = this.scaleOptions[name] && ((_this$scaleOptions$na = this.scaleOptions[name]) === null || _this$scaleOptions$na === void 0 ? void 0 : _this$scaleOptions$na.field) === field ? this.scaleOptions[name] // TODO  zi
    : this.scaleOptions[field];
    const styleScale = {
      field,
      scale: undefined,
      type: _l7Core.StyleScaleType.VARIABLE,
      option: scaleOption
    };
    if (!data || !data.length) {
      if (scaleOption && scaleOption.type) {
        styleScale.scale = this.createDefaultScale(scaleOption);
      } else {
        styleScale.scale = d3.scaleOrdinal([field]);
        styleScale.type = _l7Core.StyleScaleType.CONSTANT;
      }
      return styleScale;
    }
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const firstValue = (_find = data.find(d => !isNil(d[field]))) === null || _find === void 0 ? void 0 : _find[field];
    // 常量 Scale
    if (this.isNumber(field) || isNil(firstValue) && !scaleOption) {
      styleScale.scale = d3.scaleOrdinal([field]);
      styleScale.type = _l7Core.StyleScaleType.CONSTANT;
    } else {
      // 根据数据类型判断 默认等分位，时间，和枚举类型
      let type = scaleOption && scaleOption.type || this.getDefaultType(firstValue);
      if (values === 'text') {
        // text 为内置变 如果是文本则为cat
        type = _l7Core.ScaleTypes.CAT;
      }
      if (values === undefined) {
        type = _l7Core.ScaleTypes.IDENTITY;
      }
      const cfg = this.createScaleConfig(type, field, scaleOption, data);
      styleScale.scale = this.createDefaultScale(cfg);
      styleScale.option = cfg;
    }
    return styleScale;
  }
  getDefaultType(firstValue) {
    let type = _l7Core.ScaleTypes.LINEAR;
    if (typeof firstValue === 'string') {
      type = dateRegex.test(firstValue) ? _l7Core.ScaleTypes.TIME : _l7Core.ScaleTypes.CAT;
    }
    return type;
  }
  // 生成Scale 默认配置
  createScaleConfig(type, field, scaleOption, data) {
    const cfg = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, scaleOption), {}, {
      type
    });
    if (cfg !== null && cfg !== void 0 && cfg.domain) return cfg;

    // quantile domain 需要根据ID 进行去重
    let values = [];
    if (type === _l7Core.ScaleTypes.QUANTILE) {
      // 根据 obejct 属性 _id 进行去重
      const idMap = new Map();
      data === null || data === void 0 || data.forEach(obj => {
        idMap.set(obj._id, obj[field]);
      });
      values = Array.from(idMap.values());
    } else {
      values = (data === null || data === void 0 ? void 0 : data.map(item => item[field])) || [];
    }
    if (type === _l7Core.ScaleTypes.CAT || type === _l7Core.ScaleTypes.IDENTITY) {
      cfg.domain = uniq(values);
    } else if (type === _l7Core.ScaleTypes.QUANTILE) {
      cfg.domain = values;
    } else if (type === _l7Core.ScaleTypes.DIVERGING) {
      const minMax = (0, _d3Array.extent)(values);
      const neutral = (scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.neutral) !== undefined ? scaleOption === null || scaleOption === void 0 ? void 0 : scaleOption.neutral : (minMax[0] + minMax[1]) / 2;
      cfg.domain = [minMax[0], neutral, minMax[1]];
    } else {
      // linear/Power/log
      cfg.domain = (0, _d3Array.extent)(values);
    }
    return cfg;
  }

  // 创建Scale 实例
  createDefaultScale({
    type,
    domain,
    unknown,
    clamp,
    nice
  }) {
    // @ts-ignore
    const scale = scaleMap[type]();
    if (domain && scale.domain) {
      scale.domain(domain);
    }
    if (unknown) {
      scale.unknown(unknown);
    }
    if (clamp !== undefined && scale.clamp) {
      scale.clamp(clamp);
    }
    if (nice !== undefined && scale.nice) {
      scale.nice(nice);
    }
    // TODO 其他属性支持
    return scale;
  }
}
exports.default = FeatureScalePlugin;