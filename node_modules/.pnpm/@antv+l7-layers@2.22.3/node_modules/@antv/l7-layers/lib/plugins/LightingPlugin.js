"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.generateLightingUniforms = generateLightingUniforms;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
const _excluded = ["type"];
const lightTypeUniformMap = {
  directional: {
    lights: 'u_DirectionalLights',
    num: 'u_NumOfDirectionalLights'
  },
  spot: {
    lights: 'u_SpotLights',
    num: 'u_NumOfSpotLights'
  }
};
const DEFAULT_LIGHT = {
  type: 'directional',
  direction: [1, 10.5, 12],
  ambient: [0.2, 0.2, 0.2],
  diffuse: [0.6, 0.6, 0.6],
  specular: [0.1, 0.1, 0.1]
};
const DEFAULT_DIRECTIONAL_LIGHT = {
  direction: [0, 0, 0],
  ambient: [0, 0, 0],
  diffuse: [0, 0, 0],
  specular: [0, 0, 0]
};
const DEFAULT_SPOT_LIGHT = {
  position: [0, 0, 0],
  direction: [0, 0, 0],
  ambient: [0, 0, 0],
  diffuse: [0, 0, 0],
  specular: [0, 0, 0],
  constant: 1,
  linear: 0,
  quadratic: 0,
  angle: 14,
  exponent: 40,
  blur: 5
};
function generateLightingUniforms(lights) {
  const lightsMap = {
    u_DirectionalLights: new Array(3).fill((0, _objectSpread2.default)({}, DEFAULT_DIRECTIONAL_LIGHT)),
    u_NumOfDirectionalLights: 0,
    u_SpotLights: new Array(3).fill((0, _objectSpread2.default)({}, DEFAULT_SPOT_LIGHT)),
    u_NumOfSpotLights: 0
  };
  if (!lights || !lights.length) {
    lights = [DEFAULT_LIGHT];
  }
  lights.forEach(_ref => {
    let {
        type = 'directional'
      } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    const lightsUniformName = lightTypeUniformMap[type].lights;
    const lightsNumUniformName = lightTypeUniformMap[type].num;

    // @ts-ignore
    const num = lightsMap[lightsNumUniformName];
    // @ts-ignore
    lightsMap[lightsUniformName][num] = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, lightsMap[lightsUniformName][num]), rest);
    // @ts-ignore
    lightsMap[lightsNumUniformName]++;
  });
  return lightsMap;
}

/**
 * 光照 & Shadow
 */
class LightingPlugin {
  apply(layer) {
    layer.hooks.beforeRender.tap('LightingPlugin', () => {
      const {
        enableLighting
      } = layer.getLayerConfig();
      if (enableLighting) {
        layer.models.forEach(model =>
        // @ts-ignore
        model.addUniforms((0, _objectSpread2.default)({}, generateLightingUniforms())));
      }
    });
  }
}
exports.default = LightingPlugin;