"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Source = _interopRequireDefault(require("@antv/l7-source"));
class DataSourcePlugin {
  constructor() {
    (0, _defineProperty2.default)(this, "mapService", void 0);
  }
  apply(layer) {
    var _this = this;
    this.mapService = layer.getContainer().mapService;
    layer.hooks.init.tapPromise('DataSourcePlugin', /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      layer.log(_l7Core.IDebugLog.SourceInitStart, _l7Core.ILayerStage.INIT);
      let source = layer.getSource();
      if (!source) {
        // Tip: 用户没有传入 source 的时候使用图层的默认数据
        const {
          data,
          options
        } = layer.sourceOption || layer.defaultSourceConfig;
        source = new _l7Source.default(data, options);
        layer.setSource(source);
      }
      if (source.inited) {
        _this.updateClusterData(layer);
        layer.log(_l7Core.IDebugLog.SourceInitEnd, _l7Core.ILayerStage.INIT);
      } else {
        yield new Promise(resolve => {
          source.on('update', e => {
            if (e.type === 'inited') {
              _this.updateClusterData(layer);
              layer.log(_l7Core.IDebugLog.SourceInitEnd, _l7Core.ILayerStage.INIT);
            }
            resolve(null);
          });
        });
      }
    }));

    // 检测数据是否需要更新
    layer.hooks.beforeRenderData.tapPromise('DataSourcePlugin', /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      const neeUpdateCluster = _this.updateClusterData(layer);
      const dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;
      layer.dataState.dataSourceNeedUpdate = false;
      const needScale = neeUpdateCluster || dataSourceNeedUpdate;
      return needScale;
    }));
  }
  updateClusterData(layer) {
    // Tip: 矢量瓦片不需要进行聚合操作
    if (layer.isTileLayer || layer.tileLayer || !layer.getSource()) {
      return false;
    }
    const source = layer.getSource();
    const cluster = source.cluster;
    const {
      zoom = 0
    } = source.clusterOptions;
    const newZoom = this.mapService.getZoom() - 1;
    const dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;
    if (cluster && dataSourceNeedUpdate) {
      // 数据发生更新
      source.updateClusterData(Math.floor(newZoom));
    }
    // 如果 dataSource 有更新，跳过 zoom 的判断，直接更新一次
    if (cluster && Math.abs(layer.clusterZoom - newZoom) >= 1) {
      if (zoom !== Math.floor(newZoom)) {
        source.updateClusterData(Math.floor(newZoom));
      }
      layer.clusterZoom = newZoom;
      return true;
    }
    return false;
  }
}
exports.default = DataSourcePlugin;