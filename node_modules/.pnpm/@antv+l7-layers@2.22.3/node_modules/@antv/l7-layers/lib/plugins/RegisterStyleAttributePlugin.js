"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _l7Core = require("@antv/l7-core");
var _CommonStyleAttribute = require("../core/CommonStyleAttribute");
var _utils = require("../tile/utils/utils");
/**
 * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建
 */
class RegisterStyleAttributePlugin {
  apply(layer, {
    styleAttributeService
  }) {
    layer.hooks.init.tapPromise('RegisterStyleAttributePlugin', () => {
      // 过滤 tileGroup layer （瓦片图层不需要注册）
      if ((0, _utils.isTileGroup)(layer)) {
        return;
      }
      this.registerBuiltinAttributes(styleAttributeService, layer);
    });
  }
  registerBuiltinAttributes(styleAttributeService, layer) {
    // MaskLayer 只需要注册 a_Position
    if (layer.type === 'MaskLayer') {
      this.registerPositionAttribute(styleAttributeService);
      return;
    }
    // Tip: normal render layer
    this.registerPositionAttribute(styleAttributeService);
    // this.registerFilterAttribute(styleAttributeService);//数据层数据过滤
    this.registerColorAttribute(styleAttributeService);
  }
  registerPositionAttribute(styleAttributeService) {
    styleAttributeService.registerStyleAttribute({
      name: 'position',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Position',
        shaderLocation: _CommonStyleAttribute.COMMON_ATTRIBUTE_LOCATION.POSITION,
        buffer: {
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 3,
        update: (feature, featureIdx, vertex) => {
          return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];
        }
      }
    });
  }
  registerColorAttribute(styleAttributeService) {
    styleAttributeService.registerStyleAttribute({
      name: 'color',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Color',
        shaderLocation: _CommonStyleAttribute.COMMON_ATTRIBUTE_LOCATION.COLOR,
        buffer: {
          // give the WebGL driver a hint that this buffer may change
          usage: _l7Core.gl.DYNAMIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 4,
        update: feature => {
          const {
            color
          } = feature;
          return !color || !color.length ? [1, 1, 1, 1] : color;
        }
      }
    });
  }
}
exports.default = RegisterStyleAttributePlugin;