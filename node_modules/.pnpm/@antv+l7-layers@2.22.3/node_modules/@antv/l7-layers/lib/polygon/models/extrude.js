"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _BaseModel = _interopRequireDefault(require("../../core/BaseModel"));
var _triangulation = require("../../core/triangulation");
var _loadImage = require("../../utils/load-image");
/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_frag.glsl' */
const polygonExtrudeFrag = "layout(std140) uniform commonUniforms {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor;\n  float u_topsurface;\n  float u_sidesurface;\n  float u_heightfixed; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_raisingHeight;\n};\n\nin vec4 v_Color;\n#pragma include \"scene_uniforms\"\n#pragma include \"picking\"\nout vec4 outputColor;\nvoid main() {\n\n     // top face\n    if(u_topsurface < 1.0) {\n      discard;\n    }\n\n    outputColor = v_Color;\n  \n  outputColor = filterColor(outputColor);\n}\n";
/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_picklight_frag.glsl' */
const polygonExtrudePickLightFrag = "\nlayout(std140) uniform commonUniforms {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor;\n  float u_topsurface;\n  float u_sidesurface;\n  float u_heightfixed; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_raisingHeight;\n};\n\nin vec4 v_Color;\nin vec3 v_uvs;\nin vec2 v_texture_data;\nout vec4 outputColor;\n\n#pragma include \"scene_uniforms\"\n#pragma include \"picking\"\n\nvoid main() {\n  float isSide =  v_texture_data.x;\n  float sidey = v_uvs[2];\n  float lightWeight = v_texture_data.y;\n\n  // Tip: \u90E8\u5206\u673A\u578B GPU \u8BA1\u7B97\u7CBE\u5EA6\u517C\u5BB9\n  if(isSide < 0.999) {\n    // side face\n    if(u_sidesurface < 1.0) {\n      discard;\n    }\n    \n    if( u_linearColor == 1.0) {\n      // side use linear\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\n      linearColor.rgb *= lightWeight;\n      outputColor = linearColor;\n    } else {\n      // side notuse linear\n       outputColor = v_Color;\n    }\n  } else {\n    // top face\n    if(u_topsurface < 1.0) {\n      discard;\n    }\n    outputColor = v_Color;\n  }\n\n  outputColor = filterColorAlpha(outputColor, lightWeight);\n}\n";
/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_picklight_vert.glsl' */
const polygonExtrudePickLightVert = "layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\nlayout(location = ATTRIBUTE_LOCATION_POSITION_64LOW) in vec2 a_Position64Low;\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\nlayout(location = ATTRIBUTE_LOCATION_NORMAL) in vec3 a_Normal;\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec3 a_uvs;\n\nlayout(std140) uniform commonUniforms {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor;\n  float u_topsurface;\n  float u_sidesurface;\n  float u_heightfixed; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_raisingHeight;\n};\n\nout vec4 v_Color;\nout vec3 v_uvs;\nout vec2 v_texture_data;\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nvoid main() {\n  v_uvs = a_uvs;\n  // cal style mapping - \u6570\u636E\u7EB9\u7406\u6620\u5C04\u90E8\u5206\u7684\u8BA1\u7B97\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\n  vec4 project_pos = project_position(pos, a_Position64Low);\n\n  if (u_heightfixed > 0.0) {\n    // \u5224\u65AD\u51E0\u4F55\u4F53\u662F\u5426\u56FA\u5B9A\u9AD8\u5EA6\n    project_pos.z = a_Position.z * a_Size;\n    project_pos.z += u_raisingHeight;\n    if (\n      u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n      u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET\n    ) {\n      float mapboxZoomScale = 4.0 / pow(2.0, 21.0 - u_Zoom);\n      project_pos.z *= mapboxZoomScale;\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\n    }\n  }\n\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n  float lightWeight = calc_lighting(project_pos);\n  v_texture_data = vec2(a_Position.z, lightWeight);\n\n  v_Color = vec4(a_Color.rgb * lightWeight, a_Color.w * opacity);\n\n  setPickingColor(a_PickingColor);\n}\n";
/* babel-plugin-inline-import '../shaders/extrude/polygon_extrude_vert.glsl' */
const polygonExtrudeVert = "layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\nlayout(location = ATTRIBUTE_LOCATION_POSITION_64LOW) in vec2 a_Position64Low;\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\nlayout(location = ATTRIBUTE_LOCATION_NORMAL) in vec3 a_Normal;\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec3 a_uvs;\n\nlayout(std140) uniform commonUniforms {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor;\n  float u_topsurface;\n  float u_sidesurface;\n  float u_heightfixed; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_raisingHeight;\n};\n\nout vec4 v_Color;\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nvoid main() {\n  float isSide = a_Position.z;\n  float topU = a_uvs[0];\n  float topV = 1.0 - a_uvs[1];\n  float sidey = a_uvs[2];\n\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\n\n  vec4 project_pos = project_position(pos, a_Position64Low);\n  float lightWeight = calc_lighting(project_pos);\n\n  if (u_heightfixed > 0.0) {\n    // \u5224\u65AD\u51E0\u4F55\u4F53\u662F\u5426\u56FA\u5B9A\u9AD8\u5EA6\n    project_pos.z = a_Position.z * a_Size;\n    project_pos.z += u_raisingHeight;\n\n    if (\n      u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n      u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET\n    ) {\n      float mapboxZoomScale = 4.0 / pow(2.0, 21.0 - u_Zoom);\n      project_pos.z *= mapboxZoomScale;\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\n    }\n  }\n\n gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n\n  // Tip: \u90E8\u5206\u673A\u578B GPU \u8BA1\u7B97\u7CBE\u5EA6\u517C\u5BB9\n  if (isSide < 0.999) {\n    // side face\n    // if(u_sidesurface < 1.0) {\n    //   discard;\n    // }\n\n    if (u_linearColor == 1.0) {\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\n      linearColor.rgb *= lightWeight;\n      v_Color = linearColor;\n    } else {\n      v_Color = a_Color;\n    }\n\n  } else {\n    v_Color = a_Color;\n  }\n\n  v_Color = vec4(v_Color.rgb * lightWeight, v_Color.w * opacity);\n\n  setPickingColor(a_PickingColor);\n}\n";
/* babel-plugin-inline-import '../shaders/extrude/polygon_extrudetex_frag.glsl' */
const polygonExtrudeTexFrag = "uniform sampler2D u_texture;\n\nlayout(std140) uniform commonUniforms {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor;\n  float u_topsurface;\n  float u_sidesurface;\n  float u_heightfixed; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_raisingHeight;\n};\n\nin vec4 v_Color;\nin vec3 v_uvs;\nin vec2 v_texture_data;\n\n#pragma include \"scene_uniforms\"\n#pragma include \"picking\"\n\nout vec4 outputColor;\n\nvoid main() {\n  float opacity = u_opacity;\n  float isSide = v_texture_data.x;\n  float lightWeight = v_texture_data.y;\n  float topU = v_uvs[0];\n  float topV = 1.0 - v_uvs[1];\n  float sidey = v_uvs[2];\n\n  outputColor = texture(SAMPLER_2D(u_texture), vec2(topU, topV));\n  // Tip: \u90E8\u5206\u673A\u578B GPU \u8BA1\u7B97\u7CBE\u5EA6\u517C\u5BB9\n  if (isSide < 0.999) {// \u662F\u5426\u662F\u8FB9\u7F18\n    // side face\n    if (u_sidesurface < 1.0) {\n      discard;\n    }\n\n    if (u_linearColor == 1.0) {\n      vec4 linearColor = mix(u_targetColor, u_sourceColor, sidey);\n      linearColor.rgb *= lightWeight;\n      outputColor = linearColor;\n    } else {\n      outputColor = v_Color;\n    }\n  } else {\n     // top face\n    if (u_topsurface < 1.0) {\n      discard;\n    }\n  }\n  \n  outputColor.a *= opacity;\n  outputColor = filterColor(outputColor);\n}\n";
/* babel-plugin-inline-import '../shaders/extrude/polygon_extrudetex_vert.glsl' */
const polygonExtrudeTexVert = "layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\nlayout(location = ATTRIBUTE_LOCATION_POSITION_64LOW) in vec2 a_Position64Low;\nlayout(location = ATTRIBUTE_LOCATION_COLOR) in vec4 a_Color;\nlayout(location = ATTRIBUTE_LOCATION_SIZE) in float a_Size;\nlayout(location = ATTRIBUTE_LOCATION_NORMAL) in vec3 a_Normal;\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec3 a_uvs;\n\nlayout(std140) uniform commonUniforms {\n  vec4 u_sourceColor;\n  vec4 u_targetColor;\n  float u_linearColor;\n  float u_topsurface;\n  float u_sidesurface;\n  float u_heightfixed; // \u9ED8\u8BA4\u4E0D\u56FA\u5B9A\n  float u_raisingHeight;\n};\n\nout vec4 v_Color;\nout vec3 v_uvs;\nout vec2 v_texture_data;\n\n#pragma include \"projection\"\n#pragma include \"light\"\n#pragma include \"picking\"\n\nvoid main() {\n  vec4 pos = vec4(a_Position.xy, a_Position.z * a_Size, 1.0);\n  vec4 project_pos = project_position(pos, a_Position64Low);\n  float lightWeight = calc_lighting(project_pos);\n  v_uvs = a_uvs;\n  v_Color = a_Color;\n  v_Color.a *= opacity;\n\n  v_texture_data = vec2(a_Position.z, lightWeight);\n\n  if (u_heightfixed > 0.0) {\n    // \u5224\u65AD\u51E0\u4F55\u4F53\u662F\u5426\u56FA\u5B9A\u9AD8\u5EA6\n    project_pos.z = a_Position.z * a_Size;\n    project_pos.z += u_raisingHeight;\n\n    if (\n      u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||\n      u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET\n    ) {\n      float mapboxZoomScale = 4.0 / pow(2.0, 21.0 - u_Zoom);\n      project_pos.z *= mapboxZoomScale;\n      project_pos.z += u_raisingHeight * mapboxZoomScale;\n    }\n  }\n\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\n\n  setPickingColor(a_PickingColor);\n}\n";
class ExtrudeModel extends _BaseModel.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "texture", void 0);
  }
  get attributeLocation() {
    return Object.assign(super.attributeLocation, {
      MAX: super.attributeLocation.MAX,
      SIZE: 9,
      NORMAL: 10,
      UV: 11
    });
  }
  getUninforms() {
    const commoninfo = this.getCommonUniformsInfo();
    const attributeInfo = this.getUniformsBufferInfo(this.getStyleAttribute());
    this.updateStyleUnifoms();
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, commoninfo.uniformsOption), attributeInfo.uniformsOption);
  }
  getCommonUniformsInfo() {
    const {
      mapTexture,
      heightfixed = false,
      raisingHeight = 0,
      topsurface = true,
      sidesurface = true,
      sourceColor,
      targetColor
    } = this.layer.getLayerConfig();

    // 转化渐变色
    let useLinearColor = 0; // 默认不生效
    let sourceColorArr = [1, 1, 1, 1];
    let targetColorArr = [1, 1, 1, 1];
    if (sourceColor && targetColor) {
      sourceColorArr = (0, _l7Utils.rgb2arr)(sourceColor);
      targetColorArr = (0, _l7Utils.rgb2arr)(targetColor);
      useLinearColor = 1;
    }
    const commonOptions = {
      u_sourceColor: sourceColorArr,
      u_targetColor: targetColorArr,
      u_linearColor: useLinearColor,
      // 控制侧面和顶面的显示隐藏
      u_topsurface: Number(topsurface),
      u_sidesurface: Number(sidesurface),
      u_heightfixed: Number(heightfixed),
      u_raisingHeight: Number(raisingHeight)
    };
    if (mapTexture && this.texture) {
      // @ts-ignore
      commonOptions.u_texture = this.texture;
      this.textures = [this.texture];
    }
    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
    return commonBufferInfo;
  }
  initModels() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      yield _this.loadTexture();
      return _this.buildModels();
    })();
  }
  buildModels() {
    var _this2 = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const {
        frag,
        vert,
        type
      } = _this2.getShaders();
      _this2.initUniformsBuffer();
      const model = yield _this2.layer.buildLayerModel({
        moduleName: type,
        vertexShader: vert,
        fragmentShader: frag,
        depth: {
          enable: true
        },
        defines: _this2.getDefines(),
        inject: _this2.getInject(),
        triangulation: _triangulation.PolygonExtrudeTriangulation
      });
      return [model];
    })();
  }
  getShaders() {
    const {
      pickLight,
      mapTexture
    } = this.layer.getLayerConfig();
    if (mapTexture) {
      return {
        frag: polygonExtrudeTexFrag,
        vert: polygonExtrudeTexVert,
        type: 'polygonExtrudeTexture'
      };
    }
    if (pickLight) {
      return {
        frag: polygonExtrudePickLightFrag,
        vert: polygonExtrudePickLightVert,
        type: 'polygonExtrudePickLight'
      };
    } else {
      return {
        frag: polygonExtrudeFrag,
        vert: polygonExtrudeVert,
        type: 'polygonExtrude'
      };
    }
  }
  clearModels() {
    var _this$texture;
    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();
    this.textures = [];
  }
  registerBuiltinAttributes() {
    const bounds = this.layer.getSource().extent;
    const lngLen = bounds[2] - bounds[0];
    const latLen = bounds[3] - bounds[1];

    // 注册 Position 属性 64 位地位部分，经纬度数据开启双精度，避免大于 22 层级以上出现数据偏移
    this.registerPosition64LowAttribute();
    this.styleAttributeService.registerStyleAttribute({
      name: 'uvs',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_uvs',
        shaderLocation: this.attributeLocation.UV,
        buffer: {
          // give the WebGL driver a hint that this buffer may change
          usage: _l7Core.gl.STATIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 3,
        update: (feature, featureIdx, vertex) => {
          const lng = vertex[0];
          const lat = vertex[1];
          // 临时 兼容高德V2
          return [(lng - bounds[0]) / lngLen, (lat - bounds[1]) / latLen, vertex[4]];
        }
      }
    });
    this.styleAttributeService.registerStyleAttribute({
      name: 'normal',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Normal',
        shaderLocation: this.attributeLocation.NORMAL,
        buffer: {
          // give the WebGL driver a hint that this buffer may change
          usage: _l7Core.gl.STATIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 3,
        update: (feature, featureIdx, vertex, attributeIdx, normal) => {
          return normal;
        }
      }
    });
    this.styleAttributeService.registerStyleAttribute({
      name: 'size',
      type: _l7Core.AttributeType.Attribute,
      descriptor: {
        name: 'a_Size',
        shaderLocation: this.attributeLocation.SIZE,
        buffer: {
          usage: _l7Core.gl.DYNAMIC_DRAW,
          data: [],
          type: _l7Core.gl.FLOAT
        },
        size: 1,
        update: feature => {
          const {
            size = 10
          } = feature;
          return Array.isArray(size) ? [size[0]] : [size];
        }
      }
    });
  }
  loadTexture() {
    var _this3 = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const {
        mapTexture
      } = _this3.layer.getLayerConfig();
      const {
        createTexture2D
      } = _this3.rendererService;
      _this3.texture = createTexture2D({
        height: 1,
        width: 1
      });
      if (mapTexture) {
        const image = yield (0, _loadImage.loadImage)(mapTexture);
        _this3.texture = createTexture2D({
          data: image,
          width: image.width,
          height: image.height,
          wrapS: _l7Core.gl.CLAMP_TO_EDGE,
          wrapT: _l7Core.gl.CLAMP_TO_EDGE,
          min: _l7Core.gl.LINEAR,
          mag: _l7Core.gl.LINEAR
        });
      }
    })();
  }
}
exports.default = ExtrudeModel;