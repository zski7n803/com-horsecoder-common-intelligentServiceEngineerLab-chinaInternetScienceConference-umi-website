"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _BaseLayer = _interopRequireDefault(require("../core/BaseLayer"));
var _models = _interopRequireDefault(require("./models/"));
class PolygonLayer extends _BaseLayer.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "type", 'PolygonLayer');
    (0, _defineProperty2.default)(this, "enableShaderEncodeStyles", ['opacity', 'extrusionBase',
    // shape 为文本时
    'rotation', 'offsets', 'stroke']);
  }
  buildModels() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      const shape = _this.getModelType();
      _this.layerModel = new _models.default[shape](_this);
      yield _this.initLayerModels();
    })();
  }
  getModelType() {
    var _shapeAttribute$scale;
    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
    const shape = shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;
    if (shape === 'fill' || !shape) {
      return 'fill';
    } else if (shape === 'extrude') {
      return 'extrude';
    } else if (shape === 'extrusion') {
      return 'extrusion';
    } else if (shape === 'water') {
      return 'water';
    } else if (shape === 'ocean') {
      return 'ocean';
    } else if (shape === 'line') {
      return 'line';
    } else {
      return this.getPointModelType();
    }
  }
  getPointModelType() {
    // pointlayer
    //  2D、 3d、 shape、image、text、normal、
    const layerData = this.getEncodedData();
    const {
      shape2d,
      shape3d
    } = this.getLayerConfig();
    const iconMap = this.iconService.getIconMap();
    const item = layerData.find(fe => {
      return fe.hasOwnProperty('shape');
    });
    if (!item) {
      return 'fill';
    } else {
      const shape = item.shape;
      if (shape === 'dot') {
        return 'point_normal';
      }
      if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
        return 'point_fill';
      }
      if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
        return 'point_extrude';
      }
      if (iconMap.hasOwnProperty(shape)) {
        return 'point_image';
      }
      return 'text';
    }
  }
}
exports.default = PolygonLayer;