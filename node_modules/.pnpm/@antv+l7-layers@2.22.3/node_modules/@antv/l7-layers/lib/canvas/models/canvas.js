"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CanvasModel = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _BaseModel = _interopRequireDefault(require("../../core/BaseModel"));
var _interface = require("../../core/interface");
var _constants = require("./constants");
class CanvasModel extends _BaseModel.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "canvas", null);
    (0, _defineProperty2.default)(this, "ctx", void 0);
    (0, _defineProperty2.default)(this, "ctxType", void 0);
    (0, _defineProperty2.default)(this, "viewportSize", void 0);
    (0, _defineProperty2.default)(this, "initCanvas", () => {
      var _this$mapService$getC, _this$mapService$getC2, _this$mapService, _this$mapService$getM, _this$mapService2;
      const {
        zIndex,
        getContext
      } = this.layerConfig;
      const canvas = document.createElement('canvas');
      const modelType = this.layer.getModelType();
      this.canvas = canvas;
      canvas.classList.add('l7-canvas-layer');
      canvas.style.position = 'absolute';
      canvas.style.top = '0';
      canvas.style.left = '0';
      canvas.style.zIndex = String(zIndex);
      this.resetCanvasSize();
      const container = (_this$mapService$getC = (_this$mapService$getC2 = (_this$mapService = this.mapService).getCanvasOverlays) === null || _this$mapService$getC2 === void 0 ? void 0 : _this$mapService$getC2.call(_this$mapService)) !== null && _this$mapService$getC !== void 0 ? _this$mapService$getC : (_this$mapService$getM = (_this$mapService2 = this.mapService).getMapCanvasContainer) === null || _this$mapService$getM === void 0 ? void 0 : _this$mapService$getM.call(_this$mapService2);
      container === null || container === void 0 || container.appendChild(canvas);
      this.ctx = getContext ? getContext(canvas) : canvas.getContext(_constants.CanvasContextTypeMap[modelType]);
      if (!this.ctx) {
        console.error('Failed to get rendering context for canvas');
      }
      this.bindListeners();
    });
    (0, _defineProperty2.default)(this, "resetViewportSize", () => {
      const {
        width: viewWidth,
        height: viewHeight
      } = this.rendererService.getViewportSize();
      this.viewportSize = [viewWidth, viewHeight];
    });
    (0, _defineProperty2.default)(this, "resetCanvasSize", () => {
      const canvas = this.canvas;
      if (!canvas) {
        return;
      }
      this.resetViewportSize();
      const [width, height] = this.mapService.getSize();
      const [viewWidth, viewHeight] = this.viewportSize;
      canvas.width = viewWidth;
      canvas.height = viewHeight;
      canvas.style.width = width + 'px';
      canvas.style.height = height + 'px';
    });
    (0, _defineProperty2.default)(this, "renderCanvas", () => {
      var _ref;
      if (!this.canvas) {
        this.initCanvas();
      }
      const {
        draw,
        drawingOnCanvas
      } = this.layerConfig;
      const [width, height] = this.viewportSize;
      const bounds = this.mapService.getBounds();
      (_ref = draw !== null && draw !== void 0 ? draw : drawingOnCanvas) === null || _ref === void 0 || _ref({
        canvas: this.canvas,
        ctx: this.ctx,
        container: {
          width,
          height,
          bounds
        },
        size: [width, height],
        utils: {
          lngLatToContainer: this.lngLatToContainer
        },
        mapService: this.mapService
      });
    });
    (0, _defineProperty2.default)(this, "removeCanvas", () => {
      if (this.canvas) {
        var _this$canvas$parentEl;
        (_this$canvas$parentEl = this.canvas.parentElement) === null || _this$canvas$parentEl === void 0 || _this$canvas$parentEl.removeChild(this.canvas);
        this.canvas = null;
      }
      this.unbindListeners();
    });
    (0, _defineProperty2.default)(this, "onMapResize", () => {
      requestAnimationFrame(() => {
        this.resetCanvasSize();
        this.renderCanvas();
      });
    });
    (0, _defineProperty2.default)(this, "lngLatToContainer", lngLat => {
      const {
        x,
        y
      } = this.mapService.lngLatToContainer(lngLat);
      return {
        x: x * window.devicePixelRatio,
        y: y * window.devicePixelRatio
      };
    });
  }
  get layerConfig() {
    return this.layer.getLayerConfig();
  }
  initModels() {
    var _this = this;
    return (0, _asyncToGenerator2.default)(function* () {
      _this.renderCanvas();
      return [];
    })();
  }
  bindListeners() {
    this.mapService.on('resize', this.onMapResize);
    const {
      trigger,
      update
    } = this.layerConfig;
    if (update === _interface.CanvasUpdateType.ALWAYS || trigger === 'change') {
      this.mapService.on('mapchange', this.renderCanvas);
    } else {
      this.mapService.on('zoomstart', this.removeCanvas);
      this.mapService.on('zoomend', this.renderCanvas);
      this.mapService.on('movestart', this.removeCanvas);
      this.mapService.on('moveend', this.renderCanvas);
    }
  }
  unbindListeners() {
    this.mapService.off('resize', this.onMapResize);
    this.mapService.off('mapchange', this.renderCanvas);
    this.mapService.off('zoomstart', this.removeCanvas);
    this.mapService.off('zoomend', this.renderCanvas);
    this.mapService.off('movestart', this.removeCanvas);
    this.mapService.off('moveend', this.renderCanvas);
  }
  registerBuiltinAttributes() {}
}
exports.CanvasModel = CanvasModel;