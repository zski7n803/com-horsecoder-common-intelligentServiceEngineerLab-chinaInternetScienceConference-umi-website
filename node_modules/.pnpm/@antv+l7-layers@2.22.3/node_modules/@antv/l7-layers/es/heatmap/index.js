import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import BaseLayer from "../core/BaseLayer";
import { rampColor2legend } from "../utils/rampcolor_legend";
import HeatMapModels from "./models";
export default class HeatMapLayer extends BaseLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "type", 'HeatMapLayer');
  }
  buildModels() {
    var _this = this;
    return _asyncToGenerator(function* () {
      const shape = _this.getModelType();
      _this.layerModel = new HeatMapModels[shape](_this);
      yield _this.initLayerModels();
    })();
  }
  prerender() {
    const shape = this.getModelType();
    if (shape === 'heatmap') {
      if (this.layerModel) {
        this.layerModel.prerender(); // 独立的渲染流程
      }
    }
  }
  renderModels(options = {}) {
    const shape = this.getModelType();
    if (shape === 'heatmap') {
      if (this.layerModel) {
        this.layerModel.render(options); // 独立的渲染流程
      }
      return this;
    }
    if (this.encodeDataLength <= 0 && !this.forceRender) {
      return this;
    }
    this.hooks.beforeRender.call();
    this.models.forEach(model => model.draw({
      uniforms: this.layerModel.getUninforms(),
      blend: this.layerModel.getBlend(),
      stencil: this.layerModel.getStencil(options)
    }));
    this.hooks.afterRender.call();
    return this;
  }
  updateModelData(data) {
    if (data.attributes && data.elements) {
      this.models[0].updateAttributesAndElements(data.attributes, data.elements);
    } else {
      console.warn('data error');
    }
  }
  getModelType() {
    var _shapeAttribute$scale;
    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
    const {
      shape3d
    } = this.getLayerConfig();
    const source = this.getSource();
    const sourceType = source.data.type;
    const shape = (shapeAttribute === null || shapeAttribute === void 0 || (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'heatmap';
    if (shape === 'heatmap' || shape === 'heatmap3d') {
      return 'heatmap';
    }
    if (sourceType === 'hexagon') {
      return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'hexagon' : 'grid3d';
    }
    if (sourceType === 'grid') {
      return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'grid' : 'grid3d';
    }
    return 'heatmap';
  }
  getLegend(name) {
    if (this.getModelType() === 'heatmap') {
      if (name !== 'color') return {
        type: undefined,
        field: undefined,
        items: []
      };
      const rampColors = this.getLayerConfig().rampColors;
      return rampColor2legend(rampColors, name);
    } else {
      return super.getLegend(name);
    }
  }
}