import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { AttributeType, gl } from '@antv/l7-core';
import { defaultValue } from '@antv/l7-utils';
import BaseModel from "../../core/BaseModel";
import { RasterImageTriangulation } from "../../core/triangulation";
/* babel-plugin-inline-import '../shaders/image_frag.glsl' */
const ImageFrag = "uniform sampler2D u_texture;\nlayout(std140) uniform commonUniforms {\n    float u_opacity:1.0;\n    float u_brightness:1.0;\n    float u_contrast:1.0;\n    float u_saturation:1.0;\n    float u_gamma:1.0;\n};\n\nin vec2 v_texCoord;\nout vec4 outputColor;\nvec3 setContrast(vec3 rgb, float contrast) {\n  vec3 color = mix(vec3(0.5), rgb, contrast);\n  color = clamp(color, 0.0, 1.0);\n  return color;\n}\nvec3 setSaturation(vec3 rgb, float adjustment) {\n  const vec3 grayVector = vec3(0.2125, 0.7154, 0.0721);\n  vec3 intensity = vec3(dot(rgb, grayVector));\n  vec3 color = mix(intensity, rgb, adjustment);\n  color = clamp(color, 0.0, 1.0);\n  return color;\n}\nvoid main() {\n  vec4 color = texture(SAMPLER_2D(u_texture),vec2(v_texCoord.x,v_texCoord.y));\n  //brightness\n  color.rgb = mix(vec3(0.0, 0.0, 0.0), color.rgb, u_brightness);\n  //contrast\n  color.rgb = setContrast(color.rgb, u_contrast);\n  // saturation\n  color.rgb = setSaturation(color.rgb, u_saturation);\n  // gamma\n  color.rgb = pow(color.rgb, vec3(u_gamma));\n  outputColor = color;\n  outputColor.a *= u_opacity;\n  if(outputColor.a < 0.01)\n    discard;\n}\n";
/* babel-plugin-inline-import '../shaders/image_vert.glsl' */
const ImageVert = "layout(location = ATTRIBUTE_LOCATION_POSITION) in vec3 a_Position;\nlayout(location = ATTRIBUTE_LOCATION_POSITION_64LOW) in vec2 a_Position64Low;\nlayout(location = ATTRIBUTE_LOCATION_UV) in vec2 a_Uv;\n\nlayout(std140) uniform commonUniforms {\n    float u_opacity:1.0;\n    float u_brightness:1.0;\n    float u_contrast:1.0;\n    float u_saturation:1.0;\n    float u_gamma:1.0;\n};\n\nout vec2 v_texCoord;\n#pragma include \"projection\"\n\nvoid main() {\n  v_texCoord = a_Uv;\n  vec4 project_pos = project_position(vec4(a_Position, 1.0), a_Position64Low);\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy, 0.0, 1.0));\n}\n";
export default class ImageModel extends BaseModel {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "texture", void 0);
  }
  get attributeLocation() {
    return Object.assign(super.attributeLocation, {
      MAX: super.attributeLocation.MAX,
      UV: 9
    });
  }
  getCommonUniformsInfo() {
    const {
      opacity,
      brightness,
      contrast,
      saturation,
      gamma
    } = this.layer.getLayerConfig();
    const commonOptions = {
      u_opacity: defaultValue(opacity, 1.0),
      u_brightness: defaultValue(brightness, 1.0),
      u_contrast: defaultValue(contrast, 1.0),
      u_saturation: defaultValue(saturation, 1.0),
      u_gamma: defaultValue(gamma, 1.0)
    };
    this.textures = [this.texture];
    const commonBufferInfo = this.getUniformsBufferInfo(commonOptions);
    return commonBufferInfo;
  }
  initModels() {
    var _this = this;
    return _asyncToGenerator(function* () {
      yield _this.loadTexture();
      return _this.buildModels();
    })();
  }
  clearModels() {
    var _this$texture;
    (_this$texture = this.texture) === null || _this$texture === void 0 || _this$texture.destroy();
  }
  loadTexture() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      const {
        createTexture2D
      } = _this2.rendererService;
      const source = _this2.layer.getSource();
      const imageData = yield source.data.images;
      _this2.texture = createTexture2D({
        data: imageData[0],
        width: imageData[0].width,
        height: imageData[0].height,
        mag: gl.LINEAR,
        min: gl.LINEAR
      });
    })();
  }
  buildModels() {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      _this3.initUniformsBuffer();
      const model = yield _this3.layer.buildLayerModel({
        moduleName: 'rasterImage',
        vertexShader: ImageVert,
        fragmentShader: ImageFrag,
        defines: _this3.getDefines(),
        triangulation: RasterImageTriangulation,
        primitive: gl.TRIANGLES,
        blend: {
          // Tip: 优化显示效果
          enable: true
        },
        depth: {
          enable: false
        },
        pickingEnabled: false
      });
      return [model];
    })();
  }
  registerBuiltinAttributes() {
    // 注册 Position 属性 64 位地位部分，经纬度数据开启双精度，避免大于 22 层级以上出现数据偏移
    this.registerPosition64LowAttribute();
    this.styleAttributeService.registerStyleAttribute({
      name: 'uv',
      type: AttributeType.Attribute,
      descriptor: {
        name: 'a_Uv',
        shaderLocation: this.attributeLocation.UV,
        buffer: {
          usage: gl.DYNAMIC_DRAW,
          data: [],
          type: gl.FLOAT
        },
        size: 2,
        update: (feature, featureIdx, vertex) => {
          return [vertex[3], vertex[4]];
        }
      }
    });
  }
}