import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// import type { ILayerConfig } from '@antv/l7-core';
import BaseLayer from "../core/BaseLayer";
import { CanvasModel } from "./models";
export default class CanvasLayer extends BaseLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "type", 'CanvasLayer');
  }
  getDefaultConfig() {
    return {
      zIndex: 3,
      contextType: 'canvas2d',
      trigger: 'change'
    };
  }
  buildModels() {
    var _this = this;
    return _asyncToGenerator(function* () {
      _this.layerModel = new CanvasModel(_this);
      yield _this.initLayerModels();
    })();
  }
  getModelType() {
    return this.getLayerConfig().contextType || 'canvas2d';
  }
  draw(draw) {
    this.updateLayerConfig({
      draw
    });
    this.render();
    return this;
  }
  getLayerConfig() {
    const config = _objectSpread(_objectSpread({}, this.getDefaultConfig()), super.getLayerConfig());
    if (config.zIndex < 3) {
      config.zIndex = 3;
    }
    return config;
  }
  render() {
    var _this$layerModel;
    (_this$layerModel = this.layerModel) === null || _this$layerModel === void 0 || _this$layerModel.renderCanvas();
    return this;
  }
  getCanvas() {
    var _this$layerModel2;
    return (_this$layerModel2 = this.layerModel) === null || _this$layerModel2 === void 0 ? void 0 : _this$layerModel2.canvas;
  }
  show() {
    const canvas = this.getCanvas();
    if (canvas) {
      canvas.style.display = 'unset';
    }
    return this;
  }
  hide() {
    const canvas = this.getCanvas();
    if (canvas) {
      canvas.style.display = 'none';
    }
    return this;
  }
  destroy() {
    this.layerModel.removeCanvas();
    super.destroy();
  }
}