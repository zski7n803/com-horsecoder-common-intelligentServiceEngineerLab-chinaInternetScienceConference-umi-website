import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { generateCatRamp, generateColorRamp, generateCustomRamp, generateLinearRamp, generateQuantizeRamp } from '@antv/l7-utils';
export default class TextureService {
  constructor(layer) {
    _defineProperty(this, "layer", void 0);
    _defineProperty(this, "rendererService", void 0);
    _defineProperty(this, "colorTexture", void 0);
    _defineProperty(this, "key", void 0);
    this.layer = layer;
    const container = this.layer.getContainer();
    this.rendererService = container.rendererService;
  }
  getColorTexture(colorRamp, domain) {
    // TODO 支持传入图片
    const currentkey = this.getTextureKey(colorRamp, domain);
    if (this.key === currentkey) {
      return this.colorTexture;
    } else {
      this.createColorTexture(colorRamp, domain);
    }
    this.key = currentkey;
    return this.colorTexture;
  }
  createColorTexture(colorRamp, domain) {
    const {
      createTexture2D
    } = this.rendererService;
    const imageData = this.getColorRampBar(colorRamp, domain);
    const texture = createTexture2D({
      data: new Uint8Array(imageData.data),
      width: imageData.width,
      height: imageData.height,
      flipY: false,
      unorm: true
    });
    this.colorTexture = texture;
    return texture;
  }
  setColorTexture(texture, colorRamp, domain) {
    this.key = this.getTextureKey(colorRamp, domain);
    this.colorTexture = texture;
  }
  destroy() {
    var _this$colorTexture;
    (_this$colorTexture = this.colorTexture) === null || _this$colorTexture === void 0 || _this$colorTexture.destroy();
  }
  getColorRampBar(colorRamp, domain) {
    switch (colorRamp.type) {
      case 'cat':
        return generateCatRamp(colorRamp);
      case 'quantize':
        return generateQuantizeRamp(colorRamp);
      case 'custom':
        return generateCustomRamp(colorRamp, domain);
      case 'linear':
        return generateLinearRamp(colorRamp, domain);
      default:
        return generateColorRamp(colorRamp);
    }
  }
  getTextureKey(colorRamp, domain) {
    var _colorRamp$positions;
    return `${colorRamp.colors.join('_')}_${colorRamp === null || colorRamp === void 0 || (_colorRamp$positions = colorRamp.positions) === null || _colorRamp$positions === void 0 ? void 0 : _colorRamp$positions.join('_')}_${colorRamp.type}_${domain === null || domain === void 0 ? void 0 : domain.join('_')}`;
  }
}