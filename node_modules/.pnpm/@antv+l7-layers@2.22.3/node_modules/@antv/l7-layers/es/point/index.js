import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import BaseLayer from "../core/BaseLayer";
import PointModels from "./models/index";
export default class PointLayer extends BaseLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "type", 'PointLayer');
    _defineProperty(this, "enableShaderEncodeStyles", ['stroke', 'offsets', 'opacity', 'rotation']);
    //4+2+1+1
    _defineProperty(this, "enableDataEncodeStyles", ['textOffset', 'textAnchor']);
    _defineProperty(this, "defaultSourceConfig", {
      data: [],
      options: {
        parser: {
          type: 'json',
          x: 'lng',
          y: 'lat'
        }
      }
    });
  }
  buildModels() {
    var _this = this;
    return _asyncToGenerator(function* () {
      const modelType = _this.getModelType();
      if (_this.layerModel) {
        _this.layerModel.clearModels();
      }
      _this.layerModel = new PointModels[modelType](_this);
      yield _this.initLayerModels();
    })();
  }
  rebuildModels() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      yield _this2.buildModels();
    })();
  }

  /**
   * 在未传入数据的时候判断点图层的 shape 类型
   * @returns
   */
  getModelTypeWillEmptyData() {
    if (this.shapeOption) {
      const {
        field,
        values
      } = this.shapeOption;
      const {
        shape2d
      } = this.getLayerConfig();
      const iconMap = this.iconService.getIconMap();
      if (field && (shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(field)) !== -1) {
        return 'fill';
      }
      if (values === 'text') {
        return 'text';
      }
      if (values && values instanceof Array) {
        for (const v of values) {
          if (typeof v === 'string' && iconMap.hasOwnProperty(v)) {
            return 'image';
          }
        }
      }
    }
    return 'normal';
  }
  getDefaultConfig() {
    const type = this.getModelType();
    const defaultConfig = {
      fillImage: {},
      normal: {
        blend: 'additive'
      },
      radar: {},
      simplePoint: {},
      fill: {
        blend: 'normal'
      },
      extrude: {},
      image: {},
      text: {
        blend: 'normal'
      },
      tile: {},
      tileText: {},
      earthFill: {},
      earthExtrude: {}
    };
    return defaultConfig[type];
  }
  getModelType() {
    //  2D、 3d、 shape、image、text、normal、
    const layerData = this.getEncodedData();
    const {
      shape2d,
      shape3d,
      billboard = true
    } = this.getLayerConfig();
    const iconMap = this.iconService.getIconMap();
    const item = layerData.find(fe => {
      return fe.hasOwnProperty('shape');
    });
    if (!item) {
      return this.getModelTypeWillEmptyData();
    } else {
      const shape = item.shape;
      if (shape === 'dot') {
        return 'normal';
      }
      if (shape === 'simple') {
        return 'simplePoint';
      }
      if (shape === 'radar') {
        return 'radar';
      }
      if (this.layerType === 'fillImage' || billboard === false) {
        return 'fillImage';
      }
      if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
        if (this.mapService.version === 'GLOBEL') {
          return 'earthFill';
        } else {
          return 'fill';
        }
      }
      if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
        if (this.mapService.version === 'GLOBEL') {
          return 'earthExtrude';
        } else {
          return 'extrude';
        }
      }
      if (iconMap.hasOwnProperty(shape)) {
        return 'image';
      }
      return 'text';
    }
  }
}