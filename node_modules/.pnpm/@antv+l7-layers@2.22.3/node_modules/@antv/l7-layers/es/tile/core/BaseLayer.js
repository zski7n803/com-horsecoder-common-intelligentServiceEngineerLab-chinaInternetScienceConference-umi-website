import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { lodashUtil } from '@antv/l7-utils';
import { TileLayerService } from "../service/TileLayerService";
import { TilePickService } from "../service/TilePickService";
import { getTileFactory } from "../tile";
import { ProxyFuncs } from "../utils/constants";
const {
  debounce
} = lodashUtil;
export default class BaseTileLayer {
  constructor(parent) {
    _defineProperty(this, "parent", void 0);
    _defineProperty(this, "tileLayerService", void 0);
    _defineProperty(this, "mapService", void 0);
    _defineProperty(this, "layerService", void 0);
    _defineProperty(this, "rendererService", void 0);
    _defineProperty(this, "pickingService", void 0);
    _defineProperty(this, "tilePickService", void 0);
    _defineProperty(this, "tilesetManager", void 0);
    // 瓦片数据管理器
    _defineProperty(this, "initedTileset", false);
    // 瓦片是否加载成功
    _defineProperty(this, "lastViewStates", void 0);
    _defineProperty(this, "mapchange", () => {
      var _this$tilesetManager;
      // 图层不可见时，不触发加载瓦片
      if (this.parent.isVisible() === false) {
        return;
      }
      const {
        latLonBounds,
        zoom
      } = this.getCurrentView();
      if (this.lastViewStates && this.lastViewStates.zoom === zoom && this.lastViewStates.latLonBounds.toString() === latLonBounds.toString()) {
        return;
      }
      this.lastViewStates = {
        zoom,
        latLonBounds
      };
      (_this$tilesetManager = this.tilesetManager) === null || _this$tilesetManager === void 0 || _this$tilesetManager.throttleUpdate(zoom, latLonBounds);
    });
    //  防抖操作
    _defineProperty(this, "viewchange", debounce(this.mapchange, 24));
    this.parent = parent;
    const container = this.parent.getContainer();
    this.rendererService = container.rendererService;
    this.layerService = container.layerService;
    this.mapService = container.mapService;
    this.pickingService = container.pickingService;

    // 初始化瓦片管理服务
    this.tileLayerService = new TileLayerService({
      rendererService: this.rendererService,
      layerService: this.layerService,
      parent
    });
    // 初始化拾取服务
    this.tilePickService = new TilePickService({
      tileLayerService: this.tileLayerService,
      layerService: this.layerService,
      parent
    });

    // 重置
    this.parent.setLayerPickService(this.tilePickService);
    this.proxy(parent);
    this.initTileSetManager();
  }
  initTileSetManager() {
    var _this$tilesetManager2;
    const source = this.parent.getSource();
    this.tilesetManager = source.tileset;
    if (!this.initedTileset) {
      this.bindTilesetEvent();
      this.initedTileset = true;
    }

    // 图层不可见时，不触发加载瓦片
    if (this.parent.isVisible() === false) {
      return;
    }
    const {
      latLonBounds,
      zoom
    } = this.getCurrentView();
    (_this$tilesetManager2 = this.tilesetManager) === null || _this$tilesetManager2 === void 0 || _this$tilesetManager2.update(zoom, latLonBounds);
  }
  getCurrentView() {
    const bounds = this.mapService.getBounds();
    const latLonBounds = [bounds[0][0], bounds[0][1], bounds[1][0], bounds[1][1]];
    const zoom = this.mapService.getZoom();
    return {
      latLonBounds,
      zoom
    };
  }
  bindTilesetEvent() {
    // 瓦片数据加载成功
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    this.tilesetManager.on('tile-loaded', tile => {
      // 将事件抛出，图层上可以监听使用
    });

    // 瓦片数据从缓存删除或被执行重新加载
    this.tilesetManager.on('tile-unload', tile => {
      // 将事件抛出，图层上可以监听使用
      this.tileUnLoad(tile);
    });

    // 瓦片数据加载失败
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    this.tilesetManager.on('tile-error', (error, tile) => {
      // 将事件抛出，图层上可以监听使用
      this.tileError(error);
    });

    // 瓦片显隐状态更新
    this.tilesetManager.on('tile-update', () => {
      this.tileUpdate();
    });

    // 地图视野发生改变
    this.mapService.on('zoomend', this.mapchange);
    this.mapService.on('moveend', this.viewchange);
  }
  render() {
    this.tileLayerService.render();
  }
  getLayers() {
    return this.tileLayerService.getLayers();
  }
  getTiles() {
    return this.tileLayerService.getTiles();
  }
  getTile(key) {
    return this.tileLayerService.getTile(key);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  tileLoaded(tile) {
    //
  }
  tileError(error) {
    console.warn('error:', error);
  }
  destroy() {
    var _this$tilesetManager3;
    this.mapService.off('zoomend', this.mapchange);
    this.mapService.off('moveend', this.viewchange);
    (_this$tilesetManager3 = this.tilesetManager) === null || _this$tilesetManager3 === void 0 || _this$tilesetManager3.destroy();
    this.tileLayerService.destroy();
  }
  // 重新加载
  reload() {
    var _this$tilesetManager4;
    // 瓦片重新加载
    this.tilesetManager.clear();
    const {
      latLonBounds,
      zoom
    } = this.getCurrentView();
    (_this$tilesetManager4 = this.tilesetManager) === null || _this$tilesetManager4 === void 0 || _this$tilesetManager4.update(zoom, latLonBounds);
  }
  tileUnLoad(tile) {
    this.tileLayerService.removeTile(tile.key);
  }
  tileUpdate() {
    var _this = this;
    return _asyncToGenerator(function* () {
      if (!_this.tilesetManager) {
        return;
      }
      const minZoom = _this.parent.getMinZoom();
      const maxZoom = _this.parent.getMaxZoom();
      const tiles = _this.tilesetManager.tiles.filter(tile => tile.isLoaded) // 过滤未加载完成的
      .filter(tile => tile.isVisibleChange) // 过滤未发生变化的
      .filter(tile => tile.data) //
      .filter(tile => tile.z >= minZoom && tile.z < maxZoom); // 过滤不可见见
      yield Promise.all(tiles.map( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* (tile) {
          // 未加载瓦片
          if (!_this.tileLayerService.hasTile(tile.key)) {
            const tileInstance = getTileFactory(_this.parent);
            const tileLayer = new tileInstance(tile, _this.parent);
            yield tileLayer.initTileLayer();
            _this.tilePickService.setPickState();
            if (tileLayer.getLayers().length !== 0) {
              _this.tileLayerService.addTile(tileLayer);
              _this.tileLayerService.updateTileVisible(tile);
              _this.layerService.reRender();
            }
          } else {
            // 已加载瓦片
            _this.tileLayerService.updateTileVisible(tile);
            _this.tilePickService.setPickState();
            _this.layerService.reRender();
          }
        });
        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }()));
      if (_this.tilesetManager.isLoaded) {
        // 将事件抛出，图层上可以使用瓦片
        _this.parent.emit('tiles-loaded', _this.tilesetManager.currentTiles);
      }
    })();
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setPickState(layers) {
    return;
  }
  pickRender(target) {
    this.tilePickService.pickRender(target);
  }
  selectFeature(pickedColors) {
    this.tilePickService.selectFeature(pickedColors);
  }
  highlightPickedFeature(pickedColors) {
    this.tilePickService.highlightPickedFeature(pickedColors);
  }

  /**
   * 实现 TileLayer 对子图层方法的代理
   * @param parent
   */
  proxy(parent) {
    ProxyFuncs.forEach(func => {
      // @ts-ignore
      const oldStyleFunc = parent[func].bind(parent);
      // @ts-ignore
      parent[func] = (...args) => {
        oldStyleFunc(...args);
        this.getLayers().map(child => {
          // @ts-ignore
          child[func](...args);
        });
        // Tip: 目前在更新 RasterData 的 colorTexture 的时候需要额外优化
        if (func === 'style') {
          this.getTiles().forEach(tile => tile.styleUpdate(...args));
        }
        return parent;
      };
    });
  }
}