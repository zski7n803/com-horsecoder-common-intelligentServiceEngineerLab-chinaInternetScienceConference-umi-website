import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import Tile from "./Tile";
import { getTileLayer } from "./util";
export default class VectorTile extends Tile {
  initTileLayer() {
    var _this = this;
    return _asyncToGenerator(function* () {
      const attributes = _this.parent.getLayerAttributeConfig();
      const layerOptions = _this.getLayerOptions();
      const vectorLayer = getTileLayer(_this.parent.type);
      const sourceOptions = _this.getSourceOption();
      if (!sourceOptions) {
        _this.isLoaded = true;
        _this.emit('loaded');
        return;
      }
      const layer = new vectorLayer(_objectSpread({}, layerOptions)).source(sourceOptions.data, sourceOptions.options);

      // 初始化数据映射
      Object.keys(attributes).forEach(type => {
        var _attributes$attr, _attributes$attr2;
        const attr = type;
        // @ts-ignore
        layer[attr]((_attributes$attr = attributes[attr]) === null || _attributes$attr === void 0 ? void 0 : _attributes$attr.field, (_attributes$attr2 = attributes[attr]) === null || _attributes$attr2 === void 0 ? void 0 : _attributes$attr2.values);
      });
      yield _this.addLayer(layer);
      if (layerOptions.tileMask) {
        // 瓦片数据裁剪
        yield _this.addTileMask();
      }
      _this.setLayerMinMaxZoom(layer);
      _this.isLoaded = true;
      _this.emit('loaded');
    })();
  }
  getSourceOption() {
    const rawSource = this.parent.getSource();
    const {
      sourceLayer = 'defaultLayer',
      featureId = 'id'
    } = this.parent.getLayerConfig();
    const features = this.getFeatures(sourceLayer);
    return {
      data: {
        type: 'FeatureCollection',
        features
      },
      options: {
        parser: {
          type: 'geojson',
          featureId
        },
        transforms: rawSource.transforms
      }
    };
  }
  setLayerMinMaxZoom(layer) {
    // 文本图层设置，可见范围
    if (layer.getModelType() === 'text') {
      layer.updateLayerConfig({
        maxZoom: this.z + 1,
        minZoom: this.z - 1
      });
    }
  }
  // 获取瓦片数据

  getFeatures(sourceLayer) {
    const source = this.sourceTile.data;
    return source.getTileData(sourceLayer);
  }

  /**
   * 在一个 Tile 中可能存在一个相同 ID 的 feature
   * @param id
   * @returns
   */
  getFeatureById(id) {
    const layer = this.getMainLayer();
    if (!layer) {
      return [];
    }
    const res = layer.getSource().data.dataArray.filter(d => d._id === id);
    return res;
  }
}