import type { IModel, IModelUniform, ITexture2D } from '@antv/l7-core';
import BaseModel from '../../core/BaseModel';
export default class PlaneModel extends BaseModel {
    protected get attributeLocation(): {
        readonly POSITION: 0;
        readonly POSITION_64LOW: 1;
        readonly COLOR: 2;
        readonly PICKING_COLOR: 3;
        readonly STROKE: 4;
        readonly OPACITY: 5;
        readonly OFFSETS: 6;
        readonly ROTATION: 7;
        readonly MAX: 8;
    } & Record<string, number> & {
        MAX: 8;
        UV: number;
    };
    protected texture: ITexture2D;
    protected terrainImage: HTMLImageElement;
    protected terrainImageLoaded: boolean;
    protected mapTexture: string | undefined;
    initPlane(width?: number, height?: number, widthSegments?: number, heightSegments?: number, lng?: number, lat?: number): {
        indices: number[];
        positions: number[];
    };
    planeGeometryTriangulation: () => {
        vertices: number[];
        indices: number[];
        size: number;
    };
    getUninforms(): IModelUniform;
    protected getCommonUniformsInfo(): {
        uniformsArray: number[];
        uniformsLength: number;
        uniformsOption: {
            [key: string]: any;
        };
    };
    clearModels(): void;
    initModels(): Promise<IModel[]>;
    buildModels(): Promise<IModel[]>;
    createModelData(options?: any): {
        attributes: {
            [attributeName: string]: import("@antv/l7-core").IAttribute;
        };
        elements: import("@antv/l7-core").IElements;
        count: number | null;
    };
    updateTexture(mapTexture: string | undefined): void;
    protected getImageData(img: HTMLImageElement): ImageData;
    protected translateVertex(positions: number[], indices: number[], image: HTMLImageElement, widthSegments: number, heightSegments: number, rgb2height: (r: number, g: number, b: number) => number): {
        vertices: number[];
        indices: number[];
        size: number;
    };
    private loadTerrainImage;
    protected registerBuiltinAttributes(): void;
}
