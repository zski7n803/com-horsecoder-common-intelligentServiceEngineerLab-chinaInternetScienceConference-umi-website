"use strict";
/**
 * preset plugins for umi3
 */
Object.defineProperty(exports, "__esModule", { value: true });
const middlewares_1 = require("../webpack/middlewares");
function inspectorPlugin(api) {
    const inspectorConfig = api.userConfig.inspectorConfig;
    api.describe({
        key: 'inspectorConfig',
        config: {
            schema(joi) {
                return joi.object();
            },
        },
        enableBy: api.EnableBy.register,
    });
    // umi4
    // https://umijs.org/docs/api/plugin-api#addbeforebabelplugins
    // @ts-ignore
    if (api.addBeforeBabelPlugins) {
        // @ts-ignore
        api.addBeforeBabelPlugins(() => {
            var _a;
            return [
                [
                    require.resolve('react-dev-inspector/plugins/babel'),
                    {
                        cwd: inspectorConfig === null || inspectorConfig === void 0 ? void 0 : inspectorConfig.cwd,
                        excludes: [
                            /\.umi(-production)?\//,
                            ...(_a = inspectorConfig === null || inspectorConfig === void 0 ? void 0 : inspectorConfig.excludes) !== null && _a !== void 0 ? _a : [],
                        ],
                    },
                ],
            ];
        });
    }
    else {
        // umi3
        api.modifyBabelOpts((babelOptions) => {
            var _a;
            babelOptions.plugins.unshift([
                'react-dev-inspector/plugins/babel',
                {
                    cwd: inspectorConfig === null || inspectorConfig === void 0 ? void 0 : inspectorConfig.cwd,
                    excludes: [
                        /\.umi(-production)?\//,
                        ...(_a = inspectorConfig === null || inspectorConfig === void 0 ? void 0 : inspectorConfig.excludes) !== null && _a !== void 0 ? _a : [],
                    ],
                },
            ]);
            return babelOptions;
        });
    }
    // umi4 & umi3
    // https://umijs.org/docs/api/plugin-api#addbeforemiddlewares
    if (api.addBeforeMiddlewares) {
        api.addBeforeMiddlewares(middlewares_1.createLaunchEditorMiddleware);
    }
    else {
        // legacy and typo in umi3
        api.addBeforeMiddewares(middlewares_1.createLaunchEditorMiddleware);
    }
}
exports.default = inspectorPlugin;
