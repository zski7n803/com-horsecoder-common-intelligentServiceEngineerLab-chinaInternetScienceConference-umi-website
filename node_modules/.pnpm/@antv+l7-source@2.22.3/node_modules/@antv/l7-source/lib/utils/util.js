var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/util.ts
var util_exports = {};
__export(util_exports, {
  extentToCoord: () => extentToCoord,
  geojsonRewind: () => geojsonRewind,
  getColumn: () => getColumn,
  isNumberArray: () => isNumberArray,
  isRasterFileData: () => isRasterFileData,
  isRasterFileDataArray: () => isRasterFileDataArray
});
module.exports = __toCommonJS(util_exports);
var import_l7_utils = require("@antv/l7-utils");
var import_geojson_rewind = __toESM(require("@mapbox/geojson-rewind"));
function getColumn(data, columnName) {
  return data.map((item) => {
    return item[columnName] * 1;
  });
}
function isRasterFileData(data) {
  if (data === void 0) {
    return false;
  }
  if (!Array.isArray(data) && data.data !== void 0) {
    return true;
  } else {
    return false;
  }
}
function isRasterFileDataArray(data) {
  if (Array.isArray(data)) {
    if (data.length === 0) {
      return false;
    }
    if (isRasterFileData(data[0])) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}
function isNumberArray(data) {
  if (Array.isArray(data)) {
    if (data.length === 0) {
      return true;
    }
    if (typeof data[0] === "number") {
      return true;
    } else {
      return false;
    }
  }
  return false;
}
function geojsonRewind(geojson) {
  const data = Object.isFrozen(geojson) ? import_l7_utils.lodashUtil.cloneDeep(geojson) : geojson;
  (0, import_geojson_rewind.default)(data, true);
  return data;
}
function extentToCoord(coord, extent) {
  return coord ? coord : [
    [extent[0], extent[3]],
    [extent[2], extent[3]],
    [extent[2], extent[1]],
    [extent[0], extent[1]]
  ];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extentToCoord,
  geojsonRewind,
  getColumn,
  isNumberArray,
  isRasterFileData,
  isRasterFileDataArray
});
