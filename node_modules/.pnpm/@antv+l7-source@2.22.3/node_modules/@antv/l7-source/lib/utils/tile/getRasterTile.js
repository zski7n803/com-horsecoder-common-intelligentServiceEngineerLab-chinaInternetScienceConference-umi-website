var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/tile/getRasterTile.ts
var getRasterTile_exports = {};
__export(getRasterTile_exports, {
  defaultFormat: () => defaultFormat,
  getTileBuffer: () => getTileBuffer,
  getTileImage: () => getTileImage
});
module.exports = __toCommonJS(getRasterTile_exports);
var import_l7_utils = require("@antv/l7-utils");
var import_getRasterData = require("./getRasterData");
var import_request = require("./request");
var getTileBuffer = (url, tileParams, tile, cfg) => __async(void 0, null, function* () {
  const { format = defaultFormat, operation, requestParameters = {} } = cfg;
  const reqParams = __spreadProps(__spreadValues({}, requestParameters), {
    url: (0, import_request.getTileUrl)(url, tileParams)
    // getTileUrl 将原始的 url 路径进行转化（多服务器）
  });
  return new Promise((resolve, reject) => {
    (0, import_getRasterData.getRasterFile)(
      tile,
      reqParams,
      (err, img) => {
        if (err) {
          reject(err);
        } else if (img) {
          resolve(img);
        }
      },
      format,
      operation
    );
  });
});
var getTileImage = (url, tileParams, tile, cfg) => __async(void 0, null, function* () {
  let imageUrl;
  const templateUrl = Array.isArray(url) ? url[0] : url;
  if (cfg.wmtsOptions) {
    const getWMTSURLFromTemplateNew = (cfg == null ? void 0 : cfg.getURLFromTemplate) || import_l7_utils.getWMTSURLFromTemplate;
    imageUrl = getWMTSURLFromTemplateNew(templateUrl, __spreadValues(__spreadValues({}, tileParams), cfg.wmtsOptions));
  } else {
    const getURLFromTemplateNew = (cfg == null ? void 0 : cfg.getURLFromTemplate) || import_l7_utils.getURLFromTemplate;
    imageUrl = getURLFromTemplateNew(templateUrl, tileParams);
  }
  return new Promise((resolve, reject) => {
    var _a;
    const xhr = (0, import_l7_utils.getImage)(
      __spreadProps(__spreadValues({}, cfg == null ? void 0 : cfg.requestParameters), {
        url: imageUrl,
        type: ((_a = cfg == null ? void 0 : cfg.requestParameters) == null ? void 0 : _a.type) || "arrayBuffer"
      }),
      (err, img) => {
        if (err) {
          reject(err);
        } else if (img) {
          resolve(img);
        }
      },
      cfg.transformResponse
    );
    tile.xhrCancel = () => xhr.cancel();
  });
});
var defaultFormat = () => {
  return {
    rasterData: new Uint8Array([0]),
    width: 1,
    height: 1
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defaultFormat,
  getTileBuffer,
  getTileImage
});
