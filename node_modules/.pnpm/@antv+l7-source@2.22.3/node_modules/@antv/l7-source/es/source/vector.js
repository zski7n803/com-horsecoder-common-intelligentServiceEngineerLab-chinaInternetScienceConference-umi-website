var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/source/vector.ts
import { VectorTile } from "@mapbox/vector-tile";
import Protobuf from "pbf";
var VectorSource = class {
  constructor(data, x, y, z) {
    this.vectorLayerCache = {};
    this.x = x;
    this.y = y;
    this.z = z;
    this.vectorTile = new VectorTile(new Protobuf(data));
  }
  getTileData(sourceLayer) {
    if (!sourceLayer || !this.vectorTile.layers[sourceLayer]) {
      return [];
    }
    if (this.vectorLayerCache[sourceLayer]) {
      return this.vectorLayerCache[sourceLayer];
    }
    const vectorTile = this.vectorTile.layers[sourceLayer];
    if (Array.isArray(vectorTile.features)) {
      this.vectorLayerCache[sourceLayer] = vectorTile.features;
      return vectorTile.features;
    }
    const features = [];
    for (let i = 0; i < vectorTile.length; i++) {
      const vectorTileFeature = vectorTile.feature(i);
      const feature = vectorTileFeature.toGeoJSON(this.x, this.y, this.z);
      features.push(__spreadProps(__spreadValues({}, feature), {
        properties: __spreadValues({
          id: feature.id
        }, feature.properties)
      }));
    }
    this.vectorLayerCache[sourceLayer] = features;
    return features;
  }
  getFeatureById() {
    throw new Error("Method not implemented.");
  }
};
export {
  VectorSource as default
};
