// src/utils/bandOperation/operationSchema.ts
var operationsSchema = {
  nd: {
    type: "operation",
    expression: [
      "/",
      ["-", ["band", 1], ["band", 0]],
      // R > NIR
      ["+", ["band", 1], ["band", 0]]
    ]
  },
  rgb: {
    type: "function",
    method: strethRgb2minMax
  }
};
function strethRgb2minMax(bandsData, options) {
  const channelR = bandsData[0].rasterData;
  const channelG = bandsData[1].rasterData;
  const channelB = bandsData[2].rasterData;
  const data = [];
  const [low, high] = (options == null ? void 0 : options.countCut) || [2, 98];
  const minMaxR = (options == null ? void 0 : options.RMinMax) || percentile(channelR, low, high);
  const minMaxG = (options == null ? void 0 : options.GMinMax) || percentile(channelG, low, high);
  const minMaxB = (options == null ? void 0 : options.BMinMax) || percentile(channelB, low, high);
  for (let i = 0; i < channelR.length; i++) {
    data.push(Math.max(0, channelR[i] - minMaxR[0]));
    data.push(Math.max(0, channelG[i] - minMaxG[0]));
    data.push(Math.max(0, channelB[i] - minMaxB[0]));
  }
  return {
    rasterData: data,
    rMinMax: minMaxR,
    gMinMax: minMaxG,
    bMinMax: minMaxB
  };
}
function percentile(data, minPercent, maxPercent) {
  const sortData = data.slice().sort((a, b) => a - b);
  const dataLength = sortData.length;
  const min = sortData[Math.ceil(dataLength * minPercent / 100)];
  const max = sortData[Math.ceil(dataLength * maxPercent / 100)];
  return [min, max];
}
export {
  operationsSchema,
  percentile
};
