var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/tile/getCustomData.ts
import { formatImage } from "@antv/l7-utils";
import { processRasterData } from "../bandOperation/bands";
var getCustomData = (tile, getCustomDataFunc, rasterFormat, operation) => __async(void 0, null, function* () {
  return new Promise((resolve, reject) => {
    getCustomDataFunc(
      {
        x: tile.x,
        y: tile.y,
        z: tile.z
      },
      (err, data) => {
        if (err || data.length === 0) {
          reject(err);
          return;
        }
        if (data) {
          processRasterData(
            [{ data, bands: [0] }],
            rasterFormat,
            operation,
            (error, img) => {
              if (error) {
                reject(error);
              } else if (img) {
                resolve(img);
              }
            }
          );
        }
      }
    );
  });
});
var getCustomImageData = (tile, getCustomDataFunc) => __async(void 0, null, function* () {
  return new Promise((resolve, reject) => {
    getCustomDataFunc(
      {
        x: tile.x,
        y: tile.y,
        z: tile.z
      },
      (err, data) => {
        if (err || !data) {
          reject(err);
          return;
        }
        if (data instanceof ArrayBuffer) {
          formatImage(data, (error, image) => {
            if (error) {
              reject(error);
            }
            resolve(image);
          });
        } else if (data instanceof HTMLImageElement) {
          resolve(data);
        } else {
          reject(err);
        }
      }
    );
  });
});
export {
  getCustomData,
  getCustomImageData
};
