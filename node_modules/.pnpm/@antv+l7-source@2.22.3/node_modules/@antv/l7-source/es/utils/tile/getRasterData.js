var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/tile/getRasterData.ts
import { getArrayBuffer, makeXMLHttpRequestPromise } from "@antv/l7-utils";
import { processRasterData } from "../bandOperation/bands";
import { bindCancel, getTileBandParams } from "./request";
var getRasterFile = (tile, requestParameters, callback, rasterFormat, operation) => __async(void 0, null, function* () {
  const tileBandParams = getTileBandParams(requestParameters.url);
  if (tileBandParams.length > 1) {
    const { rasterFiles, xhrList, errList } = yield getMultiArrayBuffer(
      tileBandParams,
      requestParameters
    );
    bindCancel(tile, xhrList);
    if (errList.length > 0) {
      callback(errList, null);
      return;
    }
    processRasterData(rasterFiles, rasterFormat, operation, callback);
  } else {
    const xhr = getArrayBuffer(requestParameters, (err, imgData) => {
      if (err) {
        callback(err);
      } else if (imgData) {
        const rasterFiles = [
          {
            data: imgData,
            bands: tileBandParams[0].bands
          }
        ];
        processRasterData(rasterFiles, rasterFormat, operation, callback);
      }
    });
    bindCancel(tile, [xhr]);
  }
});
function getMultiArrayBuffer(tileBandParams, requestParameters) {
  return __async(this, null, function* () {
    const rasterFiles = [];
    const xhrList = [];
    const errList = [];
    for (let i = 0; i < tileBandParams.length; i++) {
      const tileBandParam = tileBandParams[i];
      const params = __spreadProps(__spreadValues({}, requestParameters), {
        url: tileBandParam.url
      });
      const bands = tileBandParam.bands;
      const { err, data, xhr } = yield makeXMLHttpRequestPromise(__spreadProps(__spreadValues({}, params), {
        type: "arrayBuffer"
      }));
      if (err) {
        errList.push(err);
      }
      xhrList.push(xhr);
      rasterFiles.push({
        data,
        bands
      });
    }
    return { rasterFiles, xhrList, errList };
  });
}
export {
  getRasterFile
};
