// src/utils/bandOperation/math.ts
function mathematical(symbol, n1, n2) {
  switch (symbol) {
    case "+":
      return n1 + n2;
    case "-":
      return n1 - n2;
    case "*":
      return n1 * n2;
    case "/":
      return n1 / n2;
    case "%":
      return n1 % n2;
    case "^":
      return Math.pow(n1, n2);
    case "abs":
      return Math.abs(n1);
    case "floor":
      return Math.floor(n1);
    case "round":
      return Math.round(n1);
    case "ceil":
      return Math.ceil(n1);
    case "sin":
      return Math.sin(n1);
    case "cos":
      return Math.cos(n1);
    case "atan":
      return n2 === -1 ? Math.atan(n1) : Math.atan2(n1, n2);
    case "min":
      return Math.min(n1, n2);
    case "max":
      return Math.max(n1, n2);
    case "log10":
      return Math.log(n1);
    case "log2":
      return Math.log2(n1);
    default:
      console.warn("Calculate symbol err! Return default 0");
      return 0;
  }
}
function calculate(express, bandsData) {
  const { width, height } = bandsData[0];
  const dataArray = bandsData.map((band) => band.rasterData);
  const length = width * height;
  const rasterData = [];
  const originExp = JSON.stringify(express);
  for (let i = 0; i < length; i++) {
    const exp = JSON.parse(originExp);
    const expResult = spellExpress(exp, dataArray, i);
    if (typeof expResult === "number") {
      rasterData.push(expResult);
    } else {
      const result = calculateExpress(exp);
      rasterData.push(result);
    }
  }
  return rasterData;
}
function spellExpress(express, dataArray, index) {
  if (express.length === 2 && express[0] === "band" && typeof express[1] === "number") {
    try {
      return dataArray[express[1]][index];
    } catch (err) {
      console.warn("Raster Data err!");
      return 0;
    }
  }
  express.map((e, i) => {
    if (Array.isArray(e) && e.length > 0) {
      switch (e[0]) {
        case "band":
          try {
            express[i] = dataArray[e[1]][index];
          } catch (err) {
            console.warn("Raster Data err!");
            express[i] = 0;
          }
          break;
        default:
          spellExpress(e, dataArray, index);
      }
    }
  });
}
function formatExpress(express) {
  const [symbol1, symbol2 = -1, symbol3 = -1] = express;
  if (symbol1 === void 0) {
    console.warn("Express err!");
    return ["+", 0, 0];
  }
  const symbol = symbol1.replace(/\s+/g, "");
  return [symbol, symbol2, symbol3];
}
function calculateExpress(express) {
  const formatExp = formatExpress(express);
  const str = formatExp[0];
  let left = formatExp[1];
  let right = formatExp[2];
  if (Array.isArray(left)) {
    left = calculateExpress(express[1]);
  }
  if (Array.isArray(right)) {
    right = calculateExpress(express[2]);
  }
  return mathematical(str, left, right);
}
export {
  calculate,
  calculateExpress,
  formatExpress,
  mathematical,
  spellExpress
};
