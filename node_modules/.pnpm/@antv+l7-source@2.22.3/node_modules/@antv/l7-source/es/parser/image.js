var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/parser/image.ts
import { getImage, isImageBitmap } from "@antv/l7-utils";
import { extentToCoord } from "../utils/util";
function image(data, cfg) {
  const {
    extent = [121.168, 30.2828, 121.384, 30.4219],
    coordinates,
    requestParameters = {}
  } = cfg;
  const images = new Promise((resolve) => {
    if (data instanceof HTMLImageElement || isImageBitmap(data)) {
      resolve([data]);
    } else {
      loadData(data, requestParameters, (res) => {
        resolve(res);
      });
    }
  });
  const imageCoord = extentToCoord(coordinates, extent);
  const resultData = {
    originData: data,
    images,
    _id: 1,
    dataArray: [
      {
        _id: 0,
        coordinates: imageCoord
      }
    ]
  };
  return resultData;
}
function loadData(url, requestParameters, done) {
  const imageDatas = [];
  if (typeof url === "string") {
    getImage(__spreadProps(__spreadValues({}, requestParameters), { url }), (err, img) => {
      if (img) {
        imageDatas.push(img);
        done(imageDatas);
      }
    });
  } else {
    const imageCount = url.length;
    let imageindex = 0;
    url.forEach((item) => {
      getImage(__spreadProps(__spreadValues({}, requestParameters), { url: item }), (err, img) => {
        imageindex++;
        if (img) {
          imageDatas.push(img);
        }
        if (imageindex === imageCount) {
          done(imageDatas);
        }
      });
    });
  }
  return image;
}
export {
  image as default
};
