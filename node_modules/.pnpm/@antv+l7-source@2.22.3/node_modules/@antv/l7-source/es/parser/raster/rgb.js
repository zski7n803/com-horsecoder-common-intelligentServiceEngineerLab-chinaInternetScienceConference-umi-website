var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/parser/raster/rgb.ts
import { percentile } from "../../utils/bandOperation/operationSchema";
import { extentToCoord } from "../../utils/util";
function rasterRgb(data, cfg) {
  const _a = cfg, { extent, coordinates, width, height } = _a, options = __objRest(_a, ["extent", "coordinates", "width", "height"]);
  if (data.length < 3) {
    console.warn("RGB解析需要三个波段的数据");
  }
  const [r, g, b] = options.bands || [0, 1, 2];
  const bandsData = [data[r], data[g], data[b]];
  const rgbdata = [];
  const [low, high] = (options == null ? void 0 : options.countCut) || [2, 98];
  const minMaxR = (options == null ? void 0 : options.RMinMax) || percentile(bandsData[0], low, high);
  const minMaxG = (options == null ? void 0 : options.GMinMax) || percentile(bandsData[1], low, high);
  const minMaxB = (options == null ? void 0 : options.BMinMax) || percentile(bandsData[2], low, high);
  for (let i = 0; i < bandsData[0].length; i++) {
    rgbdata.push(Math.max(0, bandsData[0][i] - minMaxR[0]));
    rgbdata.push(Math.max(0, bandsData[1][i] - minMaxG[0]));
    rgbdata.push(Math.max(0, bandsData[2][i] - minMaxB[0]));
  }
  const imageCoord = extentToCoord(coordinates, extent);
  const resultData = {
    _id: 1,
    dataArray: [
      __spreadProps(__spreadValues({
        _id: 1,
        data: rgbdata,
        width,
        height,
        rMinMax: minMaxR,
        gMinMax: minMaxG,
        bMinMax: minMaxB
      }, options), {
        coordinates: imageCoord
      })
    ]
  };
  return resultData;
}
export {
  rasterRgb as default
};
