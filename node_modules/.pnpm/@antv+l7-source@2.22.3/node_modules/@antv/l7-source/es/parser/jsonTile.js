var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/parser/jsonTile.ts
import { getData, getURLFromTemplate } from "@antv/l7-utils";
import VtSource from "../source/geojsonvt";
var getVectorTile = (url, tile, requestParameters, getCustomData) => __async(void 0, null, function* () {
  const params = { x: tile.x, y: tile.y, z: tile.z };
  const tileUrl = getURLFromTemplate(url, params);
  return new Promise((resolve) => {
    if (getCustomData) {
      getCustomData(params, (err, data) => {
        if (err || !data) {
          const vectorTile = {
            layers: { defaultLayer: { features: [] } }
          };
          const vectorSource = new VtSource(vectorTile, tile.x, tile.y, tile.z);
          resolve(vectorSource);
        } else {
          const vectorTile = {
            layers: { defaultLayer: { features: data.features } }
          };
          const vectorSource = new VtSource(vectorTile, tile.x, tile.y, tile.z);
          resolve(vectorSource);
        }
      });
    } else {
      getData(
        __spreadProps(__spreadValues({}, requestParameters), {
          url: tileUrl
        }),
        (err, data) => {
          if (err || !data) {
            const vectorTile = {
              layers: {
                defaultLayer: {
                  features: []
                }
              }
            };
            const vectorSource = new VtSource(vectorTile, tile.x, tile.y, tile.z);
            resolve(vectorSource);
          } else {
            const json = JSON.parse(data);
            const vectorTile = {
              layers: {
                defaultLayer: {
                  features: json
                }
              }
            };
            const vectorSource = new VtSource(vectorTile, tile.x, tile.y, tile.z);
            resolve(vectorSource);
          }
        }
      );
    }
  });
});
function jsonTile(url, cfg) {
  const getTileData = (_, tile) => {
    return getVectorTile(url, tile, cfg == null ? void 0 : cfg.requestParameters, cfg.getCustomData);
  };
  const tilesetOptions = __spreadProps(__spreadValues({}, cfg), {
    getTileData
  });
  return {
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
export {
  jsonTile as default
};
