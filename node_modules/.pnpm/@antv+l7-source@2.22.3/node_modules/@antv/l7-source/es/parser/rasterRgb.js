var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/parser/rasterRgb.ts
import { bandsOperation } from "../utils/bandOperation/bands";
import { extentToCoord, isNumberArray } from "../utils/util";
function rasterRgb(data, cfg) {
  const _a = cfg, { extent, coordinates, min, max, width, height, format, operation } = _a, rest = __objRest(_a, ["extent", "coordinates", "min", "max", "width", "height", "format", "operation"]);
  let bandData;
  if (format === void 0 || isNumberArray(data)) {
    bandData = Array.from(data);
  } else {
    const imageDataList = Array.isArray(data) ? data : [data];
    bandData = bandsOperation(imageDataList, format, operation);
  }
  const imageCoord = extentToCoord(coordinates, extent);
  const resultData = {
    _id: 1,
    dataArray: [
      __spreadProps(__spreadValues({
        _id: 1,
        data: bandData,
        width,
        height
      }, rest), {
        min,
        max,
        coordinates: imageCoord
      })
    ]
  };
  return resultData;
}
export {
  rasterRgb as default
};
