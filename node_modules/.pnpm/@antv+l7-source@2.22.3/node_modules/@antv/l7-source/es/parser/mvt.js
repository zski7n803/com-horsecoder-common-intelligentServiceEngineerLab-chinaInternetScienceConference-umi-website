var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/parser/mvt.ts
import { getArrayBuffer, getURLFromTemplate } from "@antv/l7-utils";
import VectorSource from "../source/vector";
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0,
  warp: true
};
var getVectorTile = (url, tileParams, tile, requestParameters, getCustomData) => __async(void 0, null, function* () {
  const tileUrl = getURLFromTemplate(url, tileParams);
  return new Promise((resolve) => {
    if (getCustomData) {
      getCustomData(
        {
          x: tile.x,
          y: tile.y,
          z: tile.z
        },
        (err, data) => {
          if (err || !data) {
            resolve(void 0);
          } else {
            const vectorSource = new VectorSource(data, tile.x, tile.y, tile.z);
            resolve(vectorSource);
          }
        }
      );
    } else {
      const xhr = getArrayBuffer(
        __spreadProps(__spreadValues({}, requestParameters), {
          url: tileUrl
        }),
        (err, data) => {
          if (err || !data) {
            resolve(void 0);
          } else {
            const vectorSource = new VectorSource(data, tile.x, tile.y, tile.z);
            resolve(vectorSource);
          }
        }
      );
      tile.xhrCancel = () => xhr.cancel();
    }
  });
});
function mapboxVectorTile(data, cfg) {
  const url = Array.isArray(data) ? data[0] : data;
  const getTileData = (tileParams, tile) => getVectorTile(url, tileParams, tile, cfg == null ? void 0 : cfg.requestParameters, cfg == null ? void 0 : cfg.getCustomData);
  const tilesetOptions = __spreadProps(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), cfg), {
    getTileData
  });
  return {
    data: url,
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
export {
  mapboxVectorTile as default
};
