var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/parser/testTile.ts
var DEFAULT_CONFIG = {
  tileSize: 256,
  minZoom: 0,
  maxZoom: Infinity,
  zoomOffset: 0
};
var getVectorTile = (tile) => __async(void 0, null, function* () {
  return new Promise((resolve) => {
    const [minLng, minLat, maxLng, maxLat] = tile.bounds;
    const vectorTile = {
      layers: {
        // Tip: fixed SourceLayer Name
        testTile: {
          features: [
            {
              type: "Feature",
              properties: {
                key: tile.x + "/" + tile.y + "/" + tile.z,
                x: (minLng + maxLng) / 2,
                y: (minLat + maxLat) / 2
              },
              geometry: {
                type: "LineString",
                coordinates: [
                  [maxLng, maxLat],
                  [maxLng, minLat],
                  [minLng, minLat],
                  [minLng, minLat]
                ]
              }
            }
          ]
        }
      }
    };
    resolve(vectorTile);
  });
});
function mapboxVectorTile(data, cfg) {
  const getTileData = (tile) => getVectorTile(tile);
  const tilesetOptions = __spreadProps(__spreadValues(__spreadValues({}, DEFAULT_CONFIG), cfg), {
    getTileData
  });
  return {
    data,
    dataArray: [],
    tilesetOptions,
    isTile: true
  };
}
export {
  mapboxVectorTile as default
};
