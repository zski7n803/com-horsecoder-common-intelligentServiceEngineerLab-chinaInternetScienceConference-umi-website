var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/parser/json.ts
import { getCoords } from "@turf/invariant";
import { flattenEach } from "@turf/meta";
import { geojsonRewind } from "../utils/util";
function json(data, cfg) {
  const { x, y, x1, y1, coordinates, geometry } = cfg;
  const resultData = [];
  if (!Array.isArray(data)) {
    return {
      dataArray: []
    };
  }
  if (geometry) {
    data.filter((item) => {
      return item[geometry] && item[geometry].type && item[geometry].coordinates && item[geometry].coordinates.length > 0;
    }).forEach((col, index) => {
      const rewindGeometry = geojsonRewind(col[geometry]);
      flattenEach(rewindGeometry, (currentFeature) => {
        const coord = getCoords(currentFeature);
        const dataItem = __spreadProps(__spreadValues({}, col), {
          _id: index,
          coordinates: coord
        });
        resultData.push(dataItem);
      });
    });
    return {
      dataArray: resultData
    };
  }
  for (let featureIndex = 0; featureIndex < data.length; featureIndex++) {
    const col = data[featureIndex];
    let coords = [];
    if (coordinates) {
      let type = "Polygon";
      if (!Array.isArray(coordinates[0])) {
        type = "Point";
      }
      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {
        type = "LineString";
      }
      const rewindGeometry = geojsonRewind({
        type,
        coordinates: col[coordinates]
      });
      coords = rewindGeometry.coordinates;
    } else if (x && y && x1 && y1) {
      const from = [parseFloat(col[x]), parseFloat(col[y])];
      const to = [parseFloat(col[x1]), parseFloat(col[y1])];
      coords = [from, to];
    } else if (x && y) {
      coords = [parseFloat(col[x]), parseFloat(col[y])];
    }
    const dataItem = __spreadProps(__spreadValues({}, col), {
      _id: featureIndex,
      coordinates: coords
    });
    resultData.push(dataItem);
  }
  return {
    dataArray: resultData
  };
}
export {
  json as default
};
