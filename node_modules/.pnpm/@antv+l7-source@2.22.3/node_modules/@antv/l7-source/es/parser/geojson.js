var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/parser/geojson.ts
import { getCoords } from "@turf/invariant";
import { flattenEach } from "@turf/meta";
import { geojsonRewind } from "../utils/util";
function djb2hash(field) {
  const str = field.toString();
  let hash = 5381;
  let i = str.length;
  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }
  return hash >>> 0;
}
function getFeatureID(feature, key) {
  if (key === void 0) {
    return null;
  }
  if (typeof (feature.properties[key] * 1) === "number") {
    return feature.properties[key] * 1;
  }
  if (feature.properties && feature.properties[key]) {
    return djb2hash(feature.properties[key] + "") % 1000019;
  }
  return null;
}
function geoJSON(data, cfg) {
  const resultData = [];
  const featureKeys = {};
  if (!data.features) {
    data.features = [];
    return {
      dataArray: []
    };
  }
  data.features = data.features.filter((item) => {
    const geometry = item.geometry;
    return item != null && geometry && geometry.type && geometry.coordinates && geometry.coordinates.length > 0;
  });
  data = geojsonRewind(data);
  if (data.features.length === 0) {
    return {
      dataArray: [],
      featureKeys
    };
  }
  flattenEach(data, (currentFeature, featureIndex) => {
    let featureId = getFeatureID(currentFeature, cfg == null ? void 0 : cfg.featureId);
    if (featureId === null) {
      featureId = featureIndex;
    }
    const sortedID = featureId;
    const coord = getCoords(currentFeature);
    const dataItem = __spreadProps(__spreadValues({}, currentFeature.properties), {
      coordinates: coord,
      _id: sortedID
    });
    resultData.push(dataItem);
  });
  return {
    dataArray: resultData,
    featureKeys
  };
}
export {
  geoJSON as default
};
