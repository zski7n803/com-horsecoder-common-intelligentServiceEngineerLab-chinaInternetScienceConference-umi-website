import { DOM } from "../util/dom";
import { DragHandler } from "./drag_handler";
import { MouseMoveStateManager } from "./drag_move_state_manager";

/**
 * `MousePanHandler` allows the user to pan the map by clicking and dragging
 */

/**
 * `MouseRotateHandler` allows the user to rotate the map by clicking and dragging
 */

/**
 * `MousePitchHandler` allows the user to zoom the map by pitching
 */

const LEFT_BUTTON = 0;
const RIGHT_BUTTON = 2;
const assignEvents = handler => {
  handler.mousedown = handler.dragStart;
  handler.mousemoveWindow = handler.dragMove;
  handler.mouseup = handler.dragEnd;
  handler.contextmenu = e => {
    e.preventDefault();
  };
};
export const generateMousePanHandler = ({
  enable,
  clickTolerance
}) => {
  const mouseMoveStateManager = new MouseMoveStateManager({
    checkCorrectEvent: e => DOM.mouseButton(e) === LEFT_BUTTON && !e.ctrlKey
  });
  return new DragHandler({
    clickTolerance,
    move: (lastPoint, point) => ({
      around: point,
      panDelta: point.sub(lastPoint)
    }),
    activateOnStart: true,
    moveStateManager: mouseMoveStateManager,
    enable,
    assignEvents
  });
};
export const generateMouseRotationHandler = ({
  enable,
  clickTolerance,
  bearingDegreesPerPixelMoved = 0.8
}) => {
  const mouseMoveStateManager = new MouseMoveStateManager({
    checkCorrectEvent: e => DOM.mouseButton(e) === LEFT_BUTTON && e.ctrlKey || DOM.mouseButton(e) === RIGHT_BUTTON
  });
  return new DragHandler({
    clickTolerance,
    move: (lastPoint, point) => ({
      bearingDelta: (point.x - lastPoint.x) * bearingDegreesPerPixelMoved
    }),
    // prevent browser context menu when necessary; we don't allow it with rotation
    // because we can't discern rotation gesture start from contextmenu on Mac
    moveStateManager: mouseMoveStateManager,
    enable,
    assignEvents
  });
};
export const generateMousePitchHandler = ({
  enable,
  clickTolerance,
  pitchDegreesPerPixelMoved = -0.5
}) => {
  const mouseMoveStateManager = new MouseMoveStateManager({
    checkCorrectEvent: e => DOM.mouseButton(e) === LEFT_BUTTON && e.ctrlKey || DOM.mouseButton(e) === RIGHT_BUTTON
  });
  return new DragHandler({
    clickTolerance,
    move: (lastPoint, point) => ({
      pitchDelta: (point.y - lastPoint.y) * pitchDegreesPerPixelMoved
    }),
    // prevent browser context menu when necessary; we don't allow it with rotation
    // because we can't discern rotation gesture start from contextmenu on Mac
    moveStateManager: mouseMoveStateManager,
    enable,
    assignEvents
  });
};