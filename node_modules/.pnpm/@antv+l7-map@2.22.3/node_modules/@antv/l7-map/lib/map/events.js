"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MapWheelEvent = exports.MapTouchEvent = exports.MapMouseEvent = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _evented = require("./util/evented");
var _pointGeometry = _interopRequireDefault(require("@mapbox/point-geometry"));
var _dom = require("./util/dom");
/**
 * `MapEventType` - a mapping between the event name and the event value.
 * These events are used with the {@link Map#on} method.
 * When using a `layerId` with {@link Map#on} method, please refer to {@link MapLayerEventType}.
 * The following example can be used for all the events.
 *
 * @group Event Related
 * @example
 * ```ts
 * // Initialize the map
 * let map = new Map({ // map options });
 * // Set an event listener
 * map.on('the-event-name', () => {
 *   console.log('An event has occurred!');
 * });
 * ```
 */

/**
 * The base event for MapLibre
 *
 * @group Event Related
 */

/**
 * `MapMouseEvent` is the event type for mouse-related map events.
 *
 * @group Event Related
 *
 * @example
 * ```ts
 * // The `click` event is an example of a `MapMouseEvent`.
 * // Set up an event listener on the map.
 * map.on('click', (e) => {
 *   // The event object (e) contains information like the
 *   // coordinates of the point on the map that was clicked.
 *   console.log('A click event has occurred at ' + e.lngLat);
 * });
 * ```
 */
class MapMouseEvent extends _evented.Event {
  /**
   * Prevents subsequent default processing of the event by the map.
   *
   * Calling this method will prevent the following default map behaviors:
   *
   *   * On `mousedown` events, the behavior of {@link DragPanHandler}
   *   * On `mousedown` events, the behavior of {@link DragRotateHandler}
   *   * On `mousedown` events, the behavior of {@link BoxZoomHandler}
   *   * On `dblclick` events, the behavior of {@link DoubleClickZoomHandler}
   *
   */
  preventDefault() {
    this._defaultPrevented = true;
  }

  /**
   * `true` if `preventDefault` has been called.
   */
  get defaultPrevented() {
    return this._defaultPrevented;
  }
  constructor(type, map, originalEvent, data = {}) {
    super(type, data);
    /**
     * The event type
     */
    /**
     * The `Map` object that fired the event.
     */
    (0, _defineProperty2.default)(this, "target", void 0);
    /**
     * The DOM event which caused the map event.
     */
    (0, _defineProperty2.default)(this, "originalEvent", void 0);
    /**
     * The pixel coordinates of the mouse cursor, relative to the map and measured from the top left corner.
     */
    (0, _defineProperty2.default)(this, "point", void 0);
    /**
     * The geographic location on the map of the mouse cursor.
     */
    (0, _defineProperty2.default)(this, "lngLat", void 0);
    (0, _defineProperty2.default)(this, "_defaultPrevented", void 0);
    const point = _dom.DOM.mousePos(map.getCanvasContainer(), originalEvent);
    const lngLat = map.unproject(point);
    this.point = point;
    this.lngLat = lngLat;
    this.originalEvent = originalEvent;
    this._defaultPrevented = false;
    this.target = map;
  }
}

/**
 * `MapTouchEvent` is the event type for touch-related map events.
 *
 * @group Event Related
 */
exports.MapMouseEvent = MapMouseEvent;
class MapTouchEvent extends _evented.Event {
  /**
   * Prevents subsequent default processing of the event by the map.
   *
   * Calling this method will prevent the following default map behaviors:
   *
   *   * On `touchstart` events, the behavior of {@link DragPanHandler}
   *   * On `touchstart` events, the behavior of {@link TwoFingersTouchZoomRotateHandler}
   *
   */
  preventDefault() {
    this._defaultPrevented = true;
  }

  /**
   * `true` if `preventDefault` has been called.
   */
  get defaultPrevented() {
    return this._defaultPrevented;
  }
  constructor(type, map, originalEvent) {
    super(type);
    /**
     * The event type.
     */
    /**
     * The `Map` object that fired the event.
     */
    (0, _defineProperty2.default)(this, "target", void 0);
    /**
     * The DOM event which caused the map event.
     */
    (0, _defineProperty2.default)(this, "originalEvent", void 0);
    /**
     * The geographic location on the map of the center of the touch event points.
     */
    (0, _defineProperty2.default)(this, "lngLat", void 0);
    /**
     * The pixel coordinates of the center of the touch event points, relative to the map and measured from the top left
     * corner.
     */
    (0, _defineProperty2.default)(this, "point", void 0);
    /**
     * The array of pixel coordinates corresponding to a
     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.
     */
    (0, _defineProperty2.default)(this, "points", void 0);
    /**
     * The geographical locations on the map corresponding to a
     * [touch event's `touches`](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches) property.
     */
    (0, _defineProperty2.default)(this, "lngLats", void 0);
    (0, _defineProperty2.default)(this, "_defaultPrevented", void 0);
    const touches = type === 'touchend' ? originalEvent.changedTouches : originalEvent.touches;
    const points = _dom.DOM.touchPos(map.getCanvasContainer(), touches);
    const lngLats = points.map(t => map.unproject(t));
    const point = points.reduce((prev, curr, i, arr) => {
      return prev.add(curr.div(arr.length));
    }, new _pointGeometry.default(0, 0));
    const lngLat = map.unproject(point);
    this.target = map;
    this.points = points;
    this.point = point;
    this.lngLats = lngLats;
    this.lngLat = lngLat;
    this.originalEvent = originalEvent;
    this._defaultPrevented = false;
  }
}

/**
 * `MapWheelEvent` is the event type for the `wheel` map event.
 *
 * @group Event Related
 *
 */
exports.MapTouchEvent = MapTouchEvent;
class MapWheelEvent extends _evented.Event {
  /**
   * Prevents subsequent default processing of the event by the map.
   *
   * Calling this method will prevent the behavior of {@link ScrollZoomHandler}.
   */
  preventDefault() {
    this._defaultPrevented = true;
  }

  /**
   * `true` if `preventDefault` has been called.
   */
  get defaultPrevented() {
    return this._defaultPrevented;
  }
  /** */
  constructor(type, map, originalEvent) {
    super(type);
    /**
     * The event type
     */
    /**
     * The `Map` object that fired the event.
     */
    (0, _defineProperty2.default)(this, "target", void 0);
    /**
     * The DOM event which caused the map event.
     */
    (0, _defineProperty2.default)(this, "originalEvent", void 0);
    (0, _defineProperty2.default)(this, "_defaultPrevented", void 0);
    this.target = map;
    this._defaultPrevented = false;
    this.originalEvent = originalEvent;
  }
}

/**
 * A `MapLibreZoomEvent` is the event type for the boxzoom-related map events emitted by the {@link BoxZoomHandler}.
 *
 * @group Event Related
 */
exports.MapWheelEvent = MapWheelEvent;