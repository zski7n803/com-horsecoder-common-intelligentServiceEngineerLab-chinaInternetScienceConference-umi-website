"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BoxZoomHandler = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _dom = require("../util/dom");
var _evented = require("../util/evented");
var _transformProvider = require("./transform-provider");
/**
 * The `BoxZoomHandler` allows the user to zoom the map to fit within a bounding box.
 * The bounding box is defined by clicking and holding `shift` while dragging the cursor.
 *
 * @group Handlers
 */
class BoxZoomHandler {
  /** @internal */
  constructor(map, options) {
    (0, _defineProperty2.default)(this, "_map", void 0);
    (0, _defineProperty2.default)(this, "_tr", void 0);
    (0, _defineProperty2.default)(this, "_el", void 0);
    (0, _defineProperty2.default)(this, "_container", void 0);
    (0, _defineProperty2.default)(this, "_enabled", void 0);
    (0, _defineProperty2.default)(this, "_active", void 0);
    (0, _defineProperty2.default)(this, "_startPos", void 0);
    (0, _defineProperty2.default)(this, "_lastPos", void 0);
    (0, _defineProperty2.default)(this, "_box", void 0);
    (0, _defineProperty2.default)(this, "_clickTolerance", void 0);
    this._map = map;
    this._tr = new _transformProvider.TransformProvider(map);
    this._el = map.getCanvasContainer();
    this._container = map.getContainer();
    this._clickTolerance = options.clickTolerance || 1;
  }

  /**
   * Returns a Boolean indicating whether the "box zoom" interaction is enabled.
   *
   * @returns `true` if the "box zoom" interaction is enabled.
   */
  isEnabled() {
    return !!this._enabled;
  }

  /**
   * Returns a Boolean indicating whether the "box zoom" interaction is active, i.e. currently being used.
   *
   * @returns `true` if the "box zoom" interaction is active.
   */
  isActive() {
    return !!this._active;
  }

  /**
   * Enables the "box zoom" interaction.
   *
   * @example
   * ```ts
   * map.boxZoom.enable();
   * ```
   */
  enable() {
    if (this.isEnabled()) return;
    this._enabled = true;
  }

  /**
   * Disables the "box zoom" interaction.
   *
   * @example
   * ```ts
   * map.boxZoom.disable();
   * ```
   */
  disable() {
    if (!this.isEnabled()) return;
    this._enabled = false;
  }
  mousedown(e, point) {
    if (!this.isEnabled()) return;
    if (!(e.shiftKey && e.button === 0)) return;
    _dom.DOM.disableDrag();
    this._startPos = this._lastPos = point;
    this._active = true;
  }
  mousemoveWindow(e, point) {
    if (!this._active) return;
    const pos = point;
    if (this._lastPos.equals(pos) || !this._box && pos.dist(this._startPos) < this._clickTolerance) {
      return;
    }
    const p0 = this._startPos;
    this._lastPos = pos;
    if (!this._box) {
      this._box = _dom.DOM.create('div', 'l7-boxzoom', this._container);
      this._container.classList.add('l7-crosshair');
      this._fireEvent('boxzoomstart', e);
    }
    const minX = Math.min(p0.x, pos.x),
      maxX = Math.max(p0.x, pos.x),
      minY = Math.min(p0.y, pos.y),
      maxY = Math.max(p0.y, pos.y);
    _dom.DOM.setTransform(this._box, `translate(${minX}px,${minY}px)`);
    this._box.style.width = `${maxX - minX}px`;
    this._box.style.height = `${maxY - minY}px`;
  }
  mouseupWindow(e, point) {
    if (!this._active) return;
    if (e.button !== 0) return;
    const p0 = this._startPos,
      p1 = point;
    this.reset();
    _dom.DOM.suppressClick();
    if (p0.x === p1.x && p0.y === p1.y) {
      this._fireEvent('boxzoomcancel', e);
    } else {
      this._map.fire(new _evented.Event('boxzoomend', {
        originalEvent: e
      }));
      return {
        cameraAnimation: map => map.fitScreenCoordinates(p0, p1, this._tr.bearing, {
          linear: true
        })
      };
    }
  }
  keydown(e) {
    if (!this._active) return;
    if (e.keyCode === 27) {
      this.reset();
      this._fireEvent('boxzoomcancel', e);
    }
  }
  reset() {
    this._active = false;
    this._container.classList.remove('l7-crosshair');
    if (this._box) {
      _dom.DOM.remove(this._box);
      this._box = null;
    }
    _dom.DOM.enableDrag();
    delete this._startPos;
    delete this._lastPos;
  }
  _fireEvent(type, e) {
    return this._map.fire(new _evented.Event(type, {
      originalEvent: e
    }));
  }
}
exports.BoxZoomHandler = BoxZoomHandler;