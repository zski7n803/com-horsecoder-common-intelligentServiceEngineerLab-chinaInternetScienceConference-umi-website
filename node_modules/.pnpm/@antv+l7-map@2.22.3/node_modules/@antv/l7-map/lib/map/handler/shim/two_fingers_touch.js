"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TwoFingersTouchZoomRotateHandler = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
/**
 * The `TwoFingersTouchZoomRotateHandler` allows the user to zoom and rotate the map by
 * pinching on a touchscreen.
 *
 * They can zoom with one finger by double tapping and dragging. On the second tap,
 * hold the finger down and drag up or down to zoom in or out.
 *
 * @group Handlers
 */
class TwoFingersTouchZoomRotateHandler {
  /** @internal */
  constructor(el, touchZoom, touchRotate, tapDragZoom) {
    (0, _defineProperty2.default)(this, "_el", void 0);
    (0, _defineProperty2.default)(this, "_touchZoom", void 0);
    (0, _defineProperty2.default)(this, "_touchRotate", void 0);
    (0, _defineProperty2.default)(this, "_tapDragZoom", void 0);
    (0, _defineProperty2.default)(this, "_rotationDisabled", void 0);
    (0, _defineProperty2.default)(this, "_enabled", void 0);
    this._el = el;
    this._touchZoom = touchZoom;
    this._touchRotate = touchRotate;
    this._tapDragZoom = tapDragZoom;
    this._rotationDisabled = false;
    this._enabled = true;
  }

  /**
   * Enables the "pinch to rotate and zoom" interaction.
   *
   * @param options - Options object.
   *
   * @example
   * ```ts
   * map.touchZoomRotate.enable();
   * map.touchZoomRotate.enable({ around: 'center' });
   * ```
   */
  enable(options) {
    this._touchZoom.enable(options);
    if (!this._rotationDisabled) this._touchRotate.enable(options);
    this._tapDragZoom.enable();
    this._el.classList.add('l7-touch-zoom-rotate');
  }

  /**
   * Disables the "pinch to rotate and zoom" interaction.
   *
   * @example
   * ```ts
   * map.touchZoomRotate.disable();
   * ```
   */
  disable() {
    this._touchZoom.disable();
    this._touchRotate.disable();
    this._tapDragZoom.disable();
    this._el.classList.remove('l7-touch-zoom-rotate');
  }

  /**
   * Returns a Boolean indicating whether the "pinch to rotate and zoom" interaction is enabled.
   *
   * @returns `true` if the "pinch to rotate and zoom" interaction is enabled.
   */
  isEnabled() {
    return this._touchZoom.isEnabled() && (this._rotationDisabled || this._touchRotate.isEnabled()) && this._tapDragZoom.isEnabled();
  }

  /**
   * Returns true if the handler is enabled and has detected the start of a zoom/rotate gesture.
   *
   * @returns `true` if the handler is active, `false` otherwise
   */
  isActive() {
    return this._touchZoom.isActive() || this._touchRotate.isActive() || this._tapDragZoom.isActive();
  }

  /**
   * Disables the "pinch to rotate" interaction, leaving the "pinch to zoom"
   * interaction enabled.
   *
   * @example
   * ```ts
   * map.touchZoomRotate.disableRotation();
   * ```
   */
  disableRotation() {
    this._rotationDisabled = true;
    this._touchRotate.disable();
  }

  /**
   * Enables the "pinch to rotate" interaction.
   *
   * @example
   * ```ts
   * map.touchZoomRotate.enable();
   * map.touchZoomRotate.enableRotation();
   * ```
   */
  enableRotation() {
    this._rotationDisabled = false;
    if (this._touchZoom.isEnabled()) this._touchRotate.enable();
  }
}
exports.TwoFingersTouchZoomRotateHandler = TwoFingersTouchZoomRotateHandler;