"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MapTheme = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../constants");
var _icon = require("../utils/icon");
var _selectControl = _interopRequireDefault(require("./baseControl/selectControl"));
class MapTheme extends _selectControl.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onMapThemeChange", () => {
      this.mapsService.setMapStyle(this.selectValue[0]);
    });
  }
  getDefault(option) {
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, super.getDefault(option)), {}, {
      title: '地图样式',
      btnIcon: (0, _icon.createL7Icon)('l7-icon-color'),
      options: []
    });
  }
  getStyleOptions() {
    const mapStyleConfig = this.mapsService.getType() === 'mapbox' ? _constants.MapboxMapStyleConfig : _constants.GaodeMapStyleConfig;
    return Object.entries(this.mapsService.getMapStyleConfig()).filter(([key, value]) => typeof value === 'string' && key !== 'blank').map(([key, value]) => {
      var _mapStyleConfig$key;
      // @ts-ignore
      const {
        text,
        img
      } = (_mapStyleConfig$key = mapStyleConfig[key]) !== null && _mapStyleConfig$key !== void 0 ? _mapStyleConfig$key : {};
      return {
        text: text !== null && text !== void 0 ? text : key,
        value,
        img,
        key
      };
    });
  }
  getMapStyle() {
    return this.mapsService.getMapStyle();
  }
  onAdd() {
    var _this$controlOption$o;
    if (!((_this$controlOption$o = this.controlOption.options) !== null && _this$controlOption$o !== void 0 && _this$controlOption$o.length)) {
      this.controlOption.options = this.getStyleOptions();
    }
    if (this.controlOption.defaultValue) {
      var _this$controlOption$o2, _this$controlOption$o3;
      const defaultValue = this.controlOption.defaultValue;
      this.controlOption.defaultValue = (_this$controlOption$o2 = (_this$controlOption$o3 = this.controlOption.options.find(item => item.key === defaultValue)) === null || _this$controlOption$o3 === void 0 ? void 0 : _this$controlOption$o3.value) !== null && _this$controlOption$o2 !== void 0 ? _this$controlOption$o2 : defaultValue;
    } else {
      const defaultStyle = this.getMapStyle();
      if (defaultStyle) {
        this.controlOption.defaultValue = defaultStyle;
      } else {
        // @ts-ignore
        this.mapsService.map.once('styledata', () => {
          const mapboxStyle = this.mapsService.getMapStyle();
          this.controlOption.defaultValue = mapboxStyle;
          this.setSelectValue(mapboxStyle, false);
        });
      }
    }
    this.on('selectChange', this.onMapThemeChange);
    return super.onAdd();
  }
  getIsMultiple() {
    return false;
  }
}
exports.default = exports.MapTheme = MapTheme;