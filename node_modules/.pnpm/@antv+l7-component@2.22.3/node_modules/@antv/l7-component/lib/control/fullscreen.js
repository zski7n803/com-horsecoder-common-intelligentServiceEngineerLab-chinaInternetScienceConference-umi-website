"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Fullscreen = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _icon = require("../utils/icon");
var _screenfull = _interopRequireDefault(require("../utils/screenfull"));
var _buttonControl = _interopRequireDefault(require("./baseControl/buttonControl"));
class Fullscreen extends _buttonControl.default {
  constructor(option) {
    var _this;
    super(option);
    _this = this;
    (0, _defineProperty2.default)(this, "isFullscreen", false);
    (0, _defineProperty2.default)(this, "mapContainer", void 0);
    (0, _defineProperty2.default)(this, "toggleFullscreen", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      if (_screenfull.default.isEnabled) {
        yield _screenfull.default.toggle(_this.mapContainer);
      }
    }));
    (0, _defineProperty2.default)(this, "onClick", () => {
      this.toggleFullscreen();
    });
    (0, _defineProperty2.default)(this, "onFullscreenChange", () => {
      this.isFullscreen = !!document.fullscreenElement;
      const {
        btnText,
        btnIcon,
        title,
        exitBtnText,
        exitBtnIcon,
        exitTitle
      } = this.controlOption;
      if (this.isFullscreen) {
        this.setBtnTitle(exitTitle);
        this.setBtnText(exitBtnText);
        this.setBtnIcon(exitBtnIcon);
      } else {
        this.setBtnTitle(title);
        this.setBtnText(btnText);
        this.setBtnIcon(btnIcon);
      }
      this.emit('fullscreenChange', this.isFullscreen);
    });
    if (!_screenfull.default.isEnabled) {
      console.warn('当前浏览器环境不支持对地图全屏化');
    }
  }
  setOptions(newOptions) {
    const {
      exitBtnText,
      exitBtnIcon,
      exitTitle
    } = newOptions;
    if (this.isFullscreen) {
      if (this.checkUpdateOption(newOptions, ['exitBtnIcon'])) {
        this.setBtnIcon(exitBtnIcon);
      }
      if (this.checkUpdateOption(newOptions, ['exitBtnText'])) {
        this.setBtnText(exitBtnText);
      }
      if (this.checkUpdateOption(newOptions, ['exitTitle'])) {
        this.setBtnTitle(exitTitle);
      }
    }
    super.setOptions(newOptions);
  }
  onAdd() {
    const button = super.onAdd();
    button.addEventListener('click', this.onClick);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    this.mapContainer = _l7Utils.DOM.getContainer(this.scene.getSceneConfig().id);
    this.mapContainer.addEventListener('fullscreenchange', this.onFullscreenChange);
    return button;
  }
  onRemove() {
    super.onRemove();
    this.mapContainer.removeEventListener('fullscreenchange', this.onFullscreenChange);
  }
  getDefault(option) {
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, super.getDefault(option)), {}, {
      title: '全屏',
      btnIcon: (0, _icon.createL7Icon)('l7-icon-fullscreen'),
      exitTitle: '退出全屏',
      exitBtnIcon: (0, _icon.createL7Icon)('l7-icon-exit-fullscreen')
    });
  }
}
exports.default = exports.Fullscreen = Fullscreen;