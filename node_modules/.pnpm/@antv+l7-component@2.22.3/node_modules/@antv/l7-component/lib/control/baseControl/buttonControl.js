"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ButtonControl = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _control = _interopRequireDefault(require("./control"));
class ButtonControl extends _control.default {
  constructor(...args) {
    super(...args);
    /**
     * 当前按钮是否禁用
     * @protected
     */
    (0, _defineProperty2.default)(this, "isDisable", false);
    /**
     * 按钮的 DOM
     * @protected
     */
    (0, _defineProperty2.default)(this, "button", void 0);
    /**
     * 按钮中文本对应的 DOM
     * @protected
     */
    (0, _defineProperty2.default)(this, "buttonText", void 0);
    /**
     * 按钮中图标对应的 DOM
     * @protected
     */
    (0, _defineProperty2.default)(this, "buttonIcon", void 0);
  }
  /**
   * 设置当前按钮
   * @param newIsDisable
   */
  setIsDisable(newIsDisable) {
    this.isDisable = newIsDisable;
    if (newIsDisable) {
      var _this$button;
      (_this$button = this.button) === null || _this$button === void 0 || _this$button.setAttribute('disabled', 'true');
    } else {
      var _this$button2;
      (_this$button2 = this.button) === null || _this$button2 === void 0 || _this$button2.removeAttribute('disabled');
    }
  }
  createButton(className = '') {
    return _l7Utils.DOM.create('button', `l7-button-control ${className}`);
  }
  onAdd() {
    this.button = this.createButton();
    this.isDisable = false;
    const {
      title,
      btnText,
      btnIcon
    } = this.controlOption;
    this.setBtnTitle(title);
    this.setBtnText(btnText);
    this.setBtnIcon(btnIcon);
    return this.button;
  }
  onRemove() {
    this.button = this.buttonIcon = this.buttonText = undefined;
    this.isDisable = false;
  }

  /**
   * 更新配置方法
   * @param newOptions
   */
  setOptions(newOptions) {
    const {
      title,
      btnText,
      btnIcon
    } = newOptions;
    if (this.checkUpdateOption(newOptions, ['title'])) {
      this.setBtnTitle(title);
    }
    if (this.checkUpdateOption(newOptions, ['btnIcon'])) {
      this.setBtnIcon(btnIcon);
    }
    if (this.checkUpdateOption(newOptions, ['btnText'])) {
      this.setBtnText(btnText);
    }
    super.setOptions(newOptions);
  }

  /**
   * 设置按钮 title
   * @param title
   */
  setBtnTitle(title) {
    var _this$button3;
    (_this$button3 = this.button) === null || _this$button3 === void 0 || _this$button3.setAttribute('title', title !== null && title !== void 0 ? title : '');
  }

  /**
   * 设置按钮 Icon
   * @param newIcon
   */
  setBtnIcon(newIcon) {
    if (this.buttonIcon) {
      _l7Utils.DOM.remove(this.buttonIcon);
    }
    if (newIcon) {
      var _this$button4;
      const firstChild = (_this$button4 = this.button) === null || _this$button4 === void 0 ? void 0 : _this$button4.firstChild;
      if (firstChild) {
        var _this$button5;
        (_this$button5 = this.button) === null || _this$button5 === void 0 || _this$button5.insertBefore(newIcon, firstChild);
      } else {
        var _this$button6;
        (_this$button6 = this.button) === null || _this$button6 === void 0 || _this$button6.appendChild(newIcon);
      }
      this.buttonIcon = newIcon;
    }
  }

  /**
   * 设置按钮文本
   * @param newText
   */
  setBtnText(newText) {
    if (!this.button) {
      return;
    }
    _l7Utils.DOM.removeClass(this.button, 'l7-button-control--row');
    _l7Utils.DOM.removeClass(this.button, 'l7-button-control--column');
    if (newText) {
      let btnText = this.buttonText;
      if (!btnText) {
        var _this$button7;
        btnText = _l7Utils.DOM.create('div', 'l7-button-control__text');
        (_this$button7 = this.button) === null || _this$button7 === void 0 || _this$button7.appendChild(btnText);
        this.buttonText = btnText;
      }
      btnText.innerText = newText;
      _l7Utils.DOM.addClass(this.button, this.controlOption.vertical ? 'l7-button-control--column' : 'l7-button-control--row');
    } else if (!newText && this.buttonText) {
      _l7Utils.DOM.remove(this.buttonText);
      this.buttonText = undefined;
    }
  }
}
exports.default = exports.ButtonControl = ButtonControl;