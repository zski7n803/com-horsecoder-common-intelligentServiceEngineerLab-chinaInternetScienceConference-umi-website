"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SelectControl = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _popperControl = require("./popperControl");
var SelectControlConstant = /*#__PURE__*/function (SelectControlConstant) {
  SelectControlConstant["ActiveOptionClassName"] = "l7-select-control-item-active";
  SelectControlConstant["OptionValueAttrKey"] = "data-option-value";
  SelectControlConstant["OptionIndexAttrKey"] = "data-option-index";
  return SelectControlConstant;
}(SelectControlConstant || {});
class SelectControl extends _popperControl.PopperControl {
  constructor(...args) {
    super(...args);
    /**
     * 当前选中的值
     * @protected
     */
    (0, _defineProperty2.default)(this, "selectValue", []);
    /**
     * 选项对应的 DOM 列表
     * @protected
     */
    (0, _defineProperty2.default)(this, "optionDOMList", void 0);
    (0, _defineProperty2.default)(this, "createNormalOption", option => {
      const isSelect = this.selectValue.includes(option.value);
      const optionDOM = _l7Utils.DOM.create('div', `l7-select-control-item ${isSelect ? SelectControlConstant.ActiveOptionClassName : ''}`);
      if (this.getIsMultiple()) {
        optionDOM.appendChild(this.createCheckbox(isSelect));
      } else {
        optionDOM.appendChild(this.createRadio(isSelect));
      }
      if (option.icon) {
        optionDOM.appendChild(option.icon);
      }
      const textDOM = _l7Utils.DOM.create('span');
      textDOM.innerText = option.text;
      optionDOM.appendChild(textDOM);
      return optionDOM;
    });
    (0, _defineProperty2.default)(this, "onItemClick", item => {
      if (this.getIsMultiple()) {
        const targetIndex = this.selectValue.findIndex(value => value === item.value);
        if (targetIndex > -1) {
          this.selectValue.splice(targetIndex, 1);
        } else {
          this.selectValue = [...this.selectValue, item.value];
        }
      } else {
        this.selectValue = [item.value];
      }
      this.setSelectValue(this.selectValue);
    });
  }
  setOptions(option) {
    super.setOptions(option);
    const {
      options
    } = option;
    if (options) {
      this.popper.setContent(this.getPopperContent(options));
    }
  }
  onAdd() {
    const button = super.onAdd();
    const {
      defaultValue
    } = this.controlOption;
    if (defaultValue) {
      this.selectValue = this.transSelectValue(defaultValue);
    }
    this.popper.setContent(this.getPopperContent(this.controlOption.options));
    return button;
  }
  getSelectValue() {
    return this.getIsMultiple() ? this.selectValue : this.selectValue[0];
  }
  setSelectValue(value, emitEvent = true) {
    const finalValue = this.transSelectValue(value);
    this.optionDOMList.forEach(optionDOM => {
      const optionValue = optionDOM.getAttribute(SelectControlConstant.OptionValueAttrKey);
      const checkboxDOM = optionDOM.querySelector('input[type=checkbox]');
      const radioDOM = optionDOM.querySelector('input[type=radio]');
      const isActive = finalValue.includes(optionValue);

      // 设置类名和选中状态的函数
      const setDOMState = (dom, active) => {
        _l7Utils.DOM.toggleClass(optionDOM, SelectControlConstant.ActiveOptionClassName, active);
        if (dom) {
          _l7Utils.DOM.setChecked(dom, active);
        }
      };
      setDOMState(checkboxDOM, isActive);
      setDOMState(radioDOM, isActive);
    });
    this.selectValue = finalValue;
    if (emitEvent) {
      this.emit('selectChange', this.getIsMultiple() ? finalValue : finalValue[0]);
    }
  }

  /**
   * 是否为多选
   * @protected
   */
  getIsMultiple() {
    return false;
  }

  /**
   * 渲染弹窗内容
   * @param options
   * @returns
   */
  getPopperContent(options) {
    const isImageOptions = this.isImageOptions();
    const content = _l7Utils.DOM.create('div', isImageOptions ? 'l7-select-control--image' : 'l7-select-control--normal');
    if (this.getIsMultiple()) {
      _l7Utils.DOM.addClass(content, 'l7-select-control--multiple');
    }
    const optionsDOMList = options.map((option, optionIndex) => {
      const optionDOM = isImageOptions ?
      // @ts-ignore
      this.createImageOption(option) : this.createNormalOption(option);
      optionDOM.setAttribute(SelectControlConstant.OptionValueAttrKey, option.value);
      optionDOM.setAttribute(SelectControlConstant.OptionIndexAttrKey, window.String(optionIndex));
      optionDOM.addEventListener('click', this.onItemClick.bind(this, option));
      return optionDOM;
    });
    content.append(...optionsDOMList);
    this.optionDOMList = optionsDOMList;
    return content;
  }
  createImageOption(option) {
    const isSelect = this.selectValue.includes(option.value);
    const optionDOM = _l7Utils.DOM.create('div', `l7-select-control-item ${isSelect ? SelectControlConstant.ActiveOptionClassName : ''}`);
    const imgDOM = _l7Utils.DOM.create('img');
    imgDOM.setAttribute('src', option.img);
    _l7Utils.DOM.setUnDraggable(imgDOM);
    optionDOM.appendChild(imgDOM);
    const rowDOM = _l7Utils.DOM.create('div', 'l7-select-control-item-row');
    if (this.getIsMultiple()) {
      optionDOM.appendChild(this.createCheckbox(isSelect));
    }
    const textDOM = _l7Utils.DOM.create('span');
    textDOM.innerText = option.text;
    rowDOM.appendChild(textDOM);
    optionDOM.appendChild(rowDOM);
    return optionDOM;
  }
  createCheckbox(isSelect) {
    const checkboxDOM = _l7Utils.DOM.create('input');
    checkboxDOM.setAttribute('type', 'checkbox');
    if (isSelect) {
      _l7Utils.DOM.setChecked(checkboxDOM, true);
    }
    return checkboxDOM;
  }
  createRadio(isSelect) {
    const radioDOM = _l7Utils.DOM.create('input');
    radioDOM.setAttribute('type', 'radio');
    if (isSelect) {
      _l7Utils.DOM.setChecked(radioDOM, true);
    }
    return radioDOM;
  }
  isImageOptions() {
    // @ts-ignore
    return !!this.controlOption.options.find(item => item.img);
  }
  transSelectValue(value) {
    return Array.isArray(value) ? value : [value];
  }
}
exports.default = exports.SelectControl = SelectControl;