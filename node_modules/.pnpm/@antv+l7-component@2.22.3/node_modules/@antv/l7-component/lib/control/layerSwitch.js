"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LayerSwitch = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _icon = require("../utils/icon");
var _selectControl = _interopRequireDefault(require("./baseControl/selectControl"));
function isLayerSwitchItem(obj) {
  return Object.keys(obj !== null && obj !== void 0 ? obj : {}).every(key => ['layer', 'name', 'img'].includes(key));
}
class LayerSwitch extends _selectControl.default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onLayerChange", () => {
      var _this$controlOption$l;
      if ((_this$controlOption$l = this.controlOption.layers) !== null && _this$controlOption$l !== void 0 && _this$controlOption$l.length) {
        return;
      }
      this.selectValue = this.getLayerVisible();
      this.setOptions({
        options: this.getLayerOptions()
      });
    });
    (0, _defineProperty2.default)(this, "onLayerVisibleChane", () => {
      this.setSelectValue(this.getLayerVisible());
    });
    (0, _defineProperty2.default)(this, "onSelectChange", () => {
      this.layers.forEach(layer => {
        const needShow = this.selectValue.includes(layer.name);
        const isShow = layer.isVisible();
        if (needShow && !isShow) {
          layer.show();
        }
        if (!needShow && isShow) {
          layer.hide();
        }
      });
    });
  }
  get layers() {
    const layerService = this.layerService;
    const {
      layers
    } = this.controlOption;
    if (Array.isArray(layers) && layers.length) {
      const layerInstances = [];
      layers.forEach(layer => {
        if (layer instanceof Object) {
          if (isLayerSwitchItem(layer)) {
            layerInstances.push(layer.layer);
          } else {
            layerInstances.push(layer);
          }
        }
        if (typeof layer === 'string') {
          const targetLayer = layerService.getLayer(layer) || layerService.getLayerByName(layer);
          if (targetLayer) {
            layerInstances.push(targetLayer);
          }
        }
      });
      return layerInstances;
    }
    return layerService.getLayers() || [];
  }
  getDefault(option) {
    var _option$multiple;
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, super.getDefault(option)), {}, {
      title: '图层控制',
      btnIcon: (0, _icon.createL7Icon)('l7-icon-layer'),
      options: [],
      multiple: (_option$multiple = option === null || option === void 0 ? void 0 : option.multiple) !== null && _option$multiple !== void 0 ? _option$multiple : true
    });
  }
  getLayerVisible() {
    return this.layers.filter(layer => layer.isVisible()).map(layer => layer.name);
  }
  getLayerOptions() {
    const {
      layers
    } = this.controlOption;
    const isAllImg = layers === null || layers === void 0 ? void 0 : layers.every(item => item.img);
    if (layers) {
      return layers === null || layers === void 0 ? void 0 : layers.map(layer => {
        if (isLayerSwitchItem(layer)) {
          return {
            text: layer.name || layer.layer.name,
            value: layer.layer.name,
            img: isAllImg ? layer.img : undefined
          };
        } else if (typeof layer === 'string') {
          const targetLayer = this.layerService.getLayer(layer) || this.layerService.getLayerByName(layer);
          return {
            text: targetLayer === null || targetLayer === void 0 ? void 0 : targetLayer.name,
            value: targetLayer === null || targetLayer === void 0 ? void 0 : targetLayer.name
          };
        }
        return {
          text: layer.name,
          value: layer.name
        };
      });
    }
    return this.layers.map(layer => {
      return {
        text: layer.name,
        value: layer.name
      };
    });
  }
  setOptions(option) {
    const isLayerChange = this.checkUpdateOption(option, ['layers', 'multiple']);
    super.setOptions(option);
    if (isLayerChange) {
      if (this.controlOption.multiple === false) {
        this.handleSingleSelection();
      }
      this.selectValue = this.getLayerVisible();
      this.controlOption.options = this.getLayerOptions();
      this.popper.setContent(this.getPopperContent(this.controlOption.options));
    }
  }

  // TODO: 单选模式下，目前默认展示第一项，通过用户提供defaultValue展示默认选项的属性待开发
  // 如果是单选模式，则只显示第一个图层
  handleSingleSelection() {
    this.layers.forEach((layer, index) => {
      index === 0 ? layer.show() : layer.hide();
    });
  }
  onAdd() {
    var _this$controlOption$o;
    if (this.controlOption.multiple === false) {
      this.handleSingleSelection();
    }
    if (!((_this$controlOption$o = this.controlOption.options) !== null && _this$controlOption$o !== void 0 && _this$controlOption$o.length)) {
      this.controlOption.options = this.getLayerOptions();
    }
    if (!this.controlOption.defaultValue) {
      this.controlOption.defaultValue = this.getLayerVisible();
    }
    this.on('selectChange', this.onSelectChange);
    this.layerService.on('layerChange', this.onLayerChange);
    return super.onAdd();
  }
  onRemove() {
    this.off('selectChange', this.onSelectChange);
    this.layerService.off('layerChange', this.onLayerChange);
  }
  getIsMultiple() {
    return this.controlOption.multiple;
  }
}
exports.default = exports.LayerSwitch = LayerSwitch;