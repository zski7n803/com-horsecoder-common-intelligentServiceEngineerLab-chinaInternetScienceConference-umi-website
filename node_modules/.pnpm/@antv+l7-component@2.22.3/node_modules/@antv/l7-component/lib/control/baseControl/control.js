"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Control = void 0;
Object.defineProperty(exports, "PositionType", {
  enumerable: true,
  get: function () {
    return _l7Core.PositionType;
  }
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Core = require("@antv/l7-core");
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
class Control extends _eventemitter.default {
  constructor(option) {
    super();
    /**
     * 当前控件实例配置
     */
    (0, _defineProperty2.default)(this, "controlOption", void 0);
    /**
     * 控件的 DOM 容器
     * @protected
     */
    (0, _defineProperty2.default)(this, "container", void 0);
    /**
     * 当前控件是否显示
     * @protected
     */
    (0, _defineProperty2.default)(this, "isShow", void 0);
    (0, _defineProperty2.default)(this, "sceneContainer", void 0);
    (0, _defineProperty2.default)(this, "scene", void 0);
    (0, _defineProperty2.default)(this, "mapsService", void 0);
    (0, _defineProperty2.default)(this, "renderService", void 0);
    (0, _defineProperty2.default)(this, "layerService", void 0);
    (0, _defineProperty2.default)(this, "controlService", void 0);
    (0, _defineProperty2.default)(this, "configService", void 0);
    Control.controlCount++;
    this.controlOption = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.getDefault(option)), option || {});
  }
  getOptions() {
    return this.controlOption;
  }

  /**
   * 更新配置的方法，子类如果有自己的配置，也需要重写该方法
   * @param newOptions
   */
  setOptions(newOptions) {
    const defaultOptions = this.getDefault(newOptions);
    Object.entries(newOptions).forEach(([key, value]) => {
      if (value === undefined) {
        newOptions[key] = defaultOptions[key];
      }
    });
    if ('position' in newOptions) {
      this.setPosition(newOptions.position);
    }
    if ('className' in newOptions) {
      this.setClassName(newOptions.className);
    }
    if ('style' in newOptions) {
      this.setStyle(newOptions.style);
    }
    this.controlOption = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.controlOption), newOptions);
  }

  /**
   * 当 Control 被添加至 Scene 中，被 controlService 调用的方法
   * @param sceneContainer
   */
  addTo(sceneContainer) {
    // 初始化各个 Service 实例
    this.mapsService = sceneContainer.mapService;
    this.renderService = sceneContainer.rendererService;
    this.layerService = sceneContainer.layerService;
    this.controlService = sceneContainer.controlService;
    this.configService = sceneContainer.globalConfigService;
    this.scene = sceneContainer.sceneService;
    this.sceneContainer = sceneContainer;
    this.isShow = true;

    // 初始化 container
    this.container = this.onAdd();
    _l7Utils.DOM.addClass(this.container, 'l7-control');
    const {
      className,
      style
    } = this.controlOption;
    if (className) {
      this.setClassName(className);
    }
    if (style) {
      this.setStyle(style);
    }
    // 将 container 插入容器中
    this.insertContainer();
    this.emit('add', this);
    return this;
  }

  /**
   * 将控件移除时触发
   */
  remove() {
    if (!this.mapsService) {
      return this;
    }
    _l7Utils.DOM.remove(this.container);
    this.onRemove();
    this.emit('remove', this);
  }

  /**
   * Control 被添加的时候被调用，返回 Control 对应的 DOM 容器
   */
  onAdd() {
    return _l7Utils.DOM.create('div');
  }

  /**
   * Control 被移除时调用
   */
  // tslint:disable-next-line:no-empty
  onRemove() {}

  /**
   * 显示控件时触发
   */
  show() {
    const container = this.container;
    _l7Utils.DOM.removeClass(container, 'l7-control--hide');
    this.isShow = true;
    this.emit('show', this);
  }

  /**
   * 隐藏控件时触发
   */
  hide() {
    const container = this.container;
    _l7Utils.DOM.addClass(container, 'l7-control--hide');
    this.isShow = false;
    this.emit('hide', this);
  }

  /**
   * 获取默认构造器参数
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getDefault(option) {
    // tslint:disable-next-line:no-object-literal-type-assertion
    return {
      position: _l7Core.PositionType.TOPRIGHT,
      name: `${Control.controlCount}`
    };
  }

  /**
   * 获取当前控件对应的 DOM 容器
   */
  getContainer() {
    return this.container;
  }

  /**
   * 获取当前 Control 是否展示
   */
  getIsShow() {
    return this.isShow;
  }
  _refocusOnMap(e) {
    // if map exists and event is not a keyboard event
    if (this.mapsService && e && e.screenX > 0 && e.screenY > 0) {
      const container = this.mapsService.getContainer();
      if (container !== null) {
        container.focus();
      }
    }
  }

  /**
   * 设置当前控件位置
   * @param position
   */
  setPosition(position = _l7Core.PositionType.TOPLEFT) {
    // 考虑组件的自动布局，需要销毁重建
    const controlService = this.controlService;
    if (controlService) {
      controlService.removeControl(this);
    }
    this.controlOption.position = position;
    if (controlService) {
      controlService.addControl(this, this.sceneContainer);
    }
    return this;
  }

  /**
   * 设置容器 container 的样式相关位置，包含 className
   * @param className
   */
  setClassName(className) {
    const container = this.container;
    const {
      className: oldClassName
    } = this.controlOption;
    if (oldClassName) {
      _l7Utils.DOM.removeClass(container, oldClassName);
    }
    if (className) {
      _l7Utils.DOM.addClass(container, className);
    }
  }

  /**
   * 设置容器 container 的样式相关位置，包含 style
   * @param style
   */
  setStyle(style) {
    const container = this.container;
    if (style) {
      container.setAttribute('style', style);
    } else {
      container.removeAttribute('style');
    }
  }

  /**
   * 将控件 DOM 插入到对应 position 的容器中
   * @protected
   */
  insertContainer() {
    const position = this.controlOption.position;
    const container = this.container;
    if (position instanceof Element) {
      position.appendChild(container);
    } else {
      const corner = this.controlService.controlCorners[position];
      if (['bottomleft', 'bottomright', 'righttop', 'rightbottom'].includes(position)) {
        corner.insertBefore(container, corner.firstChild);
      } else {
        corner.appendChild(container);
      }
    }
  }

  /**
   * 检查当前传入 option 是否包含 keys 字段
   * @param option
   * @param keys
   * @protected
   */
  checkUpdateOption(option, keys) {
    return keys.some(key => key in option);
  }
}
exports.default = exports.Control = Control;
/**
 * 当前类型控件实例个数
 * @protected
 */
(0, _defineProperty2.default)(Control, "controlCount", 0);