"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GeoLocate = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _icon = require("../utils/icon");
var _buttonControl = _interopRequireDefault(require("./baseControl/buttonControl"));
class GeoLocate extends _buttonControl.default {
  constructor(option) {
    var _this;
    super(option);
    _this = this;
    /**
     * 通过浏览器 API 获取当前所在经纬度
     */
    (0, _defineProperty2.default)(this, "getGeoLocation", () => {
      return new Promise((resolve, reject) => {
        window.navigator.geolocation.getCurrentPosition(({
          coords
        }) => {
          const {
            longitude,
            latitude
          } = coords !== null && coords !== void 0 ? coords : {};
          if (!isNaN(longitude) && !isNaN(latitude)) {
            resolve([longitude, latitude]);
          } else {
            reject();
          }
        }, e => {
          reject(e);
        });
      });
    });
    (0, _defineProperty2.default)(this, "onClick", /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
      if (!window.navigator.geolocation) {
        return;
      }
      const {
        transform
      } = _this.controlOption;
      const position = yield _this.getGeoLocation();
      const currentZoom = _this.mapsService.getZoom();
      _this.mapsService.setZoomAndCenter(currentZoom > 15 ? currentZoom : 15, transform ? yield transform(position) : position);
    }));
    if (!window.navigator.geolocation) {
      console.warn('当前浏览器环境不支持获取地理定位');
    }
  }
  getDefault(option) {
    return (0, _objectSpread2.default)((0, _objectSpread2.default)({}, super.getDefault(option)), {}, {
      title: '定位',
      btnIcon: (0, _icon.createL7Icon)('l7-icon-reposition')
    });
  }
  onAdd() {
    const button = super.onAdd();
    button.addEventListener('click', this.onClick);
    return button;
  }
}
exports.default = exports.GeoLocate = GeoLocate;