import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { DOM, Satistics, bindAll, boundsContains, lodashUtil, padBounds } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
// @ts-ignore
// tslint:disable-next-line:no-submodule-imports
import Supercluster from 'supercluster/dist/supercluster';
import Marker from "./marker";
const {
  merge
} = lodashUtil;
export default class MarkerLayer extends EventEmitter {
  constructor(option) {
    var _this$markerLayerOpti;
    super();
    _defineProperty(this, "markers", []);
    // 原始的marker列表
    _defineProperty(this, "markerLayerOption", void 0);
    _defineProperty(this, "clusterIndex", void 0);
    _defineProperty(this, "points", []);
    _defineProperty(this, "clusterMarkers", []);
    // 聚合后的marker列表
    _defineProperty(this, "mapsService", void 0);
    _defineProperty(this, "scene", void 0);
    _defineProperty(this, "zoom", void 0);
    _defineProperty(this, "bbox", void 0);
    _defineProperty(this, "inited", void 0);
    _defineProperty(this, "containerSize", void 0);
    this.markerLayerOption = merge(this.getDefault(), option);
    bindAll(['update'], this);
    this.zoom = ((_this$markerLayerOpti = this.markerLayerOption.clusterOption) === null || _this$markerLayerOpti === void 0 ? void 0 : _this$markerLayerOpti.zoom) || -99;
  }
  getDefault() {
    return {
      cluster: false,
      clusterOption: {
        radius: 80,
        maxZoom: 20,
        minZoom: 0,
        zoom: -99,
        style: {},
        className: ''
      }
    };
  }

  // 执行scene.addMarkerLayer时调用
  addTo(scene) {
    // this.remove();
    this.scene = scene;
    this.mapsService = scene.mapService;
    if (this.markerLayerOption.cluster) {
      this.initCluster();
      this.update();
      // 地图视野变化时，重新计算视野内的聚合点。
      this.mapsService.on('camerachange', this.update); // amap1.x 更新事件
      this.mapsService.on('viewchange', this.update); // amap2.0 更新事件
    }
    this.mapsService.on('camerachange', this.setContainerSize.bind(this)); // amap1.x 更新事件
    this.mapsService.on('viewchange', this.setContainerSize.bind(this)); // amap2.0 更新事件
    this.addMarkers();
    this.inited = true;
    return this;
  }

  // 设置容器大小
  setContainerSize() {
    if (!this.mapsService) {
      return;
    }
    const container = this.mapsService.getContainer();
    this.containerSize = {
      containerWidth: (container === null || container === void 0 ? void 0 : container.scrollWidth) || 0,
      containerHeight: (container === null || container === void 0 ? void 0 : container.scrollHeight) || 0,
      bounds: this.mapsService.getBounds()
    };
  }

  // 获取容器尺寸
  getContainerSize() {
    return this.containerSize;
  }

  // 在图层添加单个marker
  addMarker(marker) {
    const cluster = this.markerLayerOption.cluster;
    marker.getMarkerLayerContainerSize = this.getContainerSize.bind(this);
    if (cluster) {
      this.addPoint(marker, this.markers.length);
      if (this.mapsService) {
        // 在新增 marker 的时候需要更新聚合信息（哪怕此时的 zoom 没有发生变化）
        const zoom = this.mapsService.getZoom();
        const bbox = this.mapsService.getBounds();
        this.bbox = padBounds(bbox, 0.5);
        this.zoom = Math.floor(zoom);
        this.getClusterMarker(this.bbox, this.zoom);
      }
    }
    this.markers.push(marker);
  }
  removeMarker(marker) {
    this.markers.indexOf(marker);
    const markerIndex = this.markers.indexOf(marker);
    if (markerIndex > -1) {
      this.markers.splice(markerIndex, 1);
      if (this.markerLayerOption.cluster) {
        this.removePoint(markerIndex);
        if (this.mapsService) {
          this.getClusterMarker(this.bbox, this.zoom);
        }
      }
    }
  }

  /**
   * 隐藏 marker 在每个 marker 上单独修改属性而不是在 markerContainer 上修改（在 markerContainer 修改会有用户在场景加载完之前调用失败的问题）
   */
  hide() {
    this.markers.map(m => {
      m.getElement().style.opacity = '0';
    });
    this.clusterMarkers.map(m => {
      m.getElement().style.opacity = '0';
    });
  }

  /**
   * 显示 marker
   */
  show() {
    this.markers.map(m => {
      m.getElement().style.opacity = '1';
    });
    this.clusterMarkers.map(m => {
      m.getElement().style.opacity = '1';
    });
  }

  // 返回当下的markers数据，有聚合图时返回聚合的marker列表，否则返回原始maerker列表
  getMarkers() {
    const cluster = this.markerLayerOption.cluster;
    return cluster ? this.clusterMarkers : this.markers;
  }
  getOriginMarkers() {
    return this.markers;
  }

  // 批量添加marker到scene
  addMarkers() {
    this.getMarkers().forEach(marker => {
      marker.addTo(this.scene);
    });
  }

  // 清除图层里的marker
  clear() {
    this.markers.forEach(marker => {
      marker.remove();
    });
    this.clusterMarkers.forEach(clusterMarker => {
      clusterMarker.remove();
    });
    this.markers = [];
    this.points = [];
    this.clusterMarkers = [];
  }
  destroy() {
    this.clear();
    this.removeAllListeners();
    this.mapsService.off('camerachange', this.update);
    this.mapsService.off('viewchange', this.update);
    this.mapsService.off('camerachange', this.setContainerSize.bind(this));
    this.mapsService.off('viewchange', this.setContainerSize.bind(this));
  }

  // 将marker数据保存在point中
  addPoint(marker, id) {
    const {
      lng,
      lat
    } = marker.getLnglat();
    const feature = {
      geometry: {
        type: 'Point',
        coordinates: [lng, lat]
      },
      properties: _objectSpread(_objectSpread({}, marker.getExtData()), {}, {
        marker_id: id
      })
    };
    this.points.push(feature);
    if (this.clusterIndex) {
      // 在新增点的时候需要更新 cluster 的数据
      this.clusterIndex.load(this.points);
    }
  }
  removePoint(id) {
    const targetIndex = this.points.findIndex(point => point.properties.marker_id === id);
    if (targetIndex > -1) {
      this.points.splice(targetIndex, 1);
    }
    if (this.clusterIndex) {
      // 在删除点的时候需要更新 cluster 的数据
      this.clusterIndex.load(this.points);
    }
  }
  initCluster() {
    if (!this.markerLayerOption.cluster) {
      return;
    }
    const {
      radius,
      minZoom = 0,
      maxZoom
    } = this.markerLayerOption.clusterOption;
    this.clusterIndex = new Supercluster({
      radius,
      minZoom,
      maxZoom
    });
    // @ts-ignore
    this.clusterIndex.load(this.points);
  }
  getClusterMarker(viewBounds, zoom) {
    const viewBBox = viewBounds[0].concat(viewBounds[1]);
    const clusterPoint = this.clusterIndex.getClusters(viewBBox, zoom);
    this.clusterMarkers.forEach(marker => {
      marker.remove();
    });
    this.clusterMarkers = [];
    clusterPoint.forEach(feature => {
      var _feature$properties;
      const {
        field,
        method
      } = this.markerLayerOption.clusterOption;
      // 处理聚合数据
      if ((_feature$properties = feature.properties) !== null && _feature$properties !== void 0 && _feature$properties.cluster_id) {
        var _feature$properties2;
        const clusterData = this.getLeaves((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.cluster_id);
        feature.properties.clusterData = clusterData;
        if (field && method) {
          const columnData = clusterData === null || clusterData === void 0 ? void 0 : clusterData.map(item => {
            const data = {
              [field]: item.properties[field]
            };
            return data;
          });
          const column = Satistics.getColumn(columnData, field);
          const stat = Satistics.getSatByColumn(method, column);
          const fieldName = 'point_' + method;
          feature.properties[fieldName] = stat.toFixed(2);
        }
      }
      const marker = this.clusterMarker(feature);
      this.clusterMarkers.push(marker);
      marker.addTo(this.scene);
    });
  }
  getLeaves(clusterId, limit = Infinity, offset = 0) {
    if (!clusterId) {
      return null;
    }
    return this.clusterIndex.getLeaves(clusterId, limit, offset);
  }
  clusterMarker(feature) {
    const clusterOption = this.markerLayerOption.clusterOption;
    const {
      element = this.generateElement.bind(this)
    } = clusterOption;
    const marker = new Marker({
      element: element(feature)
    }).setLnglat({
      lng: feature.geometry.coordinates[0],
      lat: feature.geometry.coordinates[1]
    });
    return marker;
  }
  normalMarker(feature) {
    const marker_id = feature.properties.marker_id;
    return this.markers[marker_id];
  }
  update() {
    if (!this.mapsService) {
      return;
    }
    // 当图层中无marker时，无需更新
    if (this.markers.length === 0) {
      return;
    }
    const zoom = this.mapsService.getZoom();
    const bbox = this.mapsService.getBounds();
    if (!this.bbox || Math.abs(zoom - this.zoom) >= 1 || !boundsContains(this.bbox, bbox)) {
      this.bbox = padBounds(bbox, 0.5);
      this.zoom = Math.floor(zoom);
      this.getClusterMarker(this.bbox, this.zoom);
    }
  }
  generateElement(feature) {
    const el = DOM.create('div', 'l7-marker-cluster');
    const label = DOM.create('div', '', el);
    const span = DOM.create('span', '', label);
    const {
      field,
      method
    } = this.markerLayerOption.clusterOption;
    feature.properties.point_count = feature.properties.point_count || 1;
    const text = field && method ? feature.properties['point_' + method] || feature.properties[field] : feature.properties.point_count;
    span.textContent = text;
    return el;
  }
}