import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { DOM, lodashUtil } from '@antv/l7-utils';
import Popup from "./popup";
const {
  get
} = lodashUtil;
export { LayerPopup };
export default class LayerPopup extends Popup {
  constructor(...args) {
    super(...args);
    /**
     * 用于统计当前帧当中，layer 被点击的次数
     */
    _defineProperty(this, "layerClickCountByFrame", 0);
    /**
     * 用于保存图层对应的事件回调以及配置信息
     * @protected
     */
    _defineProperty(this, "layerConfigMap", new WeakMap());
    /**
     * 当期正在展示的图层以及对应元素 id 的信息
     * @protected
     */
    _defineProperty(this, "displayFeatureInfo", void 0);
    _defineProperty(this, "onLayerClick", (layer, e) => {
      requestAnimationFrame(() => {
        if (this.popupOption.closeOnClick) {
          this.layerClickCountByFrame++;
        }
        if (this.isShow && this.isSameFeature(layer, e.featureId)) {
          this.hide();
        } else {
          const {
            title,
            content
          } = this.getLayerInfoFrag(layer, e);
          this.setDOMContent(content);
          this.setLnglat(e.lngLat);
          this.setTitle(title);
          this.setDisplayFeatureInfo({
            layer,
            featureId: e.featureId
          });
          this.show();
        }
      });
    });
    _defineProperty(this, "onSceneClick", () => {
      this.layerClickCountByFrame = 0;
      requestAnimationFrame(() => {
        if (!this.layerClickCountByFrame) {
          this.hide();
        }
      });
    });
    _defineProperty(this, "onLayerHide", () => {
      this.hide();
      this.setDisplayFeatureInfo(undefined);
    });
    /**
     * 覆盖 Popup 中的默认的 closeOnClick 行为
     */
    // tslint:disable-next-line:no-empty
    _defineProperty(this, "updateCloseOnClick", () => {});
  }
  get layerConfigItems() {
    var _ref;
    const {
      config,
      items
    } = this.popupOption;
    return (_ref = config !== null && config !== void 0 ? config : items) !== null && _ref !== void 0 ? _ref : [];
  }
  addTo(scene) {
    super.addTo(scene);
    this.bindLayerEvent();
    this.hide();
    return this;
  }
  remove() {
    super.remove();
    this.unbindLayerEvent();
    return this;
  }
  setOptions(option) {
    this.unbindLayerEvent();
    const newOption = _objectSpread({}, option);
    const trigger = newOption.trigger || this.popupOption.trigger;
    const items = newOption.items || this.popupOption.items;
    const isEmptyItems = (items === null || items === void 0 ? void 0 : items.length) === 0;
    newOption.followCursor = trigger === 'hover' && !isEmptyItems;
    const isShow = this.isShow;
    super.setOptions(newOption);
    this.bindLayerEvent();
    if (isEmptyItems || !isShow) {
      this.hide();
    }
    return this;
  }
  getDefault(option) {
    const isHoverTrigger = option.trigger !== 'click';
    return _objectSpread(_objectSpread({}, super.getDefault(option)), {}, {
      trigger: 'hover',
      followCursor: isHoverTrigger,
      lngLat: {
        lng: 0,
        lat: 0
      },
      offsets: [0, 10],
      closeButton: false,
      closeOnClick: true,
      autoClose: false,
      closeOnEsc: false
    });
  }

  /**
   * 绑定对应的图层事件
   * @protected
   */
  bindLayerEvent() {
    const {
      trigger,
      closeOnClick
    } = this.popupOption;
    this.layerConfigItems.forEach(configItem => {
      var _layer$getSource;
      const layer = this.getLayerByConfig(configItem);
      if (!layer) {
        return;
      }
      const layerInfo = _objectSpread({}, configItem);
      if (trigger === 'hover') {
        const onMouseMove = this.onLayerMouseMove.bind(this, layer);
        const onMouseOut = this.onLayerMouseOut.bind(this, layer);
        layerInfo.onMouseMove = onMouseMove;
        layerInfo.onMouseOut = onMouseOut;
        layer === null || layer === void 0 || layer.on('mousemove', onMouseMove);
        layer === null || layer === void 0 || layer.on('mouseout', onMouseOut);
      } else {
        var _this$mapsService;
        const onLayerClick = this.onLayerClick.bind(this, layer);
        layerInfo.onClick = onLayerClick;
        layer === null || layer === void 0 || layer.on('click', onLayerClick);
        const mapContainer = (_this$mapsService = this.mapsService) === null || _this$mapsService === void 0 ? void 0 : _this$mapsService.getMapContainer();
        if (mapContainer && closeOnClick) {
          mapContainer.addEventListener('click', this.onSceneClick);
        }
      }
      const source = layer === null || layer === void 0 || (_layer$getSource = layer.getSource) === null || _layer$getSource === void 0 ? void 0 : _layer$getSource.call(layer);
      const onSourceUpdate = this.onSourceUpdate.bind(this);
      source === null || source === void 0 || source.on('update', onSourceUpdate);
      layerInfo.onSourceUpdate = onSourceUpdate;
      this.layerConfigMap.set(layer, layerInfo);
    });
  }

  /**
   * 解绑对应的图层事件
   * @protected
   */
  unbindLayerEvent() {
    this.layerConfigItems.forEach(configItem => {
      var _this$mapsService2;
      const layer = this.getLayerByConfig(configItem);
      const layerInfo = layer && this.layerConfigMap.get(layer);
      if (!layerInfo) {
        return;
      }
      const {
        onMouseMove,
        onMouseOut,
        onClick,
        onSourceUpdate
      } = layerInfo;
      if (onMouseMove) {
        layer.off('mousemove', onMouseMove);
      }
      if (onMouseOut) {
        layer.off('mouseout', onMouseOut);
      }
      if (onClick) {
        layer.off('click', onClick);
      }
      if (onSourceUpdate) {
        var _layer$getSource2;
        layer === null || layer === void 0 || (_layer$getSource2 = layer.getSource()) === null || _layer$getSource2 === void 0 || _layer$getSource2.off('update', onSourceUpdate);
      }
      const mapContainer = (_this$mapsService2 = this.mapsService) === null || _this$mapsService2 === void 0 ? void 0 : _this$mapsService2.getMapContainer();
      if (mapContainer) {
        mapContainer.removeEventListener('click', this.onSceneClick);
      }
    });
  }
  onLayerMouseMove(layer, e) {
    if (!this.isSameFeature(layer, e.featureId)) {
      const {
        title,
        content
      } = this.getLayerInfoFrag(layer, e);
      this.setDOMContent(content);
      this.setTitle(title);
      this.setDisplayFeatureInfo({
        layer,
        featureId: e.featureId
      });
      this.show();
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onLayerMouseOut(layer, e) {
    this.setDisplayFeatureInfo(undefined);
    if (this.isShow) {
      this.hide();
    }
  }
  onSourceUpdate() {
    this.hide();
    this.setDisplayFeatureInfo(undefined);
  }

  /**
   * 通过当前图层和对应选中的元素获取气泡展示的 HTML 内容
   * @param layer
   * @param e
   * @protected
   */
  getLayerInfoFrag(layer, e) {
    const layerInfo = this.layerConfigMap.get(layer);
    let titleFrag;
    const contentFrag = document.createDocumentFragment();
    if (layerInfo) {
      let feature = e.feature;
      if (feature.type === 'Feature' && 'properties' in feature && 'geometry' in feature) {
        feature = feature.properties;
      }
      const {
        title,
        fields,
        customContent
      } = layerInfo;
      if (title) {
        titleFrag = document.createDocumentFragment();
        const titleElement = title instanceof Function ? title(feature) : title;
        DOM.appendElementType(titleFrag, titleElement);
      }
      if (customContent) {
        const content = customContent instanceof Function ? customContent(feature) : customContent;
        DOM.appendElementType(contentFrag, content);
      } else if (fields !== null && fields !== void 0 && fields.length) {
        fields === null || fields === void 0 || fields.forEach(fieldConfig => {
          var _ref2, _ref3;
          const {
            field,
            formatField,
            formatValue,
            getValue
          } = typeof fieldConfig === 'string' ?
          // tslint:disable-next-line:no-object-literal-type-assertion
          {
            field: fieldConfig
          } : fieldConfig;
          const row = DOM.create('div', 'l7-layer-popup__row');
          const value = getValue ? getValue(e.feature) : get(feature, field);
          const fieldElement = (_ref2 = formatField instanceof Function ? formatField(field, feature) : formatField) !== null && _ref2 !== void 0 ? _ref2 : field;
          let valueElement = (_ref3 = formatValue instanceof Function ? formatValue(value, feature) : formatValue) !== null && _ref3 !== void 0 ? _ref3 : value;
          const fieldSpan = DOM.create('span', 'l7-layer-popup__key', row);
          DOM.appendElementType(fieldSpan, fieldElement);
          DOM.appendElementType(fieldSpan, document.createTextNode('：'));
          const valueSpan = DOM.create('span', 'l7-layer-popup__value', row);

          // 当 value 中每项元素均为基础数据类型时，用逗号隔开
          if (Array.isArray(valueElement) && valueElement.every(item => !(item instanceof Object))) {
            valueElement = valueElement.map(item => String(item)).join(',');
          }
          DOM.appendElementType(valueSpan, valueElement);
          contentFrag.appendChild(row);
        });
      }
    }
    return {
      title: titleFrag,
      content: contentFrag
    };
  }

  /**
   * 通过 Layer 配置访问到真实的 Layer 实例
   * @param configItem
   * @protected
   */
  getLayerByConfig(configItem) {
    const layer = configItem.layer;
    if (layer instanceof Object) {
      return layer;
    }
    if (typeof layer === 'string') {
      return this.layerService.getLayer(layer) || this.layerService.getLayerByName(layer);
    }
  }

  /**
   * 判断当前展示的 Feature 是否和上一次查看的一致
   * @param layer
   * @param featureId
   * @protected
   */
  isSameFeature(layer, featureId) {
    const displayFeatureInfo = this.displayFeatureInfo;
    return displayFeatureInfo && layer === displayFeatureInfo.layer && featureId === displayFeatureInfo.featureId;
  }
  setDisplayFeatureInfo(displayFeatureInfo) {
    const oldDisplayFeatureInfo = this.displayFeatureInfo;
    if (oldDisplayFeatureInfo) {
      oldDisplayFeatureInfo.layer.off('hide', this.onLayerHide);
    }
    if (displayFeatureInfo) {
      displayFeatureInfo.layer.on('hide', this.onLayerHide);
    }
    this.displayFeatureInfo = displayFeatureInfo;
  }
}