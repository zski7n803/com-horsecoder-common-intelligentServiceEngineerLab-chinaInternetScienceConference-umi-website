import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Popper } from "../../utils/popper";
import ButtonControl from "./buttonControl";
export { PopperControl };
const PopperPlacementMap = {
  topleft: 'right-start',
  topcenter: 'bottom',
  topright: 'left-start',
  bottomleft: 'right-end',
  bottomcenter: 'top',
  bottomright: 'left-end',
  lefttop: 'bottom-start',
  leftcenter: 'right',
  leftbottom: 'top-start',
  righttop: 'bottom-end',
  rightcenter: 'left',
  rightbottom: 'top-end'
};
export default class PopperControl extends ButtonControl {
  constructor(...args) {
    super(...args);
    /**
     * 气泡实例
     * @protected
     */
    _defineProperty(this, "popper", void 0);
  }
  getPopper() {
    return this.popper;
  }
  hide() {
    this.popper.hide();
    super.hide();
  }

  /**
   * 获取默认配置
   * @param option
   */
  getDefault(option) {
    var _option$position;
    const defaultOption = super.getDefault(option);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const position = (_option$position = option === null || option === void 0 ? void 0 : option.position) !== null && _option$position !== void 0 ? _option$position : defaultOption.position;
    return _objectSpread(_objectSpread({}, super.getDefault(option)), {}, {
      popperPlacement: position instanceof Element ? 'bottom' : PopperPlacementMap[position],
      popperTrigger: 'click'
    });
  }
  onAdd() {
    const button = super.onAdd();
    this.initPopper();
    return button;
  }
  onRemove() {
    this.popper.destroy();
  }
  initPopper() {
    const {
      popperClassName,
      popperPlacement,
      popperTrigger
    } = this.controlOption;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const popperContainer = this.mapsService.getMapContainer();

    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    this.popper = new Popper(this.button, {
      className: popperClassName,
      placement: popperPlacement,
      trigger: popperTrigger,
      container: popperContainer,
      unique: true
    });
    this.popper.on('show', () => {
      this.emit('popperShow', this);
    }).on('hide', () => {
      this.emit('popperHide', this);
    });
    return this.popper;
  }
  setOptions(option) {
    super.setOptions(option);
    if (this.checkUpdateOption(option, ['popperPlacement', 'popperTrigger', 'popperClassName'])) {
      const content = this.popper.getContent();
      this.popper.destroy();
      this.initPopper();
      this.popper.setContent(content);
    }
  }
}