import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { PositionType } from '@antv/l7-core';
import { DOM } from '@antv/l7-utils';
import { createL7Icon } from "../utils/icon";
import { Control } from "./baseControl";
export { Zoom };
export default class Zoom extends Control {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "disabled", void 0);
    _defineProperty(this, "zoomInButton", void 0);
    _defineProperty(this, "zoomOutButton", void 0);
    _defineProperty(this, "zoomNumDiv", void 0);
    _defineProperty(this, "zoomIn", () => {
      if (!this.disabled && this.mapsService.getZoom() < this.mapsService.getMaxZoom()) {
        this.mapsService.zoomIn();
      }
    });
    _defineProperty(this, "zoomOut", () => {
      if (!this.disabled && this.mapsService.getZoom() > this.mapsService.getMinZoom()) {
        this.mapsService.zoomOut();
      }
    });
    _defineProperty(this, "updateDisabled", () => {
      const mapsService = this.mapsService;
      this.zoomInButton.removeAttribute('disabled');
      this.zoomOutButton.removeAttribute('disabled');
      if (this.disabled || mapsService.getZoom() <= mapsService.getMinZoom()) {
        this.zoomOutButton.setAttribute('disabled', 'true');
      }
      if (this.controlOption.showZoom && this.zoomNumDiv) {
        this.zoomNumDiv.innerText = String(Math.floor(mapsService.getZoom()));
      }
      if (this.disabled || mapsService.getZoom() >= mapsService.getMaxZoom()) {
        this.zoomInButton.setAttribute('disabled', 'true');
      }
    });
  }
  getDefault(option) {
    return _objectSpread(_objectSpread({}, super.getDefault(option)), {}, {
      position: PositionType.BOTTOMRIGHT,
      name: 'zoom',
      zoomInText: createL7Icon('l7-icon-enlarge'),
      zoomInTitle: 'Zoom in',
      zoomOutText: createL7Icon('l7-icon-narrow'),
      zoomOutTitle: 'Zoom out',
      showZoom: false
    });
  }
  setOptions(newOptions) {
    super.setOptions(newOptions);
    if (this.checkUpdateOption(newOptions, ['zoomInText', 'zoomInTitle', 'zoomOutText', 'zoomOutTitle', 'showZoom'])) {
      this.resetButtonGroup(this.container);
    }
  }
  onAdd() {
    const container = DOM.create('div', 'l7-control-zoom');
    this.resetButtonGroup(container);
    this.mapsService.on('zoomend', this.updateDisabled);
    this.mapsService.on('zoomchange', this.updateDisabled);
    return container;
  }
  onRemove() {
    this.mapsService.off('zoomend', this.updateDisabled);
    this.mapsService.off('zoomchange', this.updateDisabled);
  }
  disable() {
    this.disabled = true;
    this.updateDisabled();
    return this;
  }
  enable() {
    this.disabled = false;
    this.updateDisabled();
    return this;
  }
  resetButtonGroup(container) {
    DOM.clearChildren(container);
    this.zoomInButton = this.createButton(this.controlOption.zoomInText, this.controlOption.zoomInTitle, 'l7-button-control', container, this.zoomIn);
    if (this.controlOption.showZoom) {
      this.zoomNumDiv = this.createButton('0', '', 'l7-button-control l7-control-zoom__number', container);
    }
    this.zoomOutButton = this.createButton(this.controlOption.zoomOutText, this.controlOption.zoomOutTitle, 'l7-button-control', container, this.zoomOut);
    this.updateDisabled();
  }
  createButton(html, tile, className, container, fn) {
    const link = DOM.create('button', className, container);
    if (typeof html === 'string') {
      link.innerHTML = html;
    } else {
      link.append(html);
    }
    link.title = tile;
    if (fn) {
      link.addEventListener('click', fn);
    }
    return link;
  }
}