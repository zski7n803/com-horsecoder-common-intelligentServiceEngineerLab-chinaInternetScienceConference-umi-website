import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { GaodeMapStyleConfig, MapboxMapStyleConfig } from "../constants";
import { createL7Icon } from "../utils/icon";
import SelectControl from "./baseControl/selectControl";
export { MapTheme };
export default class MapTheme extends SelectControl {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "onMapThemeChange", () => {
      this.mapsService.setMapStyle(this.selectValue[0]);
    });
  }
  getDefault(option) {
    return _objectSpread(_objectSpread({}, super.getDefault(option)), {}, {
      title: '地图样式',
      btnIcon: createL7Icon('l7-icon-color'),
      options: []
    });
  }
  getStyleOptions() {
    const mapStyleConfig = this.mapsService.getType() === 'mapbox' ? MapboxMapStyleConfig : GaodeMapStyleConfig;
    return Object.entries(this.mapsService.getMapStyleConfig()).filter(([key, value]) => typeof value === 'string' && key !== 'blank').map(([key, value]) => {
      var _mapStyleConfig$key;
      // @ts-ignore
      const {
        text,
        img
      } = (_mapStyleConfig$key = mapStyleConfig[key]) !== null && _mapStyleConfig$key !== void 0 ? _mapStyleConfig$key : {};
      return {
        text: text !== null && text !== void 0 ? text : key,
        value,
        img,
        key
      };
    });
  }
  getMapStyle() {
    return this.mapsService.getMapStyle();
  }
  onAdd() {
    var _this$controlOption$o;
    if (!((_this$controlOption$o = this.controlOption.options) !== null && _this$controlOption$o !== void 0 && _this$controlOption$o.length)) {
      this.controlOption.options = this.getStyleOptions();
    }
    if (this.controlOption.defaultValue) {
      var _this$controlOption$o2, _this$controlOption$o3;
      const defaultValue = this.controlOption.defaultValue;
      this.controlOption.defaultValue = (_this$controlOption$o2 = (_this$controlOption$o3 = this.controlOption.options.find(item => item.key === defaultValue)) === null || _this$controlOption$o3 === void 0 ? void 0 : _this$controlOption$o3.value) !== null && _this$controlOption$o2 !== void 0 ? _this$controlOption$o2 : defaultValue;
    } else {
      const defaultStyle = this.getMapStyle();
      if (defaultStyle) {
        this.controlOption.defaultValue = defaultStyle;
      } else {
        // @ts-ignore
        this.mapsService.map.once('styledata', () => {
          const mapboxStyle = this.mapsService.getMapStyle();
          this.controlOption.defaultValue = mapboxStyle;
          this.setSelectValue(mapboxStyle, false);
        });
      }
    }
    this.on('selectChange', this.onMapThemeChange);
    return super.onAdd();
  }
  getIsMultiple() {
    return false;
  }
}