import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { DOM } from '@antv/l7-utils';
import { createL7Icon } from "../utils/icon";
import ScreenFull from "../utils/screenfull";
import ButtonControl from "./baseControl/buttonControl";
export { Fullscreen };
export default class Fullscreen extends ButtonControl {
  constructor(option) {
    var _this;
    super(option);
    _this = this;
    _defineProperty(this, "isFullscreen", false);
    _defineProperty(this, "mapContainer", void 0);
    _defineProperty(this, "toggleFullscreen", /*#__PURE__*/_asyncToGenerator(function* () {
      if (ScreenFull.isEnabled) {
        yield ScreenFull.toggle(_this.mapContainer);
      }
    }));
    _defineProperty(this, "onClick", () => {
      this.toggleFullscreen();
    });
    _defineProperty(this, "onFullscreenChange", () => {
      this.isFullscreen = !!document.fullscreenElement;
      const {
        btnText,
        btnIcon,
        title,
        exitBtnText,
        exitBtnIcon,
        exitTitle
      } = this.controlOption;
      if (this.isFullscreen) {
        this.setBtnTitle(exitTitle);
        this.setBtnText(exitBtnText);
        this.setBtnIcon(exitBtnIcon);
      } else {
        this.setBtnTitle(title);
        this.setBtnText(btnText);
        this.setBtnIcon(btnIcon);
      }
      this.emit('fullscreenChange', this.isFullscreen);
    });
    if (!ScreenFull.isEnabled) {
      console.warn('当前浏览器环境不支持对地图全屏化');
    }
  }
  setOptions(newOptions) {
    const {
      exitBtnText,
      exitBtnIcon,
      exitTitle
    } = newOptions;
    if (this.isFullscreen) {
      if (this.checkUpdateOption(newOptions, ['exitBtnIcon'])) {
        this.setBtnIcon(exitBtnIcon);
      }
      if (this.checkUpdateOption(newOptions, ['exitBtnText'])) {
        this.setBtnText(exitBtnText);
      }
      if (this.checkUpdateOption(newOptions, ['exitTitle'])) {
        this.setBtnTitle(exitTitle);
      }
    }
    super.setOptions(newOptions);
  }
  onAdd() {
    const button = super.onAdd();
    button.addEventListener('click', this.onClick);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    this.mapContainer = DOM.getContainer(this.scene.getSceneConfig().id);
    this.mapContainer.addEventListener('fullscreenchange', this.onFullscreenChange);
    return button;
  }
  onRemove() {
    super.onRemove();
    this.mapContainer.removeEventListener('fullscreenchange', this.onFullscreenChange);
  }
  getDefault(option) {
    return _objectSpread(_objectSpread({}, super.getDefault(option)), {}, {
      title: '全屏',
      btnIcon: createL7Icon('l7-icon-fullscreen'),
      exitTitle: '退出全屏',
      exitBtnIcon: createL7Icon('l7-icon-exit-fullscreen')
    });
  }
}