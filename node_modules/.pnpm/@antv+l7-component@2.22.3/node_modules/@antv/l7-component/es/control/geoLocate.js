import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createL7Icon } from "../utils/icon";
import ButtonControl from "./baseControl/buttonControl";
export { GeoLocate };
export default class GeoLocate extends ButtonControl {
  constructor(option) {
    var _this;
    super(option);
    _this = this;
    /**
     * 通过浏览器 API 获取当前所在经纬度
     */
    _defineProperty(this, "getGeoLocation", () => {
      return new Promise((resolve, reject) => {
        window.navigator.geolocation.getCurrentPosition(({
          coords
        }) => {
          const {
            longitude,
            latitude
          } = coords !== null && coords !== void 0 ? coords : {};
          if (!isNaN(longitude) && !isNaN(latitude)) {
            resolve([longitude, latitude]);
          } else {
            reject();
          }
        }, e => {
          reject(e);
        });
      });
    });
    _defineProperty(this, "onClick", /*#__PURE__*/_asyncToGenerator(function* () {
      if (!window.navigator.geolocation) {
        return;
      }
      const {
        transform
      } = _this.controlOption;
      const position = yield _this.getGeoLocation();
      const currentZoom = _this.mapsService.getZoom();
      _this.mapsService.setZoomAndCenter(currentZoom > 15 ? currentZoom : 15, transform ? yield transform(position) : position);
    }));
    if (!window.navigator.geolocation) {
      console.warn('当前浏览器环境不支持获取地理定位');
    }
  }
  getDefault(option) {
    return _objectSpread(_objectSpread({}, super.getDefault(option)), {}, {
      title: '定位',
      btnIcon: createL7Icon('l7-icon-reposition')
    });
  }
  onAdd() {
    const button = super.onAdd();
    button.addEventListener('click', this.onClick);
    return button;
  }
}