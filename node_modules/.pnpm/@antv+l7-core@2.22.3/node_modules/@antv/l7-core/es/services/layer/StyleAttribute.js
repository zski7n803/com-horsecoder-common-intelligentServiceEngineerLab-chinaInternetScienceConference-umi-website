import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { lodashUtil } from '@antv/l7-utils';
const {
  isNil
} = lodashUtil;
export default class StyleAttribute {
  constructor(options) {
    _defineProperty(this, "name", void 0);
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "scale", void 0);
    _defineProperty(this, "descriptor", void 0);
    _defineProperty(this, "featureBufferLayout", []);
    _defineProperty(this, "needRescale", false);
    _defineProperty(this, "needRemapping", false);
    _defineProperty(this, "needRegenerateVertices", false);
    _defineProperty(this, "featureRange", {
      startIndex: 0,
      endIndex: Infinity
    });
    _defineProperty(this, "vertexAttribute", void 0);
    _defineProperty(this, "defaultCallback", params => {
      // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量
      if (params.length === 0) {
        var _this$scale;
        return ((_this$scale = this.scale) === null || _this$scale === void 0 ? void 0 : _this$scale.defaultValues) || [];
      }
      return params.map((param, idx) => {
        var _this$scale2;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const scaleFunc = (_this$scale2 = this.scale) === null || _this$scale2 === void 0 ? void 0 : _this$scale2.scalers[idx].func;
        // @ts-ignore // TODO 支持双变量映射
        const value = scaleFunc(param);
        return value;
      });
    });
    this.setProps(options);
  }
  setProps(options) {
    Object.assign(this, options);
  }
  mapping(params) {
    var _this$scale3;
    /**
     * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值
     */
    if ((_this$scale3 = this.scale) !== null && _this$scale3 !== void 0 && _this$scale3.callback) {
      var _this$scale4;
      // 使用用户返回的值处理
      const ret = (_this$scale4 = this.scale) === null || _this$scale4 === void 0 ? void 0 : _this$scale4.callback(...params);
      if (!isNil(ret)) {
        return [ret];
      }
    }

    // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理
    return this.defaultCallback(params);
  }
  resetDescriptor() {
    if (this.descriptor) {
      this.descriptor.buffer.data = [];
    }
  }
}