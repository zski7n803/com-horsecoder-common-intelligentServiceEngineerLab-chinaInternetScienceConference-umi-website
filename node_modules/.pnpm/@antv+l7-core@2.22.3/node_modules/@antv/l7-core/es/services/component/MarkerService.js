import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
export default class MarkerService {
  constructor() {
    _defineProperty(this, "container", void 0);
    _defineProperty(this, "scene", void 0);
    _defineProperty(this, "mapsService", void 0);
    _defineProperty(this, "markers", []);
    _defineProperty(this, "markerLayers", []);
    _defineProperty(this, "unAddMarkers", []);
    _defineProperty(this, "unAddMarkerLayers", []);
  }
  addMarkerLayer(markerLayer) {
    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {
      this.markerLayers.push(markerLayer);
      markerLayer.addTo(this.scene);
    } else {
      this.unAddMarkerLayers.push(markerLayer);
    }
  }
  removeMarkerLayer(layer) {
    layer.destroy();
    this.markerLayers.indexOf(layer);
    const markerIndex = this.markerLayers.indexOf(layer);
    if (markerIndex > -1) {
      this.markerLayers.splice(markerIndex, 1);
    }
  }
  addMarker(marker) {
    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {
      this.markers.push(marker);
      marker.addTo(this.scene);
    } else {
      this.unAddMarkers.push(marker);
    }
  }
  addMarkers() {
    this.unAddMarkers.forEach(marker => {
      marker.addTo(this.scene);
      this.markers.push(marker);
    });
    this.unAddMarkers = [];
  }
  addMarkerLayers() {
    this.unAddMarkerLayers.forEach(markerLayer => {
      this.markerLayers.push(markerLayer);
      markerLayer.addTo(this.scene);
    });
    this.unAddMarkers = [];
  }
  removeMarker(marker) {
    marker.remove();
    this.markers.indexOf(marker);
    const markerIndex = this.markers.indexOf(marker);
    if (markerIndex > -1) {
      this.markers.splice(markerIndex, 1);
    }
  }
  removeAllMarkers() {
    this.destroy();
  }
  init(scene) {
    this.scene = scene;
    this.mapsService = scene.mapService;
  }
  destroy() {
    this.markers.forEach(marker => {
      marker.remove();
    });
    this.markers = [];
    this.markerLayers.forEach(layer => {
      layer.destroy();
    });
    this.markerLayers = [];
  }
  removeMakerLayerMarker(layer) {
    layer.destroy();
  }
}