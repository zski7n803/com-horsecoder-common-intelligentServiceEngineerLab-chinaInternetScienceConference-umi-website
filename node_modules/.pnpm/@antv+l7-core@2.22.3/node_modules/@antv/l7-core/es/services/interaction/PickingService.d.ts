import type { L7Container } from '../../inversify.config';
import type { IInteractionTarget } from '../interaction/IInteractionService';
import type { ILayer } from '../layer/ILayerService';
import type { ILngLat } from '../map/IMapService';
import type { IPickingService } from './IPickingService';
export default class PickingService implements IPickingService {
    private readonly container;
    constructor(container: L7Container);
    pickedColors: Uint8Array | undefined;
    pickedTileLayers: ILayer[];
    private get mapService();
    private get rendererService();
    private get configService();
    private get interactionService();
    private get layerService();
    private pickingFBO;
    private width;
    private height;
    private alreadyInPicking;
    private pickBufferScale;
    init(id: string): void;
    boxPickLayer(layer: ILayer, box: [number, number, number, number], cb: (...args: any[]) => void): Promise<any>;
    pickBox(layer: ILayer, box: [number, number, number, number]): Promise<any[]>;
    handleCursor(layer: ILayer, type: string): void;
    destroy(): void;
    pickFromPickingFBO: (layer: ILayer, { x, y, lngLat, type, target }: IInteractionTarget) => Promise<boolean>;
    private pickingAllLayer;
    private isPickingAllLayer;
    private resizePickingFBO;
    private pickingLayers;
    triggerHoverOnLayer(layer: ILayer, target: {
        x: number;
        y: number;
        type: string;
        lngLat: ILngLat;
        feature: unknown;
        featureId: number | null;
    }): void;
}
