import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { lodashUtil } from '@antv/l7-utils';
import { MaskOperation } from "../layer/ILayerService";
import WarnInfo from "./warnInfo";
const {
  merge
} = lodashUtil;
/**
 * 场景默认配置项
 */
const defaultSceneConfig = {
  id: 'map',
  logoPosition: 'bottomleft',
  logoVisible: true,
  antialias: true,
  stencil: true,
  preserveDrawingBuffer: false,
  pickBufferScale: 1.0,
  fitBoundsOptions: {
    animate: false
  }
};

/**
 * 图层基类默认样式属性
 */
const defaultLayerConfig = {
  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],
  size: 10,
  shape: 'circle',
  scales: {},
  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],
  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],
  minZoom: -1,
  maxZoom: 24,
  visible: true,
  autoFit: false,
  pickingBuffer: 0,
  enablePropagation: false,
  zIndex: 0,
  blend: 'normal',
  maskLayers: [],
  enableMask: true,
  maskOperation: MaskOperation.AND,
  pickedFeatureID: -1,
  enableMultiPassRenderer: false,
  enablePicking: true,
  active: false,
  activeColor: '#2f54eb',
  enableHighlight: false,
  enableSelect: false,
  highlightColor: '#2f54eb',
  activeMix: 0,
  selectColor: 'blue',
  selectMix: 0,
  enableLighting: false,
  animateOption: {
    enable: false,
    interval: 0.2,
    duration: 4,
    trailLength: 0.15
  },
  forward: true // 默认是正方向
};

// @see https://github.com/epoberezkin/ajv#options
// const ajv = new Ajv({
//   allErrors: true,
//   verbose: true,
// });

export default class GlobalConfigService {
  constructor() {
    /**
     * 全部场景配置项缓存
     */
    _defineProperty(this, "sceneConfigCache", {});
    /**
     * 场景配置项校验器
     */
    // private sceneConfigValidator: Ajv.ValidateFunction;
    /**
     * 地图配置项校验器
     */
    // private mapConfigValidator: Ajv.ValidateFunction;
    /**
     * 全部图层配置项缓存
     */
    _defineProperty(this, "layerConfigCache", {});
    /**
     * 数据映射缓存
     */
    _defineProperty(this, "layerAttributeConfigCache", {});
  }
  /**
   * 保存每一种 Layer 配置项的校验器
   */
  // private layerConfigValidatorCache: {
  //   [layerName: string]: Ajv.ValidateFunction;
  // } = {};

  getSceneConfig(sceneId) {
    return this.sceneConfigCache[sceneId];
  }
  getSceneWarninfo(id) {
    return WarnInfo[id];
  }
  setSceneConfig(sceneId, config) {
    this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);
  }

  // public validateSceneConfig(data: object) {
  //   return this.validate(this.sceneConfigValidator, data);
  // }

  // public validateMapConfig(data: object) {
  //   return this.validate(this.mapConfigValidator, data);
  // }

  getLayerConfig(layerId) {
    // @ts-ignore
    return this.layerConfigCache[layerId];
  }
  setLayerConfig(sceneId, layerId, config) {
    // @ts-ignore
    this.layerConfigCache[layerId] = _objectSpread({}, merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));
  }
  getAttributeConfig(layerId) {
    return this.layerAttributeConfigCache[layerId];
  }
  setAttributeConfig(layerId, attr) {
    // TODO
    this.layerAttributeConfigCache[layerId] = _objectSpread(_objectSpread({}, this.layerAttributeConfigCache[layerId]), attr);
  }
  clean() {
    this.sceneConfigCache = {};
    this.layerConfigCache = {};
  }

  // @postConstruct()
  // private registerSceneConfigSchemaValidator() {
  //   this.sceneConfigValidator = ajv.compile(sceneConfigSchema);
  //   this.mapConfigValidator = ajv.compile(mapConfigSchema);
  // }

  // private validate(
  //   validateFunc: Ajv.ValidateFunction | undefined,
  //   data: object,
  // ) {
  //   if (validateFunc) {
  //     const valid = validateFunc(data);
  //     if (!valid) {
  //       return {
  //         valid,
  //         errors: validateFunc.errors,
  //         errorText: ajv.errorsText(validateFunc.errors),
  //       };
  //     }
  //   }
  //   return {
  //     valid: true,
  //     errors: null,
  //     errorText: null,
  //   };
  // }
}