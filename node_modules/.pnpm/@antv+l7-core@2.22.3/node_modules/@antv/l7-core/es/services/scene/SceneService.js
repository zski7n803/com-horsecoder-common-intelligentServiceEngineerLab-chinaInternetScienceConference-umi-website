import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// @ts-ignore
import { AsyncSeriesHook } from '@antv/async-hook';
import { DOM } from '@antv/l7-utils';
import elementResizeDetectorMaker from 'element-resize-detector';
import { EventEmitter } from 'eventemitter3';
import { createRendererContainer } from "../../utils/dom";
import { InteractionEvent } from "../interaction/IInteractionService";
/**
 * will emit `loaded` `resize` `destroy` event panstart panmove panend
 */
export default class Scene extends EventEmitter {
  /**
   * 使用各种 Service
   */
  get iconService() {
    return this.container.iconService;
  }
  get fontService() {
    return this.container.fontService;
  }
  get controlService() {
    return this.container.controlService;
  }
  get configService() {
    return this.container.globalConfigService;
  }
  get map() {
    return this.container.mapService;
  }
  get coordinateSystemService() {
    return this.container.coordinateSystemService;
  }
  get rendererService() {
    return this.container.rendererService;
  }
  get layerService() {
    return this.container.layerService;
  }
  get debugService() {
    return this.container.debugService;
  }
  get cameraService() {
    return this.container.cameraService;
  }
  get interactionService() {
    return this.container.interactionService;
  }
  get pickingService() {
    return this.container.pickingService;
  }
  get shaderModuleService() {
    return this.container.shaderModuleService;
  }
  get markerService() {
    return this.container.markerService;
  }
  get popupService() {
    return this.container.popupService;
  }

  /**
   * 是否首次渲染
   */

  constructor(container) {
    super();
    // @see https://github.com/webpack/tapable#usage
    _defineProperty(this, "destroyed", false);
    _defineProperty(this, "loaded", false);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "inited", false);
    // TODO: 改成状态机
    _defineProperty(this, "rendering", false);
    /**
     * canvas 容器
     */
    _defineProperty(this, "$container", void 0);
    _defineProperty(this, "canvas", void 0);
    _defineProperty(this, "markerContainer", void 0);
    _defineProperty(this, "resizeDetector", void 0);
    _defineProperty(this, "hooks", void 0);
    _defineProperty(this, "handleWindowResized", () => {
      this.emit('resize');
      // @ts-check
      if (this.$container) {
        this.initContainer();
        // 触发 Map， canvas
        // DOM.triggerResize();
        this.coordinateSystemService.needRefresh = true;
        //  repaint layers
        this.render();
      }
    });
    _defineProperty(this, "handleMapCameraChanged", viewport => {
      this.cameraService.update(viewport);
      this.render();
    });
    this.container = container;
    this.hooks = {
      /**
       * 初始化异步任务，可并行：
       * 1. initMap：初始化地图底图、相机
       * 2. initRenderer：初始化渲染引擎
       * 3. initWorker：初始化 Worker
       */
      init: new AsyncSeriesHook()
    };
    this.id = container.id;
  }
  init(sceneConfig) {
    var _this = this;
    // 设置场景配置项
    this.configService.setSceneConfig(this.id, sceneConfig);
    // 初始化 ShaderModule
    this.shaderModuleService.registerBuiltinModules();

    // 初始化资源管理 图片
    this.iconService.init();
    this.iconService.on('imageUpdate', () => this.render());
    // 字体资源
    this.fontService.init();
    /**
     * 初始化底图
     */
    this.hooks.init.tapPromise('initMap', /*#__PURE__*/_asyncToGenerator(function* () {
      _this.debugService.log('map.mapInitStart', {
        type: _this.map.version
      });
      // 等待首次相机同步
      yield new Promise(resolve => {
        _this.map.onCameraChanged(viewport => {
          _this.cameraService.init();
          _this.cameraService.update(viewport);
          resolve();
        });
        _this.map.init();
      });

      // 重新绑定非首次相机更新事件
      _this.map.onCameraChanged(_this.handleMapCameraChanged);
      _this.map.addMarkerContainer();
      // 初始化未加载的marker;
      _this.markerService.addMarkers();
      _this.markerService.addMarkerLayers();
      _this.popupService.initPopup();
      // 地图初始化之后 才能初始化 container 上的交互
      _this.interactionService.init();
      _this.interactionService.on(InteractionEvent.Drag, _this.addSceneEvent.bind(_this));
    }));

    /**
     * 初始化渲染引擎
     */
    this.hooks.init.tapPromise('initRenderer', /*#__PURE__*/_asyncToGenerator(function* () {
      var _this$map;
      // https://github.com/antvis/L7/issues/1459#issuecomment-1709481920 不确定我什么会报错先兼容一下
      const renderContainer = ((_this$map = _this.map) === null || _this$map === void 0 ? void 0 : _this$map.getOverlayContainer()) || undefined;
      if (renderContainer) {
        _this.$container = renderContainer;
      } else {
        _this.$container = createRendererContainer(_this.configService.getSceneConfig(_this.id).id || '');
      }

      // 创建底图之上的 container
      if (_this.$container) {
        const {
          canvas
        } = sceneConfig;
        _this.canvas = canvas ? canvas : DOM.create('canvas', '', _this.$container);
        _this.setCanvas();
        yield _this.rendererService.init(
        // @ts-ignore
        _this.canvas, _this.configService.getSceneConfig(_this.id), sceneConfig.gl);
        _this.registerContextLost();
        _this.initContainer();
        _this.resizeDetector = elementResizeDetectorMaker({
          strategy: 'scroll' //<- For ultra performance.
        });
        _this.resizeDetector.listenTo(_this.$container, _this.handleWindowResized);
        if (window.matchMedia) {
          var _window$matchMedia;
          (_window$matchMedia = window.matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)')) === null || _window$matchMedia === void 0 || _window$matchMedia.addListener(_this.handleWindowResized.bind('screen'));
        }
      } else {
        console.error('容器 id 不存在');
      }
      _this.pickingService.init(_this.id);
    }));
    this.render();
  }
  registerContextLost() {
    const canvas = this.rendererService.getCanvas();
    if (canvas) {
      canvas.addEventListener('webglcontextlost', () => this.emit('webglcontextlost'));
    }
  }
  addLayer(layer) {
    this.layerService.sceneService = this;
    this.layerService.add(layer);
  }
  addMask(mask) {
    this.layerService.sceneService = this;
    this.layerService.addMask(mask);
  }
  render() {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      if (_this2.rendering || _this2.destroyed) {
        return;
      }
      _this2.rendering = true;
      // 首次初始化，或者地图的容器被强制销毁的需要重新初始化
      if (!_this2.inited) {
        // 还未初始化完成需要等待

        yield _this2.hooks.init.promise(); // 初始化地图和渲染
        if (_this2.destroyed) {
          _this2.destroy();
        }
        // FIXME: 初始化 marker 容器，可以放到 map 初始化方法中？
        yield _this2.layerService.initLayers();
        _this2.layerService.renderLayers();
        _this2.controlService.addControls();
        _this2.loaded = true;
        _this2.emit('loaded');
        _this2.inited = true;
      } else {
        // 尝试初始化未初始化的图层
        yield _this2.layerService.initLayers();
        yield _this2.layerService.renderLayers();
      }

      // 组件需要等待layer 初始化完成之后添加
      _this2.rendering = false;
    })();
  }

  /**
   * 用户自定义添加第三方字体 （用户使用 layer/point/text/iconfont 的前提需要加载第三方字体文件）
   * @param fontFamily
   * @param fontPath
   */
  addFontFace(fontFamily, fontPath) {
    this.fontService.addFontFace(fontFamily, fontPath);
  }
  getSceneContainer() {
    return this.$container;
  }
  exportPng(type) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      var _this3$$container;
      const renderCanvas = (_this3$$container = _this3.$container) === null || _this3$$container === void 0 ? void 0 : _this3$$container.getElementsByTagName('canvas')[0];
      yield _this3.render();
      const layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');
      return layersPng;
    })();
  }
  getSceneConfig() {
    return this.configService.getSceneConfig(this.id);
  }

  // get point size info
  getPointSizeRange() {
    return this.rendererService.getPointSizeRange();
  }
  addMarkerContainer() {
    // @ts-ignore
    const mapContainer = this.$container.parentElement;
    if (mapContainer !== null) {
      this.markerContainer = DOM.create('div', 'l7-marker-container', mapContainer);
    }
  }
  getMarkerContainer() {
    return this.markerContainer;
  }
  destroy() {
    var _this$$container2;
    if (!this.inited) {
      this.destroyed = true;
      return;
    }
    this.resizeDetector.removeListener(this.$container, this.handleWindowResized);
    this.pickingService.destroy();
    this.layerService.destroy();

    // this.rendererService.destroy();

    this.interactionService.destroy();
    this.controlService.destroy();
    this.markerService.destroy();
    this.fontService.destroy();
    this.iconService.destroy();
    this.removeAllListeners();
    this.inited = false;
    this.map.destroy();
    setTimeout(() => {
      var _this$$container;
      (_this$$container = this.$container) === null || _this$$container === void 0 || _this$$container.removeChild(this.canvas);
      // this.canvas = null 清除对 webgl 实例的引用
      // @ts-ignore
      this.canvas = null;
      // Tip: 把这一部分销毁放到写下一个事件循环中执行，兼容 L7React 中 scene 和 layer 同时销毁的情况
      this.rendererService.destroy();
    });
    // 销毁 container 容器
    (_this$$container2 = this.$container) === null || _this$$container2 === void 0 || (_this$$container2 = _this$$container2.parentNode) === null || _this$$container2 === void 0 || _this$$container2.removeChild(this.$container);
    this.emit('destroy');
  }
  initContainer() {
    var _this$$container3, _this$$container4;
    const pixelRatio = DOM.DPR;
    const w = ((_this$$container3 = this.$container) === null || _this$$container3 === void 0 ? void 0 : _this$$container3.clientWidth) || 400;
    const h = ((_this$$container4 = this.$container) === null || _this$$container4 === void 0 ? void 0 : _this$$container4.clientHeight) || 300;
    const canvas = this.canvas;
    if (canvas) {
      canvas.width = w * pixelRatio;
      canvas.height = h * pixelRatio;
    }
    this.rendererService.viewport({
      x: 0,
      y: 0,
      width: pixelRatio * w,
      height: pixelRatio * h
    });
  }
  setCanvas() {
    var _this$$container5, _this$$container6;
    const pixelRatio = DOM.DPR;
    const w = ((_this$$container5 = this.$container) === null || _this$$container5 === void 0 ? void 0 : _this$$container5.clientWidth) || 400;
    const h = ((_this$$container6 = this.$container) === null || _this$$container6 === void 0 ? void 0 : _this$$container6.clientHeight) || 300;
    const canvas = this.canvas;
    canvas.width = w * pixelRatio;
    canvas.height = h * pixelRatio;
    canvas.style.width = '100%';
    canvas.style.height = '100%';
  }
  addSceneEvent(target) {
    this.emit(target.type, target);
  }
}