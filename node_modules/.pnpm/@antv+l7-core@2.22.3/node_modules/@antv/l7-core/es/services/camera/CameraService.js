import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { mat4 } from 'gl-matrix';
export default class CameraService {
  constructor() {
    _defineProperty(this, "viewport", void 0);
    /**
     * 不使用 Viewport 计算的 VP 矩阵，例如偏移坐标系场景
     */
    _defineProperty(this, "overridedViewProjectionMatrix", void 0);
    /**
     * ViewMatrix 逆矩阵，用于计算相机位置
     */
    // private viewMatrixInverse: number[];
    _defineProperty(this, "viewMatrixInverse", void 0);
    /**
     * 相机位置
     */
    _defineProperty(this, "cameraPosition", void 0);
  }
  init() {
    //
  }

  /**
   * 同步根据相机参数创建的视口
   */
  update(viewport) {
    this.viewport = viewport;

    // 计算逆矩阵
    // this.viewMatrixInverse = (mat4.invert(
    //   mat4.create(), (this.getViewMatrix() as unknown) as mat4,
    // ) as unknown) as number[];

    this.viewMatrixInverse = mat4.create();
    mat4.invert(this.viewMatrixInverse, viewport.getViewMatrix());
    this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];
  }
  getProjectionMatrix() {
    return this.viewport.getProjectionMatrix();
  }
  getModelMatrix() {
    return this.viewport.getModelMatrix();
  }
  getViewMatrix() {
    return this.viewport.getViewMatrix();
  }
  getViewMatrixUncentered() {
    return this.viewport.getViewMatrixUncentered();
  }
  getViewProjectionMatrixUncentered() {
    return this.viewport.getViewProjectionMatrixUncentered();
  }
  getViewProjectionMatrix() {
    return this.overridedViewProjectionMatrix || this.viewport.getViewProjectionMatrix();
  }
  getZoom() {
    return this.viewport.getZoom();
  }
  getZoomScale() {
    return this.viewport.getZoomScale();
  }
  getCenter() {
    const [lng, lat] = this.viewport.getCenter();
    return [lng, lat];
  }
  getFocalDistance() {
    return this.viewport.getFocalDistance();
  }
  getCameraPosition() {
    return this.cameraPosition;
  }
  projectFlat(lngLat, scale) {
    return this.viewport.projectFlat(lngLat, scale);
  }

  /**
   * 支持外部计算 VP 矩阵的场景，例如：在偏移坐标系场景中，需要重新计算 VP 矩阵
   */
  setViewProjectionMatrix(viewProjectionMatrix) {
    this.overridedViewProjectionMatrix = viewProjectionMatrix;
  }
}