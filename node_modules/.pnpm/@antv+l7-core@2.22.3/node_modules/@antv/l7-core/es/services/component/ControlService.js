import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { DOM } from '@antv/l7-utils';
import { PositionType } from "./IControlService";
const ControlDirectionConfig = {
  topleft: 'column',
  topright: 'column',
  bottomright: 'column',
  bottomleft: 'column',
  leftcenter: 'column',
  rightcenter: 'column',
  topcenter: 'row',
  bottomcenter: 'row',
  lefttop: 'row',
  righttop: 'row',
  leftbottom: 'row',
  rightbottom: 'row'
};
export default class ControlService {
  constructor() {
    _defineProperty(this, "container", void 0);
    _defineProperty(this, "controlCorners", void 0);
    _defineProperty(this, "controlContainer", void 0);
    _defineProperty(this, "scene", void 0);
    _defineProperty(this, "mapsService", void 0);
    _defineProperty(this, "controls", []);
    _defineProperty(this, "unAddControls", []);
  }
  init(cfg, sceneContainer) {
    this.container = cfg.container;
    this.scene = sceneContainer;
    this.mapsService = sceneContainer.mapService;
    this.initControlPos();
  }
  addControl(ctr, sceneContainer) {
    const mapsService = sceneContainer.mapService;
    if (mapsService.map) {
      ctr.addTo(this.scene); // scene对象
      this.controls.push(ctr);
    } else {
      this.unAddControls.push(ctr);
    }
  }
  getControlByName(name) {
    return this.controls.find(ctr => {
      return ctr.controlOption.name === name;
    });
  }
  removeControl(ctr) {
    const index = this.controls.indexOf(ctr);
    if (index > -1) {
      this.controls.splice(index, 1);
    }
    ctr.remove();
    return this;
  }
  addControls() {
    this.unAddControls.forEach(ctr => {
      ctr.addTo(this.scene); // scene对象
      this.controls.push(ctr);
    });
    this.unAddControls = [];
  }
  destroy() {
    for (const ctr of this.controls) {
      ctr.remove();
    }
    this.controls = [];
    this.clearControlPos();
  }
  initControlPos() {
    const corners = this.controlCorners = {};
    const l = 'l7-';
    const container = this.controlContainer = DOM.create('div', l + 'control-container', this.container);
    function createCorner(vSideList = []) {
      const className = vSideList.map(item => l + item).join(' ');
      corners[vSideList.filter(item => !['row', 'column'].includes(item)).join('')] = DOM.create('div', className, container);
    }
    function getCornerClassList(positionName) {
      const positionList = positionName.replace(/^(top|bottom|left|right|center)/, '$1-').split('-');
      return [...positionList, ControlDirectionConfig[positionName]];
    }
    Object.values(PositionType).forEach(position => {
      createCorner(getCornerClassList(position));
    });
    this.checkCornerOverlap();
  }
  clearControlPos() {
    for (const i in this.controlCorners) {
      if (this.controlCorners[i]) {
        DOM.remove(this.controlCorners[i]);
      }
    }
    if (this.controlContainer) {
      DOM.remove(this.controlContainer);
    }
  }
  checkCornerOverlap() {
    const Observer = window.MutationObserver;
    // 在 jest 或者低版本的浏览器下，如果不支持 MutationObserver 则直接不处理
    if (!Observer) {
      return;
    }
    for (const cornerType of Object.keys(this.controlCorners)) {
      const matchResult = cornerType.match(/^(top|bottom)(left|right)$/);
      if (matchResult) {
        const [, pos1, pos2] = matchResult;
        const dom = this.controlCorners[`${pos1}${pos2}`];
        const observer = new Observer(([{
          target
        }]) => {
          if (dom) {
            // @ts-ignore
            dom.style[pos1] = target.clientHeight + 'px';
          }
        });
        observer.observe(this.controlCorners[`${pos2}${pos1}`], {
          childList: true,
          attributes: true
        });
      }
    }
  }
}