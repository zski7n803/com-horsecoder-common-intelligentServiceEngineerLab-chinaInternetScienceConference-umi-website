/** Service interfaces */
import type { IFontService } from './services/asset/IFontService';
import type { IIconService } from './services/asset/IIconService';
import type { ICameraService } from './services/camera/ICameraService';
import type { IControlService } from './services/component/IControlService';
import type { IGlobalConfigService } from './services/config/IConfigService';
import type { ICoordinateSystemService } from './services/coordinate/ICoordinateSystemService';
import type { IDebugService } from './services/debug/IDebugService';
import type { IPickingService } from './services/interaction/IPickingService';
import type { ILayerService } from './services/layer/ILayerService';
import type { IStyleAttributeService } from './services/layer/IStyleAttributeService';
import type { ISceneService } from './services/scene/ISceneService';
import type { IShaderModuleService } from './services/shader/IShaderModuleService';
import GlobalConfigService from './services/config/ConfigService';
import InteractionService from './services/interaction/InteractionService';
/** PostProcessing passes */
import type { IMarkerService } from './services/component/IMarkerService';
import type { IPopupService } from './services/component/IPopupService';
import type { IMapConfig, IMapService } from './services/map/IMapService';
import type { IMultiPassRenderer, IPass, IPostProcessingPass, IPostProcessor } from './services/renderer/IMultiPassRenderer';
import type { IRendererService } from './services/renderer/IRendererService';
export declare const globalConfigService: GlobalConfigService;
export interface L7Container {
    id: string;
    globalConfigService: IGlobalConfigService;
    shaderModuleService: IShaderModuleService;
    layerService: ILayerService;
    debugService: IDebugService;
    rendererService: IRendererService;
    sceneService: ISceneService;
    cameraService: ICameraService;
    coordinateSystemService: ICoordinateSystemService;
    interactionService: InteractionService;
    mapConfig: Partial<IMapConfig>;
    mapService: IMapService;
    fontService: IFontService;
    iconService: IIconService;
    markerService: IMarkerService;
    popupService: IPopupService;
    controlService: IControlService;
    pickingService: IPickingService;
    styleAttributeService: IStyleAttributeService;
    normalPassFactory: (name: string) => IPass<unknown>;
    postProcessingPass: Record<string, IPostProcessingPass<unknown>>;
    postProcessingPassFactory: (named: string) => IPostProcessingPass<unknown>;
    postProcessor: IPostProcessor;
    multiPassRenderer: IMultiPassRenderer;
    customRenderService: {
        [key: string]: any;
    };
}
export declare function createSceneContainer(): L7Container;
export declare function createLayerContainer(sceneContainer: L7Container): {
    id: string;
    globalConfigService: IGlobalConfigService;
    shaderModuleService: IShaderModuleService;
    layerService: ILayerService;
    debugService: IDebugService;
    rendererService: IRendererService;
    sceneService: ISceneService;
    cameraService: ICameraService;
    coordinateSystemService: ICoordinateSystemService;
    interactionService: InteractionService;
    mapConfig: Partial<IMapConfig<{}>>;
    mapService: IMapService<{}>;
    fontService: IFontService;
    iconService: IIconService;
    markerService: IMarkerService;
    popupService: IPopupService;
    controlService: IControlService;
    pickingService: IPickingService;
    styleAttributeService: IStyleAttributeService;
    normalPassFactory: (name: string) => IPass<unknown>;
    postProcessingPass: Record<string, IPostProcessingPass<unknown>>;
    postProcessingPassFactory: (named: string) => IPostProcessingPass<unknown>;
    postProcessor: IPostProcessor;
    multiPassRenderer: IMultiPassRenderer;
    customRenderService: {
        [key: string]: any;
    };
};
