"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _eventemitter = require("eventemitter3");
class DebugService extends _eventemitter.EventEmitter {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "renderMap", new Map());
    (0, _defineProperty2.default)(this, "enable", false);
    (0, _defineProperty2.default)(this, "renderEnable", false);
    (0, _defineProperty2.default)(this, "cacheLogs", {});
  }
  setEnable(flag) {
    this.enable = !!flag;
  }
  log(key, values) {
    if (!this.enable) {
      return;
    }
    const keys = key.split('.'); // [12, init, layerInitStart]
    let parent = null;
    keys.forEach((k, i) => {
      if (parent !== null) {
        if (!parent[k]) {
          parent[k] = {};
        }
        if (i !== keys.length - 1) {
          parent = parent[k];
        }
      } else {
        if (!this.cacheLogs[k]) {
          this.cacheLogs[k] = {};
        }
        if (i !== keys.length - 1) {
          parent = this.cacheLogs[k];
        }
      }
      if (i === keys.length - 1) {
        parent[k] = (0, _objectSpread2.default)((0, _objectSpread2.default)({
          time: Date.now()
        }, parent[k]), values);
      }
    });
  }
  getLog(key) {
    switch (typeof key) {
      case 'string':
        return this.cacheLogs[key];
      case 'object':
        return key.map(k => this.cacheLogs[k]).filter(o => o !== undefined);
      case 'undefined':
        return this.cacheLogs;
    }
  }

  /**
   * 删除日志
   * @param key
   */
  removeLog(key) {
    delete this.cacheLogs[key];
  }
  generateRenderUid() {
    if (this.renderEnable) {
      return (0, _l7Utils.guid)();
    } else {
      return '';
    }
  }
  renderDebug(enable) {
    this.renderEnable = enable;
  }
  renderStart(id) {
    if (!this.renderEnable || !this.enable) {
      return;
    }
    const cacheRenderInfo = this.renderMap.get(id) || {};
    this.renderMap.set(id, (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cacheRenderInfo), {}, {
      renderUid: id,
      renderStart: Date.now()
    }));
  }
  renderEnd(id) {
    if (!this.renderEnable || !this.enable) {
      return;
    }
    const cacheRenderInfo = this.renderMap.get(id);
    if (cacheRenderInfo) {
      const renderStart = cacheRenderInfo.renderStart;
      const renderEnd = Date.now();
      this.emit('renderEnd', (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cacheRenderInfo), {}, {
        renderEnd,
        renderDuration: renderEnd - renderStart
      }));
      this.renderMap.delete(id);
    }
  }
  destroy() {
    this.cacheLogs = null;
    this.renderMap.clear();
  }
}
exports.default = DebugService;