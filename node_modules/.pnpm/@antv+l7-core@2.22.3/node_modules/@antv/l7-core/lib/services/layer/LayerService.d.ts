import type { DebouncedFunc } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
import type { L7Container } from '../../inversify.config';
import Clock from '../../utils/clock';
import type { ILayer, ILayerService, LayerServiceEvent } from './ILayerService';
export default class LayerService extends EventEmitter<LayerServiceEvent> implements ILayerService {
    private container;
    pickedLayerId: number;
    clock: Clock;
    alreadyInRendering: boolean;
    private layers;
    private layerList;
    private layerRenderID;
    private sceneInited;
    private animateInstanceCount;
    private shaderPicking;
    private enableRender;
    private get renderService();
    private get mapService();
    private get debugService();
    constructor(container: L7Container);
    reRender: DebouncedFunc<() => void>;
    throttleRenderLayers: DebouncedFunc<() => void>;
    needPick(type: string): boolean;
    add(layer: ILayer): void;
    addMask(mask: ILayer): void;
    initLayers(): Promise<void>;
    getSceneInited(): boolean;
    getRenderList(): ILayer[];
    getLayers(): ILayer[];
    getLayer(id: string): ILayer | undefined;
    getLayerByName(name: string): ILayer | undefined;
    remove(layer: ILayer, parentLayer?: ILayer): Promise<void>;
    removeAllLayers(): Promise<void>;
    setEnableRender(flag: boolean): void;
    renderLayers(): Promise<void>;
    renderMask(masks: ILayer[]): void;
    beforeRenderData(layer: ILayer): Promise<void>;
    renderTileLayerMask(layer: ILayer): void;
    renderTileLayer(layer: ILayer): Promise<void>;
    updateLayerRenderList(): void;
    destroy(): void;
    startAnimate(): void;
    stopAnimate(): void;
    getOESTextureFloat(): boolean;
    enableShaderPick(): void;
    disableShaderPick(): void;
    getShaderPickStat(): boolean;
    clear(): void;
    private runRender;
    private stopRender;
}
