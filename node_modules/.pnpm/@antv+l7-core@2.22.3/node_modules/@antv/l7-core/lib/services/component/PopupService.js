"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
class PopupService {
  constructor() {
    (0, _defineProperty2.default)(this, "scene", void 0);
    (0, _defineProperty2.default)(this, "mapsService", void 0);
    (0, _defineProperty2.default)(this, "popups", []);
    (0, _defineProperty2.default)(this, "unAddPopups", []);
  }
  get isMarkerReady() {
    return this.mapsService.map && this.mapsService.getMarkerContainer();
  }
  removePopup(popup) {
    if (popup !== null && popup !== void 0 && popup.isOpen()) {
      popup.remove();
    }
    const targetIndex = this.popups.indexOf(popup);
    if (targetIndex > -1) {
      this.popups.splice(targetIndex, 1);
    }
    const targetUnAddIndex = this.unAddPopups.indexOf(popup);
    if (targetUnAddIndex > -1) {
      this.unAddPopups.splice(targetUnAddIndex, 1);
    }
  }
  destroy() {
    this.popups.forEach(popup => popup.remove());
  }
  addPopup(popup) {
    if (popup && popup.getOptions().autoClose) {
      [...this.popups, ...this.unAddPopups].forEach(otherPopup => {
        if (otherPopup.getOptions().autoClose) {
          this.removePopup(otherPopup);
        }
      });
    }
    if (this.isMarkerReady) {
      popup.addTo(this.scene);
      this.popups.push(popup);
    } else {
      this.unAddPopups.push(popup);
    }
    popup.on('close', () => {
      this.removePopup(popup);
    });
  }
  initPopup() {
    if (this.unAddPopups.length) {
      this.unAddPopups.forEach(popup => {
        this.addPopup(popup);
        this.unAddPopups = [];
      });
    }
  }
  init(scene) {
    this.scene = scene;
    this.mapsService = scene.mapService;
  }
}
exports.default = PopupService;