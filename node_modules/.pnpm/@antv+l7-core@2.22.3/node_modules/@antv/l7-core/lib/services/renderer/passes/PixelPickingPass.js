"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _l7Utils = require("@antv/l7-utils");
var _IInteractionService = require("../../interaction/IInteractionService");
var _gl = require("../gl");
var _IMultiPassRenderer = require("../IMultiPassRenderer");
var _BaseNormalPass = _interopRequireDefault(require("./BaseNormalPass"));
/**
 * color-based PixelPickingPass
 * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md
 * @deprecated
 * 目前未使用
 */
class PixelPickingPass extends _BaseNormalPass.default {
  constructor(...args) {
    var _this;
    super(...args);
    _this = this;
    /**
     * picking framebuffer，供 attributes 颜色编码后输出
     */
    (0, _defineProperty2.default)(this, "pickingFBO", void 0);
    /**
     * 保存 layer 引用
     */
    (0, _defineProperty2.default)(this, "layer", void 0);
    (0, _defineProperty2.default)(this, "width", 0);
    (0, _defineProperty2.default)(this, "height", 0);
    /**
     * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer
     */
    (0, _defineProperty2.default)(this, "alreadyInRendering", false);
    /**
     * 拾取视口指定坐标属于的要素
     * TODO：支持区域拾取
     */
    (0, _defineProperty2.default)(this, "pickFromPickingFBO", ({
      x,
      y,
      lngLat,
      type
    }) => {
      if (!this.layer.isVisible() || !this.layer.needPick(type)) {
        return;
      }
      const {
        getViewportSize,
        readPixelsAsync,
        useFramebuffer
      } = this.rendererService;
      const {
        width,
        height
      } = getViewportSize();
      const {
        enableHighlight,
        enableSelect
      } = this.layer.getLayerConfig();
      const xInDevicePixel = x * _l7Utils.DOM.DPR;
      const yInDevicePixel = y * _l7Utils.DOM.DPR;
      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {
        return;
      }
      let pickedColors;
      useFramebuffer(this.pickingFBO, /*#__PURE__*/(0, _asyncToGenerator2.default)(function* () {
        var _pickedColors;
        // avoid realloc
        pickedColors = yield readPixelsAsync({
          x: Math.round(xInDevicePixel),
          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴
          y: Math.round(height - (y + 1) * _l7Utils.DOM.DPR),
          width: 1,
          height: 1,
          data: new Uint8Array(1 * 1 * 4),
          framebuffer: _this.pickingFBO
        });
        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {
          const pickedFeatureIdx = (0, _l7Utils.decodePickingColor)(pickedColors);
          const rawFeature = _this.layer.getSource().getFeatureById(pickedFeatureIdx);
          const target = {
            x,
            y,
            type,
            lngLat,
            featureId: pickedFeatureIdx,
            feature: rawFeature
          };
          if (!rawFeature) {
            // this.logger.error(
            //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',
            // );
          } else {
            // trigger onHover/Click callback on layer
            _this.layer.setCurrentPickId(pickedFeatureIdx);
            _this.triggerHoverOnLayer(target);
          }
        } else {
          const target = {
            x,
            y,
            lngLat,
            type: _this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',
            featureId: null,
            feature: null
          };
          _this.triggerHoverOnLayer((0, _objectSpread2.default)((0, _objectSpread2.default)({}, target), {}, {
            type: 'unpick'
          }));
          _this.triggerHoverOnLayer(target);
          _this.layer.setCurrentPickId(null);
        }
        if (enableHighlight) {
          _this.highlightPickedFeature(pickedColors);
        }
        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {
          _this.selectFeature(pickedColors);
        }
      }));
    });
  }
  getType() {
    return _IMultiPassRenderer.PassType.Normal;
  }
  getName() {
    return 'pixelPicking';
  }
  init(layer, config) {
    super.init(layer, config);
    this.layer = layer;
    const {
      createTexture2D,
      createFramebuffer,
      getViewportSize
    } = this.rendererService;
    const {
      width,
      height
    } = getViewportSize();
    // 创建 picking framebuffer，后续实时 resize
    const pickingColorTexture = createTexture2D({
      width,
      height,
      wrapS: _gl.gl.CLAMP_TO_EDGE,
      wrapT: _gl.gl.CLAMP_TO_EDGE,
      label: 'Picking Texture'
    });
    this.pickingFBO = createFramebuffer({
      color: pickingColorTexture
    });

    // 监听 hover 事件
    this.interactionService.on(_IInteractionService.InteractionEvent.Hover, this.pickFromPickingFBO);
    this.interactionService.on(_IInteractionService.InteractionEvent.Select, this.selectFeatureHandle.bind(this));
    this.interactionService.on(_IInteractionService.InteractionEvent.Active, this.highlightFeatureHandle.bind(this));
  }
  render(layer) {
    if (this.alreadyInRendering) {
      return;
    }
    const {
      getViewportSize,
      useFramebuffer,
      clear
    } = this.rendererService;
    const {
      width,
      height
    } = getViewportSize();

    // throttled
    this.alreadyInRendering = true;

    // resize first, fbo can't be resized in use
    if (this.width !== width || this.height !== height) {
      this.pickingFBO.resize({
        width,
        height
      });
      this.width = width;
      this.height = height;
    }
    useFramebuffer(this.pickingFBO, () => {
      clear({
        framebuffer: this.pickingFBO,
        color: [0, 0, 0, 0],
        stencil: 0,
        depth: 1
      });

      /**
       * picking pass 不需要 multipass，原因如下：
       * 1. 已经 clear，无需 ClearPass
       * 2. 只需要 RenderPass
       * 3. 后处理 pass 需要跳过
       */
      const originRenderFlag = this.layer.multiPassRenderer.getRenderFlag();
      this.layer.multiPassRenderer.setRenderFlag(false);
      // trigger hooks
      layer.hooks.beforePickingEncode.call();
      layer.render();
      layer.hooks.afterPickingEncode.call();
      this.layer.multiPassRenderer.setRenderFlag(originRenderFlag);
      this.alreadyInRendering = false;
    });
  }
  triggerHoverOnLayer(target) {
    this.layer.emit(target.type, target);
  }

  /**
   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：
   * 1. 鼠标移走时无法恢复
   * 2. 无法实现高亮颜色与原始原色的 alpha 混合
   * 因此高亮还是放在 shader 中做比较好
   * @example
   * this.layer.color('name', ['#000000'], {
   *  featureRange: {
   *    startIndex: pickedFeatureIdx,
   *    endIndex: pickedFeatureIdx + 1,
   *  },
   * });
   */
  highlightPickedFeature(pickedColors) {
    // @ts-ignore
    const [r, g, b] = pickedColors;
    this.layer.hooks.beforeHighlight.call([r, g, b]);
    this.layerService.renderLayers();
  }
  selectFeature(pickedColors) {
    // @ts-ignore
    const [r, g, b] = pickedColors;
    this.layer.hooks.beforeSelect.call([r, g, b]);
    this.layerService.renderLayers();
  }
  selectFeatureHandle({
    featureId
  }) {
    const pickedColors = (0, _l7Utils.encodePickingColor)(featureId);
    this.selectFeature(new Uint8Array(pickedColors));
  }
  highlightFeatureHandle({
    featureId
  }) {
    const pickedColors = (0, _l7Utils.encodePickingColor)(featureId);
    this.highlightPickedFeature(new Uint8Array(pickedColors));
  }
}
exports.default = PixelPickingPass;