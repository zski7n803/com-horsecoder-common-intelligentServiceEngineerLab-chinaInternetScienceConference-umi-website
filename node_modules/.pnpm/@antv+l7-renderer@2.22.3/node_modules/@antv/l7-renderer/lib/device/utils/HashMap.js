var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/device/utils/HashMap.ts
var HashMap_exports = {};
__export(HashMap_exports, {
  HashMap: () => HashMap,
  hashCodeNumberFinish: () => hashCodeNumberFinish,
  hashCodeNumberUpdate: () => hashCodeNumberUpdate,
  nullHashFunc: () => nullHashFunc
});
module.exports = __toCommonJS(HashMap_exports);
function hashCodeNumberUpdate(hash, v = 0) {
  hash += v;
  hash += hash << 10;
  hash += hash >>> 6;
  return hash >>> 0;
}
function hashCodeNumberFinish(hash) {
  hash += hash << 3;
  hash ^= hash >>> 11;
  hash += hash << 15;
  return hash >>> 0;
}
function nullHashFunc() {
  return 0;
}
var HashBucket = class {
  constructor() {
    this.keys = [];
    this.values = [];
  }
};
var HashMap = class {
  constructor(keyEqualFunc, keyHashFunc) {
    this.keyEqualFunc = keyEqualFunc;
    this.keyHashFunc = keyHashFunc;
    this.buckets = /* @__PURE__ */ new Map();
  }
  findBucketIndex(bucket, k) {
    for (let i = 0; i < bucket.keys.length; i++)
      if (this.keyEqualFunc(k, bucket.keys[i]))
        return i;
    return -1;
  }
  findBucket(k) {
    const bw = this.keyHashFunc(k);
    return this.buckets.get(bw);
  }
  get(k) {
    const bucket = this.findBucket(k);
    if (bucket === void 0)
      return null;
    const bi = this.findBucketIndex(bucket, k);
    if (bi < 0)
      return null;
    return bucket.values[bi];
  }
  add(k, v) {
    const bw = this.keyHashFunc(k);
    if (this.buckets.get(bw) === void 0)
      this.buckets.set(bw, new HashBucket());
    const bucket = this.buckets.get(bw);
    bucket.keys.push(k);
    bucket.values.push(v);
  }
  delete(k) {
    const bucket = this.findBucket(k);
    if (bucket === void 0)
      return;
    const bi = this.findBucketIndex(bucket, k);
    if (bi === -1)
      return;
    bucket.keys.splice(bi, 1);
    bucket.values.splice(bi, 1);
  }
  clear() {
    this.buckets.clear();
  }
  size() {
    let acc = 0;
    for (const bucket of this.buckets.values())
      acc += bucket.values.length;
    return acc;
  }
  *values() {
    for (const bucket of this.buckets.values())
      for (let j = bucket.values.length - 1; j >= 0; j--)
        yield bucket.values[j];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HashMap,
  hashCodeNumberFinish,
  hashCodeNumberUpdate,
  nullHashFunc
});
