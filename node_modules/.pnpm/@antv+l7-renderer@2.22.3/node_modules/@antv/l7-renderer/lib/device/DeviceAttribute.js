var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/device/DeviceAttribute.ts
var DeviceAttribute_exports = {};
__export(DeviceAttribute_exports, {
  default: () => DeviceAttribute
});
module.exports = __toCommonJS(DeviceAttribute_exports);
var DeviceAttribute = class {
  constructor(device, options) {
    const { buffer, offset, stride, normalized, size, divisor, shaderLocation } = options;
    this.buffer = buffer;
    this.attribute = {
      shaderLocation,
      buffer: buffer.get(),
      offset: offset || 0,
      stride: stride || 0,
      normalized: normalized || false,
      divisor: divisor || 0
    };
    if (size) {
      this.attribute.size = size;
    }
  }
  get() {
    return this.buffer;
  }
  updateBuffer(options) {
    this.buffer.subData(options);
  }
  destroy() {
    this.buffer.destroy();
  }
};
