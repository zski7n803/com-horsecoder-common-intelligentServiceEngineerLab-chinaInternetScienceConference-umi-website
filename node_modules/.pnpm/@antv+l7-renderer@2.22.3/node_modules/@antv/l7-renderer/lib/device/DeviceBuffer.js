var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/device/DeviceBuffer.ts
var DeviceBuffer_exports = {};
__export(DeviceBuffer_exports, {
  default: () => DeviceBuffer
});
module.exports = __toCommonJS(DeviceBuffer_exports);
var import_g_device_api = require("@antv/g-device-api");
var import_l7_core = require("@antv/l7-core");
var import_constants = require("./constants");
var import_typedarray = require("./utils/typedarray");
var DeviceBuffer = class {
  constructor(device, options) {
    this.isDestroyed = false;
    const { data, usage, type, isUBO, label } = options;
    let typed;
    if ((0, import_typedarray.isTypedArray)(data)) {
      typed = data;
    } else {
      typed = new import_constants.typedArrayCtorMap[this.type || import_l7_core.gl.FLOAT](data);
    }
    this.type = type;
    this.size = typed.byteLength;
    this.buffer = device.createBuffer({
      viewOrSize: typed,
      usage: isUBO ? import_g_device_api.BufferUsage.UNIFORM : import_g_device_api.BufferUsage.VERTEX,
      hint: import_constants.hintMap[usage || import_l7_core.gl.STATIC_DRAW]
    });
    if (label) {
      device.setResourceName(this.buffer, label);
    }
  }
  get() {
    return this.buffer;
  }
  destroy() {
    if (!this.isDestroyed) {
      this.buffer.destroy();
    }
    this.isDestroyed = true;
  }
  subData({
    data,
    offset
  }) {
    let typed;
    if ((0, import_typedarray.isTypedArray)(data)) {
      typed = data;
    } else {
      typed = new import_constants.typedArrayCtorMap[this.type || import_l7_core.gl.FLOAT](data);
    }
    this.buffer.setSubData(offset, new Uint8Array(typed.buffer));
  }
};
