var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/device/DeviceFramebuffer.ts
var DeviceFramebuffer_exports = {};
__export(DeviceFramebuffer_exports, {
  default: () => DeviceFramebuffer
});
module.exports = __toCommonJS(DeviceFramebuffer_exports);
var import_g_device_api = require("@antv/g-device-api");
var import_DeviceTexture2D = require("./DeviceTexture2D");
var DeviceFramebuffer = class {
  constructor(device, options) {
    this.device = device;
    this.options = options;
    this.createColorRenderTarget();
    this.createDepthRenderTarget();
  }
  createColorRenderTarget(resize = false) {
    const { width, height, color } = this.options;
    if (color) {
      if ((0, import_DeviceTexture2D.isTexture2D)(color)) {
        if (resize) {
          color.resize({ width, height });
        }
        this.colorTexture = color.get();
        this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);
        this.width = color["width"];
        this.height = color["height"];
      } else if (width && height) {
        this.colorTexture = this.device.createTexture({
          format: import_g_device_api.Format.U8_RGBA_RT,
          usage: import_g_device_api.TextureUsage.RENDER_TARGET,
          width,
          height
        });
        this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);
        this.width = width;
        this.height = height;
      }
    }
  }
  createDepthRenderTarget(resize = false) {
    const { width, height, depth } = this.options;
    if (depth) {
      if ((0, import_DeviceTexture2D.isTexture2D)(depth)) {
        if (resize) {
          depth.resize({ width, height });
        }
        this.depthTexture = depth.get();
        this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);
        this.width = depth["width"];
        this.height = depth["height"];
      } else if (width && height) {
        this.depthTexture = this.device.createTexture({
          format: import_g_device_api.Format.D24_S8,
          usage: import_g_device_api.TextureUsage.RENDER_TARGET,
          width,
          height
        });
        this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);
        this.width = width;
        this.height = height;
      }
    }
  }
  get() {
    return this.colorRenderTarget;
  }
  destroy() {
    var _a, _b;
    (_a = this.colorRenderTarget) == null ? void 0 : _a.destroy();
    (_b = this.depthRenderTarget) == null ? void 0 : _b.destroy();
  }
  resize({ width, height }) {
    if (this.width !== width || this.height !== height) {
      this.destroy();
      this.colorTexture.destroyed = true;
      this.depthTexture.destroyed = true;
      this.options.width = width;
      this.options.height = height;
      this.createColorRenderTarget(true);
      this.createDepthRenderTarget(true);
    }
  }
};
