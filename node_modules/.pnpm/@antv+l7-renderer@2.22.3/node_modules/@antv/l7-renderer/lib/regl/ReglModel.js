var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/regl/ReglModel.ts
var ReglModel_exports = {};
__export(ReglModel_exports, {
  default: () => ReglModel
});
module.exports = __toCommonJS(ReglModel_exports);
var import_g_device_api = require("@antv/g-device-api");
var import_l7_core = require("@antv/l7-core");
var import_l7_utils = require("@antv/l7-utils");
var import_constants = require("./constants");
var { isPlainObject, isTypedArray } = import_l7_utils.lodashUtil;
var ReglModel = class {
  constructor(reGl, options) {
    this.destroyed = false;
    this.uniforms = {};
    this.reGl = reGl;
    const { vs, fs, attributes, uniforms, primitive, count, elements, depth, cull, instances } = options;
    const vendorInfo = {
      platformString: "WebGL1",
      glslVersion: "#version 100",
      explicitBindingLocations: false,
      separateSamplerTextures: false,
      viewportOrigin: import_g_device_api.ViewportOrigin.LOWER_LEFT,
      clipSpaceNearZ: import_g_device_api.ClipSpaceNearZ.NEGATIVE_ONE,
      supportMRT: false
    };
    const reglUniforms = {};
    this.options = options;
    if (uniforms) {
      this.uniforms = this.extractUniforms(uniforms);
      Object.keys(uniforms).forEach((uniformName) => {
        reglUniforms[uniformName] = reGl.prop(uniformName);
      });
    }
    const reglAttributes = {};
    Object.keys(attributes).forEach((name) => {
      reglAttributes[name] = attributes[name].get();
    });
    const frag = (0, import_l7_core.removeDuplicateUniforms)(
      (0, import_g_device_api.preprocessShader_GLSL)(vendorInfo, "frag", fs, null, false)
    );
    const vert = (0, import_l7_core.removeDuplicateUniforms)(
      (0, import_g_device_api.preprocessShader_GLSL)(vendorInfo, "vert", vs, null, false)
    );
    const drawParams = {
      attributes: reglAttributes,
      frag,
      uniforms: reglUniforms,
      vert,
      // @ts-ignore
      colorMask: reGl.prop("colorMask"),
      lineWidth: 1,
      blend: {
        // @ts-ignore
        enable: reGl.prop("blend.enable"),
        // @ts-ignore
        func: reGl.prop("blend.func"),
        // @ts-ignore
        equation: reGl.prop("blend.equation"),
        // @ts-ignore
        color: reGl.prop("blend.color")
      },
      stencil: {
        // @ts-ignore
        enable: reGl.prop("stencil.enable"),
        // @ts-ignore
        mask: reGl.prop("stencil.mask"),
        // @ts-ignore
        func: reGl.prop("stencil.func"),
        // @ts-ignore
        opFront: reGl.prop("stencil.opFront"),
        // @ts-ignore
        opBack: reGl.prop("stencil.opBack")
      },
      primitive: import_constants.primitiveMap[primitive === void 0 ? import_l7_core.gl.TRIANGLES : primitive]
    };
    if (instances) {
      drawParams.instances = instances;
    }
    if (count) {
      drawParams.count = count;
    } else if (elements) {
      drawParams.elements = elements.get();
    }
    this.initDepthDrawParams({ depth }, drawParams);
    this.initCullDrawParams({ cull }, drawParams);
    this.drawCommand = reGl(drawParams);
    this.drawParams = drawParams;
  }
  updateAttributesAndElements(attributes, elements) {
    const reglAttributes = {};
    Object.keys(attributes).forEach((name) => {
      reglAttributes[name] = attributes[name].get();
    });
    this.drawParams.attributes = reglAttributes;
    this.drawParams.elements = elements.get();
    this.drawCommand = this.reGl(this.drawParams);
  }
  updateAttributes(attributes) {
    const reglAttributes = {};
    Object.keys(attributes).forEach((name) => {
      reglAttributes[name] = attributes[name].get();
    });
    this.drawParams.attributes = reglAttributes;
    this.drawCommand = this.reGl(this.drawParams);
  }
  addUniforms(uniforms) {
    this.uniforms = __spreadValues(__spreadValues({}, this.uniforms), this.extractUniforms(uniforms));
  }
  draw(options, pick) {
    if (this.drawParams.attributes && Object.keys(this.drawParams.attributes).length === 0) {
      return;
    }
    const uniforms = __spreadValues(__spreadValues({}, this.uniforms), this.extractUniforms(options.uniforms || {}));
    const reglDrawProps = {};
    Object.keys(uniforms).forEach((uniformName) => {
      const type = typeof uniforms[uniformName];
      if (type === "boolean" || type === "number" || Array.isArray(uniforms[uniformName]) || // @ts-ignore
      uniforms[uniformName].BYTES_PER_ELEMENT) {
        reglDrawProps[uniformName] = uniforms[uniformName];
      } else {
        reglDrawProps[uniformName] = uniforms[uniformName].get();
      }
    });
    reglDrawProps.blend = pick ? this.getBlendDrawParams({
      blend: { enable: false }
    }) : this.getBlendDrawParams(options);
    reglDrawProps.stencil = this.getStencilDrawParams(options);
    reglDrawProps.colorMask = this.getColorMaskDrawParams(options, pick);
    this.drawCommand(reglDrawProps);
  }
  destroy() {
    var _a, _b;
    (_b = (_a = this.drawParams) == null ? void 0 : _a.elements) == null ? void 0 : _b.destroy();
    if (this.options.attributes) {
      Object.values(this.options.attributes).forEach((attr) => {
        attr == null ? void 0 : attr.destroy();
      });
    }
    this.destroyed = true;
  }
  /**
   * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#depth-buffer
   */
  initDepthDrawParams({ depth }, drawParams) {
    if (depth) {
      drawParams.depth = {
        enable: depth.enable === void 0 ? true : !!depth.enable,
        mask: depth.mask === void 0 ? true : !!depth.mask,
        func: import_constants.depthFuncMap[depth.func || import_l7_core.gl.LESS],
        range: depth.range || [0, 1]
      };
    }
  }
  getBlendDrawParams({ blend }) {
    const { enable, func, equation, color = [0, 0, 0, 0] } = blend || {};
    return {
      enable: !!enable,
      func: {
        srcRGB: import_constants.blendFuncMap[func && func.srcRGB || import_l7_core.gl.SRC_ALPHA],
        srcAlpha: import_constants.blendFuncMap[func && func.srcAlpha || import_l7_core.gl.SRC_ALPHA],
        dstRGB: import_constants.blendFuncMap[func && func.dstRGB || import_l7_core.gl.ONE_MINUS_SRC_ALPHA],
        dstAlpha: import_constants.blendFuncMap[func && func.dstAlpha || import_l7_core.gl.ONE_MINUS_SRC_ALPHA]
      },
      equation: {
        rgb: import_constants.blendEquationMap[equation && equation.rgb || import_l7_core.gl.FUNC_ADD],
        alpha: import_constants.blendEquationMap[equation && equation.alpha || import_l7_core.gl.FUNC_ADD]
      },
      color
    };
  }
  /**
   * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#stencil
   */
  getStencilDrawParams({ stencil }) {
    const {
      enable,
      mask = -1,
      func = {
        cmp: import_l7_core.gl.ALWAYS,
        ref: 0,
        mask: -1
      },
      opFront = {
        fail: import_l7_core.gl.KEEP,
        zfail: import_l7_core.gl.KEEP,
        zpass: import_l7_core.gl.KEEP
      },
      opBack = {
        fail: import_l7_core.gl.KEEP,
        zfail: import_l7_core.gl.KEEP,
        zpass: import_l7_core.gl.KEEP
      }
    } = stencil || {};
    return {
      enable: !!enable,
      mask,
      func: __spreadProps(__spreadValues({}, func), {
        cmp: import_constants.stencilFuncMap[func.cmp]
      }),
      opFront: {
        fail: import_constants.stencilOpMap[opFront.fail],
        zfail: import_constants.stencilOpMap[opFront.zfail],
        zpass: import_constants.stencilOpMap[opFront.zpass]
      },
      opBack: {
        fail: import_constants.stencilOpMap[opBack.fail],
        zfail: import_constants.stencilOpMap[opBack.zfail],
        zpass: import_constants.stencilOpMap[opBack.zpass]
      }
    };
  }
  getColorMaskDrawParams({ stencil }, pick) {
    const colorMask = (stencil == null ? void 0 : stencil.enable) && stencil.opFront && !pick ? [false, false, false, false] : [true, true, true, true];
    return colorMask;
  }
  /**
   * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#culling
   */
  initCullDrawParams({ cull }, drawParams) {
    if (cull) {
      const { enable, face = import_l7_core.gl.BACK } = cull;
      drawParams.cull = {
        enable: !!enable,
        face: import_constants.cullFaceMap[face]
      };
    }
  }
  /**
   * 考虑结构体命名, eg:
   * a: { b: 1 }  ->  'a.b'
   * a: [ { b: 1 } ] -> 'a[0].b'
   */
  extractUniforms(uniforms) {
    const extractedUniforms = {};
    Object.keys(uniforms).forEach((uniformName) => {
      this.extractUniformsRecursively(uniformName, uniforms[uniformName], extractedUniforms, "");
    });
    return extractedUniforms;
  }
  extractUniformsRecursively(uniformName, uniformValue, uniforms, prefix) {
    if (uniformValue === null || typeof uniformValue === "number" || // u_A: 1
    typeof uniformValue === "boolean" || // u_A: false
    Array.isArray(uniformValue) && typeof uniformValue[0] === "number" || // u_A: [1, 2, 3]
    isTypedArray(uniformValue) || // u_A: Float32Array
    // @ts-ignore
    uniformValue === "" || "resize" in uniformValue) {
      uniforms[`${prefix && prefix + "."}${uniformName}`] = uniformValue;
      return;
    }
    if (isPlainObject(uniformValue)) {
      Object.keys(uniformValue).forEach((childName) => {
        this.extractUniformsRecursively(
          childName,
          // @ts-ignore
          uniformValue[childName],
          uniforms,
          `${prefix && prefix + "."}${uniformName}`
        );
      });
    }
    if (Array.isArray(uniformValue)) {
      uniformValue.forEach((child, idx) => {
        Object.keys(child).forEach((childName) => {
          this.extractUniformsRecursively(
            childName,
            // @ts-ignore
            child[childName],
            uniforms,
            `${prefix && prefix + "."}${uniformName}[${idx}]`
          );
        });
      });
    }
  }
};
