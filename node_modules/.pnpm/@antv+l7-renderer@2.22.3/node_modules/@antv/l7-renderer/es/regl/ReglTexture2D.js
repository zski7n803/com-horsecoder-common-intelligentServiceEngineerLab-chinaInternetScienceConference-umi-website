// src/regl/ReglTexture2D.ts
import { gl } from "@antv/l7-core";
import {
  colorSpaceMap,
  dataTypeMap,
  filterMap,
  formatMap,
  mipmapMap,
  wrapModeMap
} from "./constants";
var ReglTexture2D = class {
  constructor(reGl, options) {
    this.isDestroy = false;
    const {
      data,
      type = gl.UNSIGNED_BYTE,
      width,
      height,
      flipY = false,
      format = gl.RGBA,
      mipmap = false,
      wrapS = gl.CLAMP_TO_EDGE,
      wrapT = gl.CLAMP_TO_EDGE,
      aniso = 0,
      alignment = 1,
      premultiplyAlpha = false,
      mag = gl.NEAREST,
      min = gl.NEAREST,
      colorSpace = gl.BROWSER_DEFAULT_WEBGL,
      x = 0,
      y = 0,
      copy = false
    } = options;
    this.width = width;
    this.height = height;
    const textureOptions = {
      width,
      height,
      // @ts-ignore
      type: dataTypeMap[type],
      format: formatMap[format],
      wrapS: wrapModeMap[wrapS],
      wrapT: wrapModeMap[wrapT],
      // @ts-ignore
      mag: filterMap[mag],
      min: filterMap[min],
      alignment,
      flipY,
      colorSpace: colorSpaceMap[colorSpace],
      premultiplyAlpha,
      aniso,
      // copy pixels from current bind framebuffer
      x,
      y,
      copy
    };
    if (data) {
      textureOptions.data = data;
    }
    if (typeof mipmap === "number") {
      textureOptions.mipmap = mipmapMap[mipmap];
    } else if (typeof mipmap === "boolean") {
      textureOptions.mipmap = mipmap;
    }
    this.texture = reGl.texture(textureOptions);
  }
  get() {
    return this.texture;
  }
  update(props = {}) {
    this.texture(props);
  }
  bind() {
    this.texture._texture.bind();
  }
  resize({ width, height }) {
    this.texture.resize(width, height);
    this.width = width;
    this.height = height;
  }
  getSize() {
    return [this.width, this.height];
  }
  destroy() {
    var _a;
    if (!this.isDestroy) {
      (_a = this.texture) == null ? void 0 : _a.destroy();
    }
    this.isDestroy = true;
  }
};
export {
  ReglTexture2D as default
};
