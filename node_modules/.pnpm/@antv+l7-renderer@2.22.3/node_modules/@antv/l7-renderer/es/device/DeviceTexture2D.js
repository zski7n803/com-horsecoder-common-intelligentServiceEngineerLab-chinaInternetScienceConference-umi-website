// src/device/DeviceTexture2D.ts
import {
  TextureUsage as DeviceTextureUsage,
  FilterMode,
  Format,
  MipmapFilterMode
} from "@antv/g-device-api";
import { TextureUsage, gl } from "@antv/l7-core";
import { wrapModeMap } from "./constants";
import { extend3ChannelsTo4 } from "./utils/typedarray";
function isTexture2D(t) {
  return !!(t && t["texture"]);
}
var DeviceTexture2D = class {
  constructor(device, options) {
    this.device = device;
    this.options = options;
    this.isDestroy = false;
    const {
      wrapS = gl.CLAMP_TO_EDGE,
      wrapT = gl.CLAMP_TO_EDGE,
      aniso,
      mag = gl.NEAREST,
      min = gl.NEAREST
    } = options;
    this.createTexture(options);
    this.sampler = device.createSampler({
      addressModeU: wrapModeMap[wrapS],
      addressModeV: wrapModeMap[wrapT],
      minFilter: min === gl.NEAREST ? FilterMode.POINT : FilterMode.BILINEAR,
      magFilter: mag === gl.NEAREST ? FilterMode.POINT : FilterMode.BILINEAR,
      mipmapFilter: MipmapFilterMode.NO_MIP,
      // lodMinClamp: 0,
      // lodMaxClamp: 0,
      maxAnisotropy: aniso
    });
  }
  createTexture(options) {
    const {
      type = gl.UNSIGNED_BYTE,
      width,
      height,
      flipY = false,
      format = gl.RGBA,
      alignment = 1,
      usage = TextureUsage.SAMPLED,
      // premultiplyAlpha = false,
      unorm = false,
      // colorSpace = gl.BROWSER_DEFAULT_WEBGL,
      // x = 0,
      // y = 0,
      // copy = false,
      label
    } = options;
    let { data } = options;
    this.width = width;
    this.height = height;
    let pixelFormat = Format.U8_RGBA_RT;
    if (type === gl.UNSIGNED_BYTE && format === gl.RGBA) {
      pixelFormat = unorm ? Format.U8_RGBA_NORM : Format.U8_RGBA_RT;
    } else if (type === gl.UNSIGNED_BYTE && format === gl.LUMINANCE) {
      pixelFormat = Format.U8_LUMINANCE;
    } else if (type === gl.FLOAT && format === gl.LUMINANCE) {
      pixelFormat = Format.F32_LUMINANCE;
    } else if (type === gl.FLOAT && format === gl.RGB) {
      if (this.device.queryVendorInfo().platformString === "WebGPU") {
        if (data) {
          data = extend3ChannelsTo4(data, 0);
        }
        pixelFormat = Format.F32_RGBA;
      } else {
        pixelFormat = Format.F32_RGB;
      }
    } else if (type === gl.FLOAT && format === gl.RGBA) {
      pixelFormat = Format.F32_RGBA;
    } else if (type === gl.FLOAT && format === gl.RED) {
      pixelFormat = Format.F32_R;
    } else {
      throw new Error(`create texture error, type: ${type}, format: ${format}`);
    }
    this.texture = this.device.createTexture({
      format: pixelFormat,
      width,
      height,
      usage: usage === TextureUsage.SAMPLED ? DeviceTextureUsage.SAMPLED : DeviceTextureUsage.RENDER_TARGET,
      pixelStore: {
        unpackFlipY: flipY,
        packAlignment: alignment
      },
      // mipLevelCount: usage === TextureUsage.RENDER_TARGET ? 1 : mipmap ? 1 : 0,
      mipLevelCount: 1
    });
    if (label) {
      this.device.setResourceName(this.texture, label);
    }
    if (data) {
      this.texture.setImageData([data]);
    }
  }
  get() {
    return this.texture;
  }
  update(props) {
    const { data } = props;
    this.texture.setImageData([data]);
  }
  bind() {
  }
  resize({ width, height }) {
    if (this.width !== width || this.height !== height) {
      this.destroy();
    }
    this.options.width = width;
    this.options.height = height;
    this.createTexture(this.options);
    this.isDestroy = false;
  }
  getSize() {
    return [this.width, this.height];
  }
  destroy() {
    var _a;
    if (!this.isDestroy && !this.texture.destroyed) {
      (_a = this.texture) == null ? void 0 : _a.destroy();
    }
    this.isDestroy = true;
  }
};
export {
  DeviceTexture2D as default,
  isTexture2D
};
