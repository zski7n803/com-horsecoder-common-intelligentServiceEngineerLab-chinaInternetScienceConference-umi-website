// src/device/DeviceElements.ts
import { BufferUsage } from "@antv/g-device-api";
import { gl } from "@antv/l7-core";
import { typedArrayCtorMap } from "./constants";
import { isTypedArray } from "./utils/typedarray";
var DeviceElements = class {
  constructor(device, options) {
    const { data, type, count = 0 } = options;
    let typed;
    if (isTypedArray(data)) {
      typed = data;
    } else {
      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);
    }
    this.type = type;
    this.count = count;
    this.indexBuffer = device.createBuffer({
      viewOrSize: typed,
      usage: BufferUsage.INDEX
    });
  }
  get() {
    return this.indexBuffer;
  }
  subData({
    data
  }) {
    let typed;
    if (isTypedArray(data)) {
      typed = data;
    } else {
      typed = new typedArrayCtorMap[this.type || gl.UNSIGNED_INT](data);
    }
    this.indexBuffer.setSubData(0, new Uint8Array(typed.buffer));
  }
  destroy() {
    this.indexBuffer.destroy();
  }
};
export {
  DeviceElements as default
};
