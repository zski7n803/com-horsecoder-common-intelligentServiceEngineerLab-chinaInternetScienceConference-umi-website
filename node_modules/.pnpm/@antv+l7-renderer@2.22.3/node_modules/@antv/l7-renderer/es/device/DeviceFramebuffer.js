// src/device/DeviceFramebuffer.ts
import { Format, TextureUsage } from "@antv/g-device-api";
import { isTexture2D } from "./DeviceTexture2D";
var DeviceFramebuffer = class {
  constructor(device, options) {
    this.device = device;
    this.options = options;
    this.createColorRenderTarget();
    this.createDepthRenderTarget();
  }
  createColorRenderTarget(resize = false) {
    const { width, height, color } = this.options;
    if (color) {
      if (isTexture2D(color)) {
        if (resize) {
          color.resize({ width, height });
        }
        this.colorTexture = color.get();
        this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);
        this.width = color["width"];
        this.height = color["height"];
      } else if (width && height) {
        this.colorTexture = this.device.createTexture({
          format: Format.U8_RGBA_RT,
          usage: TextureUsage.RENDER_TARGET,
          width,
          height
        });
        this.colorRenderTarget = this.device.createRenderTargetFromTexture(this.colorTexture);
        this.width = width;
        this.height = height;
      }
    }
  }
  createDepthRenderTarget(resize = false) {
    const { width, height, depth } = this.options;
    if (depth) {
      if (isTexture2D(depth)) {
        if (resize) {
          depth.resize({ width, height });
        }
        this.depthTexture = depth.get();
        this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);
        this.width = depth["width"];
        this.height = depth["height"];
      } else if (width && height) {
        this.depthTexture = this.device.createTexture({
          format: Format.D24_S8,
          usage: TextureUsage.RENDER_TARGET,
          width,
          height
        });
        this.depthRenderTarget = this.device.createRenderTargetFromTexture(this.depthTexture);
        this.width = width;
        this.height = height;
      }
    }
  }
  get() {
    return this.colorRenderTarget;
  }
  destroy() {
    var _a, _b;
    (_a = this.colorRenderTarget) == null ? void 0 : _a.destroy();
    (_b = this.depthRenderTarget) == null ? void 0 : _b.destroy();
  }
  resize({ width, height }) {
    if (this.width !== width || this.height !== height) {
      this.destroy();
      this.colorTexture.destroyed = true;
      this.depthTexture.destroyed = true;
      this.options.width = width;
      this.options.height = height;
      this.createColorRenderTarget(true);
      this.createDepthRenderTarget(true);
    }
  }
};
export {
  DeviceFramebuffer as default
};
