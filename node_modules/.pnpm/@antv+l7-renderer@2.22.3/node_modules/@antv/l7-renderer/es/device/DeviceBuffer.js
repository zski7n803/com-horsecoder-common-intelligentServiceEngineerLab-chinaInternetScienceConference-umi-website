// src/device/DeviceBuffer.ts
import { BufferUsage } from "@antv/g-device-api";
import { gl } from "@antv/l7-core";
import { hintMap, typedArrayCtorMap } from "./constants";
import { isTypedArray } from "./utils/typedarray";
var DeviceBuffer = class {
  constructor(device, options) {
    this.isDestroyed = false;
    const { data, usage, type, isUBO, label } = options;
    let typed;
    if (isTypedArray(data)) {
      typed = data;
    } else {
      typed = new typedArrayCtorMap[this.type || gl.FLOAT](data);
    }
    this.type = type;
    this.size = typed.byteLength;
    this.buffer = device.createBuffer({
      viewOrSize: typed,
      usage: isUBO ? BufferUsage.UNIFORM : BufferUsage.VERTEX,
      hint: hintMap[usage || gl.STATIC_DRAW]
    });
    if (label) {
      device.setResourceName(this.buffer, label);
    }
  }
  get() {
    return this.buffer;
  }
  destroy() {
    if (!this.isDestroyed) {
      this.buffer.destroy();
    }
    this.isDestroyed = true;
  }
  subData({
    data,
    offset
  }) {
    let typed;
    if (isTypedArray(data)) {
      typed = data;
    } else {
      typed = new typedArrayCtorMap[this.type || gl.FLOAT](data);
    }
    this.buffer.setSubData(offset, new Uint8Array(typed.buffer));
  }
};
export {
  DeviceBuffer as default
};
