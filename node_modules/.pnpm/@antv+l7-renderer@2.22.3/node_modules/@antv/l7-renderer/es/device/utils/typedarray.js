// src/device/utils/typedarray.ts
var dtypes = {
  "[object Int8Array]": 5120,
  "[object Int16Array]": 5122,
  "[object Int32Array]": 5124,
  "[object Uint8Array]": 5121,
  "[object Uint8ClampedArray]": 5121,
  "[object Uint16Array]": 5123,
  "[object Uint32Array]": 5125,
  "[object Float32Array]": 5126,
  "[object Float64Array]": 5121,
  "[object ArrayBuffer]": 5121
};
function isTypedArray(x) {
  return Object.prototype.toString.call(x) in dtypes;
}
function extend3ChannelsTo4(array, valueToInsert) {
  const originalLength = array.length;
  const insertCount = Math.ceil(originalLength / 3);
  const newLength = originalLength + insertCount;
  const newArray = new Float32Array(newLength);
  for (let i = 0; i < newLength; i += 4) {
    newArray[i] = array[i / 4 * 3];
    newArray[i + 1] = array[i / 4 * 3 + 1];
    newArray[i + 2] = array[i / 4 * 3 + 2];
    newArray[i + 3] = valueToInsert;
  }
  return newArray;
}
export {
  extend3ChannelsTo4,
  isTypedArray
};
