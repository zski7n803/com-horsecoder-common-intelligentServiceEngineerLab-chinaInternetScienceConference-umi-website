'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var invariant = _interopDefault(require('invariant'));
var history = require('history');
var document = _interopDefault(require('global/document'));
var reactRedux = require('react-redux');
var redux = require('redux');
var dvaCore = require('dva-core');
var router = require('react-router-dom');
var routerRedux = require('connected-react-router');
var isomorphicFetch = _interopDefault(require('isomorphic-fetch'));

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var cached = {};

function registerModel(app, model) {
  model = model.default || model;

  if (!cached[model.namespace]) {
    app.model(model);
    cached[model.namespace] = 1;
  }
}

var defaultLoadingComponent = function defaultLoadingComponent() {
  return null;
};

function asyncComponent(config) {
  var resolve = config.resolve;
  return /*#__PURE__*/function (_Component) {
    _inherits(DynamicComponent, _Component);

    var _super = _createSuper(DynamicComponent);

    function DynamicComponent() {
      var _this;

      _classCallCheck(this, DynamicComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.LoadingComponent = config.LoadingComponent || defaultLoadingComponent;
      _this.state = {
        AsyncComponent: null
      };

      _this.load();

      return _this;
    }

    _createClass(DynamicComponent, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.mounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;
      }
    }, {
      key: "load",
      value: function load() {
        var _this2 = this;

        resolve().then(function (m) {
          var AsyncComponent = m.default || m;

          if (_this2.mounted) {
            _this2.setState({
              AsyncComponent: AsyncComponent
            });
          } else {
            _this2.state.AsyncComponent = AsyncComponent; // eslint-disable-line
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var AsyncComponent = this.state.AsyncComponent;
        var LoadingComponent = this.LoadingComponent;
        if (AsyncComponent) return /*#__PURE__*/React__default.createElement(AsyncComponent, this.props);
        return /*#__PURE__*/React__default.createElement(LoadingComponent, this.props);
      }
    }]);

    return DynamicComponent;
  }(React.Component);
}

function dynamic(config) {
  var app = config.app,
      resolveModels = config.models,
      resolveComponent = config.component;
  return asyncComponent(_objectSpread2({
    resolve: config.resolve || function () {
      var models = typeof resolveModels === 'function' ? resolveModels() : [];
      var component = resolveComponent();
      return new Promise(function (resolve) {
        Promise.all([].concat(_toConsumableArray(models), [component])).then(function (ret) {
          if (!models || !models.length) {
            return resolve(ret[0]);
          } else {
            var len = models.length;
            ret.slice(0, len).forEach(function (m) {
              m = m.default || m;

              if (!Array.isArray(m)) {
                m = [m];
              }

              m.map(function (_) {
                return registerModel(app, _);
              });
            });
            resolve(ret[len]);
          }
        });
      });
    }
  }, config));
}

dynamic.setDefaultLoadingComponent = function (LoadingComponent) {
  defaultLoadingComponent = LoadingComponent;
};

var connectRouter = routerRedux.connectRouter,
    routerMiddleware = routerRedux.routerMiddleware;
var isFunction = dvaCore.utils.isFunction;
var useHistory = router.useHistory,
    useLocation = router.useLocation,
    useParams = router.useParams,
    useRouteMatch = router.useRouteMatch;
function index () {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var history$1 = opts.history || history.createHashHistory();
  var createOpts = {
    initialReducer: {
      router: connectRouter(history$1)
    },
    setupMiddlewares: function setupMiddlewares(middlewares) {
      return [routerMiddleware(history$1)].concat(_toConsumableArray(middlewares));
    },
    setupApp: function setupApp(app) {
      app._history = patchHistory(history$1);
    }
  };
  var app = dvaCore.create(opts, createOpts);
  var oldAppStart = app.start;
  app.router = router;
  app.start = start;
  return app;

  function router(router) {
    invariant(isFunction(router), "[app.router] router should be function, but got ".concat(_typeof(router)));
    app._router = router;
  }

  function start(container) {
    // 允许 container 是字符串，然后用 querySelector 找元素
    if (isString(container)) {
      container = document.querySelector(container);
      invariant(container, "[app.start] container ".concat(container, " not found"));
    } // 并且是 HTMLElement


    invariant(!container || isHTMLElement(container), "[app.start] container should be HTMLElement"); // 路由必须提前注册

    invariant(app._router, "[app.start] router must be registered before app.start()");

    if (!app._store) {
      oldAppStart.call(app);
    }

    var store = app._store; // export _getProvider for HMR
    // ref: https://github.com/dvajs/dva/issues/469

    app._getProvider = getProvider.bind(null, store, app); // If has container, render; else, return react component

    if (container) {
      render(container, store, app, app._router);

      app._plugin.apply('onHmr')(render.bind(null, container, store, app));
    } else {
      return getProvider(store, this, this._router);
    }
  }
}

function isHTMLElement(node) {
  return _typeof(node) === 'object' && node !== null && node.nodeType && node.nodeName;
}

function isString(str) {
  return typeof str === 'string';
}

function getProvider(store, app, router) {
  var DvaRoot = function DvaRoot(extraProps) {
    return /*#__PURE__*/React__default.createElement(reactRedux.Provider, {
      store: store
    }, router(_objectSpread2({
      app: app,
      history: app._history
    }, extraProps)));
  };

  return DvaRoot;
}

function render(container, store, app, router) {
  var ReactDOM = require('react-dom'); // eslint-disable-line


  ReactDOM.render(React__default.createElement(getProvider(store, app, router)), container);
}

function patchHistory(history) {
  var oldListen = history.listen;

  history.listen = function (callback) {
    // TODO: refact this with modified ConnectedRouter
    // Let ConnectedRouter to sync history to store first
    // connected-react-router's version is locked since the check function may be broken
    // min version of connected-react-router
    // e.g.
    // function (e, t) {
    //   var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
    //   r.inTimeTravelling ? r.inTimeTravelling = !1 : a(e, t, n)
    // }
    // ref: https://github.com/umijs/umi/issues/2693
    var cbStr = callback.toString();
    var isConnectedRouterHandler = callback.name === 'handleLocationChange' && cbStr.indexOf('onLocationChanged') > -1 || cbStr.indexOf('.inTimeTravelling') > -1 && cbStr.indexOf('.inTimeTravelling') > -1 && cbStr.indexOf('arguments[2]') > -1; // why add __isDvaPatch: true
    // since it's a patch from dva, we need to identify it in the listen handlers

    callback(history.location, history.action, {
      __isDvaPatch: true
    });
    return oldListen.call(history, function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (isConnectedRouterHandler) {
        callback.apply(void 0, args);
      } else {
        // Delay all listeners besides ConnectedRouter
        setTimeout(function () {
          callback.apply(void 0, args);
        });
      }
    });
  };

  return history;
}

Object.defineProperty(exports, 'createBrowserHistory', {
  enumerable: true,
  get: function () {
    return history.createBrowserHistory;
  }
});
Object.defineProperty(exports, 'createHashHistory', {
  enumerable: true,
  get: function () {
    return history.createHashHistory;
  }
});
Object.defineProperty(exports, 'createMemoryHistory', {
  enumerable: true,
  get: function () {
    return history.createMemoryHistory;
  }
});
Object.defineProperty(exports, 'connect', {
  enumerable: true,
  get: function () {
    return reactRedux.connect;
  }
});
Object.defineProperty(exports, 'connectAdvanced', {
  enumerable: true,
  get: function () {
    return reactRedux.connectAdvanced;
  }
});
Object.defineProperty(exports, 'shallowEqual', {
  enumerable: true,
  get: function () {
    return reactRedux.shallowEqual;
  }
});
Object.defineProperty(exports, 'useDispatch', {
  enumerable: true,
  get: function () {
    return reactRedux.useDispatch;
  }
});
Object.defineProperty(exports, 'useSelector', {
  enumerable: true,
  get: function () {
    return reactRedux.useSelector;
  }
});
Object.defineProperty(exports, 'useStore', {
  enumerable: true,
  get: function () {
    return reactRedux.useStore;
  }
});
Object.defineProperty(exports, 'bindActionCreators', {
  enumerable: true,
  get: function () {
    return redux.bindActionCreators;
  }
});
Object.defineProperty(exports, 'saga', {
  enumerable: true,
  get: function () {
    return dvaCore.saga;
  }
});
exports.router = router;
exports.routerRedux = routerRedux;
exports.fetch = isomorphicFetch;
exports.default = index;
exports.dynamic = dynamic;
exports.useHistory = useHistory;
exports.useLocation = useLocation;
exports.useParams = useParams;
exports.useRouteMatch = useRouteMatch;
