{"version":3,"sources":["../src/index.ts","../src/store.ts","../src/execute.ts","../src/register.ts","../src/common.ts","../src/flow.ts"],"sourcesContent":["export { execute } from './execute';\nexport { register, load } from './register';\nexport { run, stop } from './flow';","import { FlowConfig } from \"./types\";\n\nexport type StoreValue = {\n  func: Function;\n};\n\nexport const flowCodeStore: Map<string, StoreValue> = new Map();\n\nexport const flowDefStore: Map<string, FlowConfig> = new Map();\n\nexport const flowStopSignal: Map<string, any> = new Map();","import { flowCodeStore } from './store';\n\nexport async function execute<R extends unknown>(flowRef: string, ...args: any[]): Promise<R> {\n  const flowValue = flowCodeStore.get(flowRef);\n\n  if (!flowValue) {\n    throw new Error(`没有这个方法:${flowRef}`);\n  }\n\n  return await flowValue.func(...args);\n}\n","import { flowCodeStore, flowDefStore } from \"./store\";\n\n/**\n * 注册函数\n */\nexport function register<T extends Function>(flowCodeId: string, func: T): void {\n  if (flowCodeStore.get(flowCodeId)) {\n    throw new Error(\"注册了同名方法: \" + flowCodeId);\n  }\n\n  flowCodeStore.set(flowCodeId, { func });\n}\n\n/**\n * 保存json\n */\nexport function load(flowId: string, json: JSON): void {\n  if (flowDefStore.get(flowId)) {\n    throw new Error(`存在多个id为${flowId}的流程`);\n  }\n\n  flowDefStore.set(flowId, JSON.parse(JSON.stringify(json)));\n}\n","export const PARAMS_TYPE_NUM = [\"string\", \"number\", \"boolean\", \"any\"];\n\nexport function getFlowValueType(type: string) {\n  switch (type) {\n    case \"string\":\n    case \"number\":\n    case \"boolean\":\n    case \"any\":\n      return type;\n    default:\n      return \"any\";\n  }\n}\n\nfunction isObject(target: any) {\n  return (\n    (typeof target === \"object\" && target) || typeof target === \"function\"\n  );\n}\n\n\nfunction clone(data: any, map: WeakMap<any, any>) {\n  if (!isObject(data)) {\n    return data;\n  }\n  if ([Date, RegExp].includes(data.constructor)) {\n    return new data.constructor(data);\n  }\n  if (typeof data === \"function\") {\n    return new Function(\"return \" + data.toString())();\n  }\n  const exist = map.get(data);\n  if (exist) {\n    return exist;\n  }\n  if (data instanceof Map) {\n    const result = new Map();\n    map.set(data, result);\n    data.forEach((val, key) => {\n      if (isObject(val)) {\n        result.set(key, clone(val, map));\n      } else {\n        result.set(key, val);\n      }\n    });\n    return result;\n  }\n  if (data instanceof Set) {\n    const result = new Set();\n    map.set(data, result);\n    data.forEach((val) => {\n      if (isObject(val)) {\n        result.add(clone(val, map));\n      } else {\n        result.add(val);\n      }\n    });\n    return result;\n  }\n  const keys = Reflect.ownKeys(data);\n  const allDesc = Object.getOwnPropertyDescriptors(data);\n  const result = Object.create(Object.getPrototypeOf(data), allDesc);\n  map.set(data, result);\n  keys.forEach((key) => {\n    const val = data[key];\n    if (isObject(val)) {\n      result[key] = clone(val, map);\n    } else {\n      result[key] = val;\n    }\n  });\n  return result;\n}\n\nexport function deepClone(target: any) {\n  const map = new WeakMap();\n  return clone(target, map);\n}\n","import { getFlowValueType } from \"./common\";\nimport { execute } from \"./execute\";\nimport { flowDefStore, flowStopSignal } from \"./store\";\nimport { FlowValue, FlowNode, FlowRoute } from \"./types\";\n\nfunction pickValue<T extends Record<string, any>>(\n  obj: T,\n  flowValues?: FlowValue[]\n): Partial<T> | null {\n  if (typeof obj !== \"object\") {\n    return null;\n  }\n\n  if (!flowValues) {\n    return null;\n  }\n\n  let result: Record<string, any> = {};\n\n  // @todo 是否一定过滤掉undefined\n  flowValues.forEach((flowValue) => {\n    if (typeof obj[flowValue.name] !== \"undefined\") {\n      result[flowValue.name] = obj[flowValue.name];\n    }\n  });\n\n  return result as Partial<T>;\n}\n\n// 校验、拷贝入参（以json中的params为准, 如果在params中未定义则过滤掉）\n\nexport function checkAllArgs(\n  paramsList: FlowValue[],\n  initialArgs: Record<string, any>\n) {\n  let args: Record<string, any> = {};\n\n  paramsList?.forEach((paramsValue) => {\n    const { type, name, defaultValue } = paramsValue;\n    const typeValueInFlow = getFlowValueType(type);\n    const typeInArg = typeof initialArgs[name];\n\n    if (initialArgs[name] === undefined && paramsValue.notnull) {\n      console.warn(`找不到参数${name},但在流程中定义了`);\n      args[name] = defaultValue || undefined;\n    } else {\n      if (typeValueInFlow !== \"any\" && typeInArg !== typeValueInFlow) {\n        console.warn(`参数${name}定义为${type}类型，但实际是${typeInArg}类型`);\n      }\n      args[name] = initialArgs[name];\n    }\n  });\n\n  return args;\n}\n\nconst runNode = async (route: FlowRoute, flowNodeMap: Map<string, FlowNode>, args: Record<string, any>): Promise<Record<string, any>> => {\n  if (route.target === \"end\") {\n    return args;\n  }\n  const flowNode = flowNodeMap.get(route.target);\n\n  if (!flowNode) {\n    console.warn(`找不到对应的流程节点${route.target}`);\n    return args;\n  }\n\n  // 事件节点\n  if (flowNode.type === \"event\") {\n    const eventResults = await execute<Record<string, any>>(\n      flowNode.reference,\n      pickValue(args, flowNode.params)\n    );\n    args = { ...args, ...pickValue(eventResults, flowNode.results) };\n  }\n\n  // 流程节点\n  else if (flowNode.type === \"flow\") {\n    const flowResults = await run(flowNode.reference, args);\n    args = { ...args, ...flowResults };\n  }\n  return args;\n}\n\n\n\nexport const run = async (flowId: string, initialArgs: any): Promise<any> => {\n  const flowConfig = flowDefStore.get(flowId);\n\n  if (!flowConfig) {\n    throw new Error(`找不到对应的流程片段${flowId}`);\n  }\n\n  // @todo 如果参数里有对象这里需要用深拷贝\n  // 参数内容和类型判断\n  let args = checkAllArgs(flowConfig.params, { ...initialArgs });\n\n  // 构建流程节点map结构\n  const flowNodeMap: Map<string, FlowNode> = new Map();\n  flowConfig.nodes.forEach((node) => {\n    flowNodeMap.set(node.id, node);\n  });\n\n  // 构造一个路由字典\n  const routeSourceMap: { [id: string]: FlowRoute[] } = {};\n  const routeNodeIdMap: { [id: string]: string } = {};\n  flowConfig.routes.forEach(route => {\n    if (!routeSourceMap[route.source]) routeSourceMap[route.source] = [];\n    routeSourceMap[route.source].push(route);\n    routeNodeIdMap[route.source] = route.source;\n    routeNodeIdMap[route.target] = route.target;\n  });\n\n\n  const routeLayers: FlowRoute[][] = [];\n  let currentRouteLayer: FlowRoute[] = routeSourceMap.start;\n  if (!currentRouteLayer) return;\n  routeLayers.push(currentRouteLayer);\n  while (currentRouteLayer.length > 0) {\n    let routeList: FlowRoute[] = [];\n    currentRouteLayer.forEach(route => {\n      routeList = [...routeList, ...(routeSourceMap[route.target] ? routeSourceMap[route.target]: [] )];\n    });\n    currentRouteLayer = routeList;\n    if (currentRouteLayer.length > 0) routeLayers.push(currentRouteLayer);\n  }\n\n  let stopSignal = false;\n  for (let i = 0; i < routeLayers.length; i += 1) {\n    if (stopSignal) break;\n    const layer: FlowRoute[] = routeLayers[i];\n    for (let j = 0; j < layer.length; j += 1) {\n      if (stopSignal) break;\n      const route = layer[j];\n      const result = await runNode(route, flowNodeMap, args);\n      if (flowStopSignal.get(flowId)) {\n        stopSignal = true;\n        args = { ...args, ...flowStopSignal.get(flowId) };\n        flowStopSignal.delete(flowId);\n      }\n      args = { ...args, ...result };\n    }\n  }\n\n  return pickValue(args, flowConfig.results);\n}\n\n\nexport const stop = async (flowId: string, args: any): Promise<any> => {\n  flowStopSignal.set(flowId, args)\n}"],"mappings":"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","names":[]}